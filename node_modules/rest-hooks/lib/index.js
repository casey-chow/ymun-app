import { Resource, SimpleResource, SuperagentResource, FetchShape, DeleteShape, ReadShape, MutateShape, Schema, SchemaList, SchemaDetail, SchemaOf, schemas } from './resource';
import NetworkManager from './state/NetworkManager';
import RIC from './state/RIC';
import PollingSubscription from './state/PollingSubscription';
import SubscriptionManager from './state/SubscriptionManager';
import reducer, { initialState } from './state/reducer';
import { useDenormalized } from './state/selectors';
import { useCache, useCacheLegacy, useFetcher, useRetrieve, useResource, useResourceLegacy, useSubscription, useMeta, useError, CacheProvider, useInvalidator, useResetter, ExternalCacheProvider, PromiseifyMiddleware, NetworkErrorBoundary, NetworkError } from './react-integration';
import useSelectionUnstable from './react-integration/hooks/useSelection';
import { AbstractInstanceType, FetchOptions, Method, State, FetchAction, ReceiveAction, RPCAction, PurgeAction, Dispatch, MiddlewareAPI, Middleware, Manager } from './types';
import { StateContext, DispatchContext } from './react-integration/context';
var __INTERNAL__ = {
  initialState: initialState,
  StateContext: StateContext,
  DispatchContext: DispatchContext,
  RIC: RIC
};
export { Resource, SimpleResource, SuperagentResource, CacheProvider, ExternalCacheProvider, PromiseifyMiddleware, useCache, useCacheLegacy, useFetcher, useRetrieve, useInvalidator, useResetter, useResource, useResourceLegacy, useSubscription, useMeta, useError, useSelectionUnstable, useDenormalized, NetworkManager, SubscriptionManager, PollingSubscription, reducer, NetworkErrorBoundary, schemas, __INTERNAL__ };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJSZXNvdXJjZSIsIlNpbXBsZVJlc291cmNlIiwiU3VwZXJhZ2VudFJlc291cmNlIiwiRmV0Y2hTaGFwZSIsIkRlbGV0ZVNoYXBlIiwiUmVhZFNoYXBlIiwiTXV0YXRlU2hhcGUiLCJTY2hlbWEiLCJTY2hlbWFMaXN0IiwiU2NoZW1hRGV0YWlsIiwiU2NoZW1hT2YiLCJzY2hlbWFzIiwiTmV0d29ya01hbmFnZXIiLCJSSUMiLCJQb2xsaW5nU3Vic2NyaXB0aW9uIiwiU3Vic2NyaXB0aW9uTWFuYWdlciIsInJlZHVjZXIiLCJpbml0aWFsU3RhdGUiLCJ1c2VEZW5vcm1hbGl6ZWQiLCJ1c2VDYWNoZSIsInVzZUNhY2hlTGVnYWN5IiwidXNlRmV0Y2hlciIsInVzZVJldHJpZXZlIiwidXNlUmVzb3VyY2UiLCJ1c2VSZXNvdXJjZUxlZ2FjeSIsInVzZVN1YnNjcmlwdGlvbiIsInVzZU1ldGEiLCJ1c2VFcnJvciIsIkNhY2hlUHJvdmlkZXIiLCJ1c2VJbnZhbGlkYXRvciIsInVzZVJlc2V0dGVyIiwiRXh0ZXJuYWxDYWNoZVByb3ZpZGVyIiwiUHJvbWlzZWlmeU1pZGRsZXdhcmUiLCJOZXR3b3JrRXJyb3JCb3VuZGFyeSIsIk5ldHdvcmtFcnJvciIsInVzZVNlbGVjdGlvblVuc3RhYmxlIiwiQWJzdHJhY3RJbnN0YW5jZVR5cGUiLCJGZXRjaE9wdGlvbnMiLCJNZXRob2QiLCJTdGF0ZSIsIkZldGNoQWN0aW9uIiwiUmVjZWl2ZUFjdGlvbiIsIlJQQ0FjdGlvbiIsIlB1cmdlQWN0aW9uIiwiRGlzcGF0Y2giLCJNaWRkbGV3YXJlQVBJIiwiTWlkZGxld2FyZSIsIk1hbmFnZXIiLCJTdGF0ZUNvbnRleHQiLCJEaXNwYXRjaENvbnRleHQiLCJfX0lOVEVSTkFMX18iXSwibWFwcGluZ3MiOiJBQUFBLFNBQ0VBLFFBREYsRUFFRUMsY0FGRixFQUdFQyxrQkFIRixFQUlFQyxVQUpGLEVBS0VDLFdBTEYsRUFNRUMsU0FORixFQU9FQyxXQVBGLEVBUUVDLE1BUkYsRUFTRUMsVUFURixFQVVFQyxZQVZGLEVBV0VDLFFBWEYsRUFZRUMsT0FaRixRQWFPLFlBYlA7QUFjQSxPQUFPQyxjQUFQLE1BQTJCLHdCQUEzQjtBQUNBLE9BQU9DLEdBQVAsTUFBZ0IsYUFBaEI7QUFDQSxPQUFPQyxtQkFBUCxNQUFnQyw2QkFBaEM7QUFDQSxPQUFPQyxtQkFBUCxNQUFnQyw2QkFBaEM7QUFDQSxPQUFPQyxPQUFQLElBQWtCQyxZQUFsQixRQUFzQyxpQkFBdEM7QUFDQSxTQUFTQyxlQUFULFFBQWdDLG1CQUFoQztBQUNBLFNBQ0VDLFFBREYsRUFFRUMsY0FGRixFQUdFQyxVQUhGLEVBSUVDLFdBSkYsRUFLRUMsV0FMRixFQU1FQyxpQkFORixFQU9FQyxlQVBGLEVBUUVDLE9BUkYsRUFTRUMsUUFURixFQVVFQyxhQVZGLEVBV0VDLGNBWEYsRUFZRUMsV0FaRixFQWFFQyxxQkFiRixFQWNFQyxvQkFkRixFQWVFQyxvQkFmRixFQWdCRUMsWUFoQkYsUUFpQk8scUJBakJQO0FBa0JBLE9BQU9DLG9CQUFQLE1BQWlDLHdDQUFqQztBQUVBLFNBQ0VDLG9CQURGLEVBRUVDLFlBRkYsRUFHRUMsTUFIRixFQUlFQyxLQUpGLEVBS0VDLFdBTEYsRUFNRUMsYUFORixFQU9FQyxTQVBGLEVBUUVDLFdBUkYsRUFTRUMsUUFURixFQVVFQyxhQVZGLEVBV0VDLFVBWEYsRUFZRUMsT0FaRixRQWFPLFNBYlA7QUFjQSxTQUFTQyxZQUFULEVBQXVCQyxlQUF2QixRQUE4Qyw2QkFBOUM7QUFFQSxJQUFNQyxZQUFZLEdBQUc7QUFDbkJqQyxFQUFBQSxZQUFZLEVBQVpBLFlBRG1CO0FBRW5CK0IsRUFBQUEsWUFBWSxFQUFaQSxZQUZtQjtBQUduQkMsRUFBQUEsZUFBZSxFQUFmQSxlQUhtQjtBQUluQnBDLEVBQUFBLEdBQUcsRUFBSEE7QUFKbUIsQ0FBckI7QUF3REEsU0FDRWIsUUFERixFQUVFQyxjQUZGLEVBR0VDLGtCQUhGLEVBSUUwQixhQUpGLEVBS0VHLHFCQUxGLEVBTUVDLG9CQU5GLEVBT0ViLFFBUEYsRUFRRUMsY0FSRixFQVNFQyxVQVRGLEVBVUVDLFdBVkYsRUFXRU8sY0FYRixFQVlFQyxXQVpGLEVBYUVQLFdBYkYsRUFjRUMsaUJBZEYsRUFlRUMsZUFmRixFQWdCRUMsT0FoQkYsRUFpQkVDLFFBakJGLEVBa0JFUSxvQkFsQkYsRUFtQkVqQixlQW5CRixFQW9CRU4sY0FwQkYsRUFxQkVHLG1CQXJCRixFQXNCRUQsbUJBdEJGLEVBdUJFRSxPQXZCRixFQXdCRWlCLG9CQXhCRixFQXlCRXRCLE9BekJGLEVBMEJFdUMsWUExQkYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBSZXNvdXJjZSxcbiAgU2ltcGxlUmVzb3VyY2UsXG4gIFN1cGVyYWdlbnRSZXNvdXJjZSxcbiAgRmV0Y2hTaGFwZSxcbiAgRGVsZXRlU2hhcGUsXG4gIFJlYWRTaGFwZSxcbiAgTXV0YXRlU2hhcGUsXG4gIFNjaGVtYSxcbiAgU2NoZW1hTGlzdCxcbiAgU2NoZW1hRGV0YWlsLFxuICBTY2hlbWFPZixcbiAgc2NoZW1hcyxcbn0gZnJvbSAnLi9yZXNvdXJjZSc7XG5pbXBvcnQgTmV0d29ya01hbmFnZXIgZnJvbSAnLi9zdGF0ZS9OZXR3b3JrTWFuYWdlcic7XG5pbXBvcnQgUklDIGZyb20gJy4vc3RhdGUvUklDJztcbmltcG9ydCBQb2xsaW5nU3Vic2NyaXB0aW9uIGZyb20gJy4vc3RhdGUvUG9sbGluZ1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgU3Vic2NyaXB0aW9uTWFuYWdlciBmcm9tICcuL3N0YXRlL1N1YnNjcmlwdGlvbk1hbmFnZXInO1xuaW1wb3J0IHJlZHVjZXIsIHsgaW5pdGlhbFN0YXRlIH0gZnJvbSAnLi9zdGF0ZS9yZWR1Y2VyJztcbmltcG9ydCB7IHVzZURlbm9ybWFsaXplZCB9IGZyb20gJy4vc3RhdGUvc2VsZWN0b3JzJztcbmltcG9ydCB7XG4gIHVzZUNhY2hlLFxuICB1c2VDYWNoZUxlZ2FjeSxcbiAgdXNlRmV0Y2hlcixcbiAgdXNlUmV0cmlldmUsXG4gIHVzZVJlc291cmNlLFxuICB1c2VSZXNvdXJjZUxlZ2FjeSxcbiAgdXNlU3Vic2NyaXB0aW9uLFxuICB1c2VNZXRhLFxuICB1c2VFcnJvcixcbiAgQ2FjaGVQcm92aWRlcixcbiAgdXNlSW52YWxpZGF0b3IsXG4gIHVzZVJlc2V0dGVyLFxuICBFeHRlcm5hbENhY2hlUHJvdmlkZXIsXG4gIFByb21pc2VpZnlNaWRkbGV3YXJlLFxuICBOZXR3b3JrRXJyb3JCb3VuZGFyeSxcbiAgTmV0d29ya0Vycm9yLFxufSBmcm9tICcuL3JlYWN0LWludGVncmF0aW9uJztcbmltcG9ydCB1c2VTZWxlY3Rpb25VbnN0YWJsZSBmcm9tICcuL3JlYWN0LWludGVncmF0aW9uL2hvb2tzL3VzZVNlbGVjdGlvbic7XG5pbXBvcnQgeyBSZXF1ZXN0IGFzIFJlcXVlc3RUeXBlIH0gZnJvbSAnc3VwZXJhZ2VudCc7XG5pbXBvcnQge1xuICBBYnN0cmFjdEluc3RhbmNlVHlwZSxcbiAgRmV0Y2hPcHRpb25zLFxuICBNZXRob2QsXG4gIFN0YXRlLFxuICBGZXRjaEFjdGlvbixcbiAgUmVjZWl2ZUFjdGlvbixcbiAgUlBDQWN0aW9uLFxuICBQdXJnZUFjdGlvbixcbiAgRGlzcGF0Y2gsXG4gIE1pZGRsZXdhcmVBUEksXG4gIE1pZGRsZXdhcmUsXG4gIE1hbmFnZXIsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgU3RhdGVDb250ZXh0LCBEaXNwYXRjaENvbnRleHQgfSBmcm9tICcuL3JlYWN0LWludGVncmF0aW9uL2NvbnRleHQnO1xuXG5jb25zdCBfX0lOVEVSTkFMX18gPSB7XG4gIGluaXRpYWxTdGF0ZSxcbiAgU3RhdGVDb250ZXh0LFxuICBEaXNwYXRjaENvbnRleHQsXG4gIFJJQyxcbn07XG5cbmV4cG9ydCB0eXBlIERlbGV0ZVNoYXBlPFxuICBTIGV4dGVuZHMgc2NoZW1hcy5FbnRpdHksXG4gIFBhcmFtcyBleHRlbmRzIFJlYWRvbmx5PG9iamVjdD4gPSBSZWFkb25seTxvYmplY3Q+LFxuICBCb2R5IGV4dGVuZHMgUmVhZG9ubHk8b2JqZWN0IHwgc3RyaW5nPiB8IHZvaWQgPSB1bmRlZmluZWRcbj4gPSBEZWxldGVTaGFwZTxTLCBQYXJhbXMsIEJvZHk+O1xuZXhwb3J0IHR5cGUgTXV0YXRlU2hhcGU8XG4gIFMgZXh0ZW5kcyBTY2hlbWEsXG4gIFBhcmFtcyBleHRlbmRzIFJlYWRvbmx5PG9iamVjdD4gPSBSZWFkb25seTxvYmplY3Q+LFxuICBCb2R5IGV4dGVuZHMgUmVhZG9ubHk8b2JqZWN0IHwgc3RyaW5nPiB8IHZvaWQgPSBSZWFkb25seTxvYmplY3Q+IHwgdW5kZWZpbmVkXG4+ID0gTXV0YXRlU2hhcGU8UywgUGFyYW1zLCBCb2R5PjtcbmV4cG9ydCB0eXBlIFJlYWRTaGFwZTxcbiAgUyBleHRlbmRzIFNjaGVtYSxcbiAgUGFyYW1zIGV4dGVuZHMgUmVhZG9ubHk8b2JqZWN0PiA9IFJlYWRvbmx5PG9iamVjdD5cbj4gPSBSZWFkU2hhcGU8UywgUGFyYW1zPjtcbmV4cG9ydCB0eXBlIEZldGNoU2hhcGU8XG4gIFMgZXh0ZW5kcyBTY2hlbWEsXG4gIFBhcmFtcyBleHRlbmRzIFJlYWRvbmx5PG9iamVjdD4gPSBSZWFkb25seTxvYmplY3Q+LFxuICBCb2R5IGV4dGVuZHMgUmVhZG9ubHk8b2JqZWN0IHwgc3RyaW5nPiB8IHZvaWQgPSBSZWFkb25seTxvYmplY3Q+IHwgdW5kZWZpbmVkXG4+ID0gRmV0Y2hTaGFwZTxTLCBQYXJhbXMsIEJvZHk+O1xuXG5leHBvcnQgdHlwZSBTdGF0ZTxUPiA9IFN0YXRlPFQ+O1xuZXhwb3J0IHR5cGUgU2NoZW1hID0gU2NoZW1hO1xuZXhwb3J0IHR5cGUgU2NoZW1hTGlzdDxUPiA9IFNjaGVtYUxpc3Q8VD47XG5leHBvcnQgdHlwZSBTY2hlbWFEZXRhaWw8VD4gPSBTY2hlbWFEZXRhaWw8VD47XG5leHBvcnQgdHlwZSBTY2hlbWFPZjxUPiA9IFNjaGVtYU9mPFQ+O1xuZXhwb3J0IHR5cGUgQWJzdHJhY3RJbnN0YW5jZVR5cGU8VD4gPSBBYnN0cmFjdEluc3RhbmNlVHlwZTxUPjtcbmV4cG9ydCB0eXBlIEZldGNoT3B0aW9ucyA9IEZldGNoT3B0aW9ucztcbmV4cG9ydCB0eXBlIE1ldGhvZCA9IE1ldGhvZDtcblxuZXhwb3J0IHR5cGUgTmV0d29ya0Vycm9yID0gTmV0d29ya0Vycm9yO1xuZXhwb3J0IHR5cGUgUmVxdWVzdCA9IFJlcXVlc3RUeXBlO1xuZXhwb3J0IHR5cGUgRmV0Y2hBY3Rpb248XG4gIFBheWxvYWQgZXh0ZW5kcyBvYmplY3QgfCBzdHJpbmcgfCBudW1iZXIgPSBvYmplY3QgfCBzdHJpbmcgfCBudW1iZXJcbj4gPSBGZXRjaEFjdGlvbjxQYXlsb2FkPjtcbmV4cG9ydCB0eXBlIFJlY2VpdmVBY3Rpb248XG4gIFBheWxvYWQgZXh0ZW5kcyBvYmplY3QgfCBzdHJpbmcgfCBudW1iZXIgPSBvYmplY3QgfCBzdHJpbmcgfCBudW1iZXJcbj4gPSBSZWNlaXZlQWN0aW9uPFBheWxvYWQ+O1xuZXhwb3J0IHR5cGUgUlBDQWN0aW9uPFxuICBQYXlsb2FkIGV4dGVuZHMgb2JqZWN0IHwgc3RyaW5nIHwgbnVtYmVyID0gb2JqZWN0IHwgc3RyaW5nIHwgbnVtYmVyXG4+ID0gUlBDQWN0aW9uPFBheWxvYWQ+O1xuZXhwb3J0IHR5cGUgUHVyZ2VBY3Rpb24gPSBQdXJnZUFjdGlvbjtcblxuZXhwb3J0IHR5cGUgRGlzcGF0Y2g8UiBleHRlbmRzIFJlYWN0LlJlZHVjZXI8YW55LCBhbnk+PiA9IERpc3BhdGNoPFI+O1xuZXhwb3J0IHR5cGUgTWlkZGxld2FyZUFQSTxcbiAgUiBleHRlbmRzIFJlYWN0LlJlZHVjZXI8YW55LCBhbnk+ID0gUmVhY3QuUmVkdWNlcjxhbnksIGFueT5cbj4gPSBNaWRkbGV3YXJlQVBJPFI+O1xuZXhwb3J0IHR5cGUgTWlkZGxld2FyZSA9IE1pZGRsZXdhcmU7XG5leHBvcnQgdHlwZSBNYW5hZ2VyID0gTWFuYWdlcjtcblxuZXhwb3J0IHtcbiAgUmVzb3VyY2UsXG4gIFNpbXBsZVJlc291cmNlLFxuICBTdXBlcmFnZW50UmVzb3VyY2UsXG4gIENhY2hlUHJvdmlkZXIsXG4gIEV4dGVybmFsQ2FjaGVQcm92aWRlcixcbiAgUHJvbWlzZWlmeU1pZGRsZXdhcmUsXG4gIHVzZUNhY2hlLFxuICB1c2VDYWNoZUxlZ2FjeSxcbiAgdXNlRmV0Y2hlcixcbiAgdXNlUmV0cmlldmUsXG4gIHVzZUludmFsaWRhdG9yLFxuICB1c2VSZXNldHRlcixcbiAgdXNlUmVzb3VyY2UsXG4gIHVzZVJlc291cmNlTGVnYWN5LFxuICB1c2VTdWJzY3JpcHRpb24sXG4gIHVzZU1ldGEsXG4gIHVzZUVycm9yLFxuICB1c2VTZWxlY3Rpb25VbnN0YWJsZSxcbiAgdXNlRGVub3JtYWxpemVkLFxuICBOZXR3b3JrTWFuYWdlcixcbiAgU3Vic2NyaXB0aW9uTWFuYWdlcixcbiAgUG9sbGluZ1N1YnNjcmlwdGlvbixcbiAgcmVkdWNlcixcbiAgTmV0d29ya0Vycm9yQm91bmRhcnksXG4gIHNjaGVtYXMsXG4gIF9fSU5URVJOQUxfXyxcbn07XG4iXX0=