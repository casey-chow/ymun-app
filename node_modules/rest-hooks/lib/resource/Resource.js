import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import request from 'superagent';
import SimpleResource from './SimpleResource';
var ResourceError = "JSON expected but not returned from API";
/**
 * Represents an entity to be retrieved from a server.
 * Typically 1:1 with a url endpoint.
 */

var Resource =
/*#__PURE__*/
function (_SimpleResource) {
  _inherits(Resource, _SimpleResource);

  function Resource() {
    _classCallCheck(this, Resource);

    return _possibleConstructorReturn(this, _getPrototypeOf(Resource).apply(this, arguments));
  }

  _createClass(Resource, null, [{
    key: "fetch",

    /** A function to mutate all requests for fetch */

    /** Perform network request and resolve with json body */
    value: function fetch(method, url, body) {
      var req = request[method](url).on('error', function () {});
      if (this.fetchPlugin) req = req.use(this.fetchPlugin);
      if (body) req = req.send(body);
      return req.then(function (res) {
        if (isInvalidResponse(res)) {
          throw new Error(ResourceError);
        }

        return res.body;
      });
    }
  }]);

  return Resource;
}(SimpleResource);

_defineProperty(Resource, "fetchPlugin", void 0);

export { Resource as default };
export var isInvalidResponse = function isInvalidResponse(res) {
  // Empty is only valid when no response is expect (204)
  var resEmptyIsExpected = res.text === '' && res.status === 204;
  var resBodyEmpty = Object.keys(res.body).length === 0;
  return !(res.type.includes('json') || resEmptyIsExpected) && resBodyEmpty;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXNvdXJjZS9SZXNvdXJjZS50cyJdLCJuYW1lcyI6WyJyZXF1ZXN0IiwiU2ltcGxlUmVzb3VyY2UiLCJSZXNvdXJjZUVycm9yIiwiUmVzb3VyY2UiLCJtZXRob2QiLCJ1cmwiLCJib2R5IiwicmVxIiwib24iLCJmZXRjaFBsdWdpbiIsInVzZSIsInNlbmQiLCJ0aGVuIiwicmVzIiwiaXNJbnZhbGlkUmVzcG9uc2UiLCJFcnJvciIsInJlc0VtcHR5SXNFeHBlY3RlZCIsInRleHQiLCJzdGF0dXMiLCJyZXNCb2R5RW1wdHkiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwidHlwZSIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPQSxPQUFQLE1BQW9CLFlBQXBCO0FBR0EsT0FBT0MsY0FBUCxNQUEyQixrQkFBM0I7QUFFQSxJQUFNQyxhQUFhLDRDQUFuQjtBQUVBOzs7OztJQUk4QkMsUTs7Ozs7Ozs7Ozs7Ozs7QUFDNUI7O0FBR0E7MEJBR0VDLE0sRUFDQUMsRyxFQUNBQyxJLEVBQ0E7QUFDQSxVQUFJQyxHQUFHLEdBQUdQLE9BQU8sQ0FBQ0ksTUFBRCxDQUFQLENBQWdCQyxHQUFoQixFQUFxQkcsRUFBckIsQ0FBd0IsT0FBeEIsRUFBaUMsWUFBTSxDQUFFLENBQXpDLENBQVY7QUFDQSxVQUFJLEtBQUtDLFdBQVQsRUFBc0JGLEdBQUcsR0FBR0EsR0FBRyxDQUFDRyxHQUFKLENBQVEsS0FBS0QsV0FBYixDQUFOO0FBQ3RCLFVBQUlILElBQUosRUFBVUMsR0FBRyxHQUFHQSxHQUFHLENBQUNJLElBQUosQ0FBU0wsSUFBVCxDQUFOO0FBQ1YsYUFBT0MsR0FBRyxDQUFDSyxJQUFKLENBQVMsVUFBQUMsR0FBRyxFQUFJO0FBQ3JCLFlBQUlDLGlCQUFpQixDQUFDRCxHQUFELENBQXJCLEVBQTRCO0FBQzFCLGdCQUFNLElBQUlFLEtBQUosQ0FBVWIsYUFBVixDQUFOO0FBQ0Q7O0FBQ0QsZUFBT1csR0FBRyxDQUFDUCxJQUFYO0FBQ0QsT0FMTSxDQUFQO0FBTUQ7Ozs7RUFwQjRDTCxjOztnQkFBakJFLFE7O1NBQUFBLFE7QUF1QjlCLE9BQU8sSUFBTVcsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUFDRCxHQUFELEVBQW9DO0FBQ25FO0FBQ0EsTUFBTUcsa0JBQWtCLEdBQUdILEdBQUcsQ0FBQ0ksSUFBSixLQUFhLEVBQWIsSUFBbUJKLEdBQUcsQ0FBQ0ssTUFBSixLQUFlLEdBQTdEO0FBQ0EsTUFBTUMsWUFBWSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWVIsR0FBRyxDQUFDUCxJQUFoQixFQUFzQmdCLE1BQXRCLEtBQWlDLENBQXREO0FBQ0EsU0FBTyxFQUFFVCxHQUFHLENBQUNVLElBQUosQ0FBU0MsUUFBVCxDQUFrQixNQUFsQixLQUE2QlIsa0JBQS9CLEtBQXNERyxZQUE3RDtBQUNELENBTE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVxdWVzdCBmcm9tICdzdXBlcmFnZW50JztcbmltcG9ydCB7IE1ldGhvZCB9IGZyb20gJ34vdHlwZXMnO1xuXG5pbXBvcnQgU2ltcGxlUmVzb3VyY2UgZnJvbSAnLi9TaW1wbGVSZXNvdXJjZSc7XG5cbmNvbnN0IFJlc291cmNlRXJyb3IgPSBgSlNPTiBleHBlY3RlZCBidXQgbm90IHJldHVybmVkIGZyb20gQVBJYDtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGVudGl0eSB0byBiZSByZXRyaWV2ZWQgZnJvbSBhIHNlcnZlci5cbiAqIFR5cGljYWxseSAxOjEgd2l0aCBhIHVybCBlbmRwb2ludC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgUmVzb3VyY2UgZXh0ZW5kcyBTaW1wbGVSZXNvdXJjZSB7XG4gIC8qKiBBIGZ1bmN0aW9uIHRvIG11dGF0ZSBhbGwgcmVxdWVzdHMgZm9yIGZldGNoICovXG4gIHN0YXRpYyBmZXRjaFBsdWdpbj86IHJlcXVlc3QuUGx1Z2luO1xuXG4gIC8qKiBQZXJmb3JtIG5ldHdvcmsgcmVxdWVzdCBhbmQgcmVzb2x2ZSB3aXRoIGpzb24gYm9keSAqL1xuICBzdGF0aWMgZmV0Y2g8VCBleHRlbmRzIHR5cGVvZiBSZXNvdXJjZT4oXG4gICAgdGhpczogVCxcbiAgICBtZXRob2Q6IE1ldGhvZCxcbiAgICB1cmw6IHN0cmluZyxcbiAgICBib2R5PzogUmVhZG9ubHk8b2JqZWN0IHwgc3RyaW5nPixcbiAgKSB7XG4gICAgbGV0IHJlcSA9IHJlcXVlc3RbbWV0aG9kXSh1cmwpLm9uKCdlcnJvcicsICgpID0+IHt9KTtcbiAgICBpZiAodGhpcy5mZXRjaFBsdWdpbikgcmVxID0gcmVxLnVzZSh0aGlzLmZldGNoUGx1Z2luKTtcbiAgICBpZiAoYm9keSkgcmVxID0gcmVxLnNlbmQoYm9keSk7XG4gICAgcmV0dXJuIHJlcS50aGVuKHJlcyA9PiB7XG4gICAgICBpZiAoaXNJbnZhbGlkUmVzcG9uc2UocmVzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoUmVzb3VyY2VFcnJvcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzLmJvZHk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGlzSW52YWxpZFJlc3BvbnNlID0gKHJlczogcmVxdWVzdC5SZXNwb25zZSk6IGJvb2xlYW4gPT4ge1xuICAvLyBFbXB0eSBpcyBvbmx5IHZhbGlkIHdoZW4gbm8gcmVzcG9uc2UgaXMgZXhwZWN0ICgyMDQpXG4gIGNvbnN0IHJlc0VtcHR5SXNFeHBlY3RlZCA9IHJlcy50ZXh0ID09PSAnJyAmJiByZXMuc3RhdHVzID09PSAyMDQ7XG4gIGNvbnN0IHJlc0JvZHlFbXB0eSA9IE9iamVjdC5rZXlzKHJlcy5ib2R5KS5sZW5ndGggPT09IDA7XG4gIHJldHVybiAhKHJlcy50eXBlLmluY2x1ZGVzKCdqc29uJykgfHwgcmVzRW1wdHlJc0V4cGVjdGVkKSAmJiByZXNCb2R5RW1wdHk7XG59O1xuIl19