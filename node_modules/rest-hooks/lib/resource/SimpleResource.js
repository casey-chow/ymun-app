import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _memoize from "lodash/memoize";
import { schemas } from './normal';
var DefinedMembersKey = Symbol('Defined Members');

/** Represents an entity to be retrieved from a server. Typically 1:1 with a url endpoint. */
var SimpleResource =
/*#__PURE__*/
function () {
  function SimpleResource() {
    _classCallCheck(this, SimpleResource);

    _defineProperty(this, "__url", void 0);
  }

  _createClass(SimpleResource, [{
    key: "url",

    /** URL to find this SimpleResource */
    get: function get() {
      if (this.__url !== undefined) return this.__url; // typescript thinks constructor is just a function

      var Static = this.constructor;
      return Static.url(this);
    }
  }], [{
    key: "fromJS",

    /** SimpleResource factory. Takes an object of properties to assign to SimpleResource. */
    value: function fromJS(props) {
      // we type guarded abstract case above, so ok to force typescript to allow constructor call
      var instance = new this(props);
      if (instance.pk === undefined) throw new Error('cannot construct on abstract types');
      Object.defineProperty(instance, DefinedMembersKey, {
        value: Object.keys(props),
        writable: false
      });
      Object.assign(instance, props); // to trick normalizr into thinking we're Immutable.js does it doesn't copy

      Object.defineProperty(instance, '__ownerID', {
        value: 1337,
        writable: false
      });
      return instance;
    }
    /** Creates new instance copying over defined values of arguments */

  }, {
    key: "merge",
    value: function merge(first, second) {
      var props = Object.assign({}, this.toObjectDefined(first), this.toObjectDefined(second));
      return this.fromJS(props);
    }
    /** Whether key is non-default */

  }, {
    key: "hasDefined",
    value: function hasDefined(instance, key) {
      return instance[DefinedMembersKey].includes(key);
    }
    /** Returns simple object with all the non-default members */

  }, {
    key: "toObjectDefined",
    value: function toObjectDefined(instance) {
      var defined = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = instance[DefinedMembersKey][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var member = _step.value;
          defined[member] = instance[member];
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return defined;
    }
    /** Returns array of all keys that have values defined in instance */

  }, {
    key: "keysDefined",
    value: function keysDefined(instance) {
      return instance[DefinedMembersKey];
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.name, "::").concat(this.urlRoot);
    }
    /** Returns the globally unique identifier for this SimpleResource */

  }, {
    key: "getKey",
    value: function getKey() {
      return this.urlRoot;
    }
    /** A unique identifier for this SimpleResource */

  }, {
    key: "pk",
    value: function pk(params) {
      return this.prototype.pk.call(params);
    }
  }, {
    key: "url",

    /** Get the url for a SimpleResource
     *
     * Default implementation conforms to common REST patterns
     */
    value: function url(urlParams) {
      if (urlParams) {
        if (Object.prototype.hasOwnProperty.call(urlParams, 'url') && urlParams.url && typeof urlParams.url === 'string') {
          return urlParams.url;
        }

        if (this.pk(urlParams) !== null) {
          if (this.urlRoot.endsWith('/')) {
            return "".concat(this.urlRoot).concat(this.pk(urlParams));
          }

          return "".concat(this.urlRoot, "/").concat(this.pk(urlParams));
        }
      }

      return this.urlRoot;
    }
    /** Get the url for many SimpleResources
     *
     * Default implementation conforms to common REST patterns
     */

  }, {
    key: "listUrl",
    value: function listUrl(searchParams) {
      if (searchParams && Object.keys(searchParams).length) {
        var params = new URLSearchParams(searchParams);
        params.sort();
        return "".concat(this.urlRoot, "?").concat(params.toString());
      }

      return this.urlRoot;
    }
    /** Perform network request and resolve with json body */

  }, {
    key: "fetch",
    value: function fetch(method, url, body) {
      // typescript currently doesn't allow abstract static methods
      throw new Error('not implemented');
    }
    /** Get the entity schema defining  */

  }, {
    key: "getEntitySchema",
    value: function getEntitySchema() {
      return _getEntitySchema(this);
    }
    /** Get the request options for this SimpleResource  */

  }, {
    key: "getFetchOptions",
    value: function getFetchOptions() {
      return;
    } // TODO: memoize these so they can be referentially compared

    /** Shape to get a single entity */

  }, {
    key: "detailShape",
    value: function detailShape() {
      var _this = this;

      var getFetchKey = function getFetchKey(params) {
        return 'GET ' + _this.url(params);
      };

      var schema = this.getEntitySchema();
      var options = this.getFetchOptions();
      return {
        type: 'read',
        schema: schema,
        options: options,
        getFetchKey: getFetchKey,
        fetch: function fetch(params) {
          return _this.fetch('get', _this.url(params));
        }
      };
    }
    /** Shape to get a list of entities */

  }, {
    key: "listShape",
    value: function listShape() {
      var _this2 = this;

      var getFetchKey = function getFetchKey(params) {
        return 'GET ' + _this2.listUrl(params);
      };

      var schema = [this.getEntitySchema()];
      var options = this.getFetchOptions();
      return {
        type: 'read',
        schema: schema,
        options: options,
        getFetchKey: getFetchKey,
        fetch: function fetch(params) {
          return _this2.fetch('get', _this2.listUrl(params));
        }
      };
    }
    /** Shape to create a new entity (post) */

  }, {
    key: "createShape",
    value: function createShape() {
      var _this3 = this;

      var options = this.getFetchOptions();
      return {
        type: 'mutate',
        schema: this.getEntitySchema(),
        options: options,
        getFetchKey: function getFetchKey(params) {
          return 'POST ' + _this3.listUrl(params);
        },
        fetch: function fetch(params, body) {
          return _this3.fetch('post', _this3.listUrl(params), body);
        }
      };
    }
    /** Shape to update an existing entity (put) */

  }, {
    key: "updateShape",
    value: function updateShape() {
      var _this4 = this;

      var options = this.getFetchOptions();
      return {
        type: 'mutate',
        schema: this.getEntitySchema(),
        options: options,
        getFetchKey: function getFetchKey(params) {
          return 'PUT ' + _this4.url(params);
        },
        fetch: function fetch(params, body) {
          return _this4.fetch('put', _this4.url(params), body);
        }
      };
    }
    /** Shape to update a subset of fields of an existing entity (patch) */

  }, {
    key: "partialUpdateShape",
    value: function partialUpdateShape() {
      var _this5 = this;

      var options = this.getFetchOptions();
      return {
        type: 'mutate',
        schema: this.getEntitySchema(),
        //TODO: change merge strategy in case we want to handle partial returns
        options: options,
        getFetchKey: function getFetchKey(params) {
          return 'PATCH ' + _this5.url(params);
        },
        fetch: function fetch(params, body) {
          return _this5.fetch('patch', _this5.url(params), body);
        }
      };
    }
    /** Shape to delete an entity (delete) */

  }, {
    key: "deleteShape",
    value: function deleteShape() {
      var _this6 = this;

      var options = this.getFetchOptions();
      return {
        type: 'delete',
        schema: this.getEntitySchema(),
        options: options,
        getFetchKey: function getFetchKey(params) {
          return 'DELETE ' + _this6.url(params);
        },
        fetch: function fetch(params) {
          return _this6.fetch('delete', _this6.url(params));
        }
      };
    }
  }]);

  return SimpleResource;
}(); // We're only allowing this to get set for descendants but
// by default we want Typescript to treat it as readonly.


_defineProperty(SimpleResource, "urlRoot", void 0);

export { SimpleResource as default };
Object.defineProperty(SimpleResource.prototype, 'url', {
  set: function set(url) {
    this.__url = url;
  }
});

var _getEntitySchema = _memoize(function (ResourceClass) {
  var e = new schemas.Entity(ResourceClass.getKey(), {}, {
    idAttribute: function idAttribute(value, parent, key) {
      var id = ResourceClass.pk(value) || key;

      if (process.env.NODE_ENV !== 'production' && id === null) {
        throw new Error("Missing usable resource key when normalizing response.\n\nThis is likely due to a malformed response.\nTry inspecting the network response or fetch() return value.\n");
      }

      return id.toString();
    },
    processStrategy: function processStrategy(value) {
      return ResourceClass.fromJS(value);
    },
    mergeStrategy: function mergeStrategy(a, b) {
      return a.constructor.merge(a, b);
    }
  }); // TODO: long term figure out a plan to actually denormalize

  e.denormalize = function denormalize(entity) {
    return [entity, true];
  };

  return e;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,