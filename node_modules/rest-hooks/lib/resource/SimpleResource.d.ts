import { AbstractInstanceType, Method, FetchOptions } from "../types";
import { ReadShape, MutateShape, DeleteShape } from './types';
import { schemas, SchemaDetail, SchemaList } from './normal';
declare type Filter<T, U> = T extends U ? T : never;
/** Represents an entity to be retrieved from a server. Typically 1:1 with a url endpoint. */
export default abstract class SimpleResource {
    /** Used as base of url construction */
    static readonly urlRoot: string;
    /** A unique identifier for this SimpleResource */
    abstract pk(): string | number | undefined;
    /** SimpleResource factory. Takes an object of properties to assign to SimpleResource. */
    static fromJS<T extends typeof SimpleResource>(this: T, props: Partial<AbstractInstanceType<T>>): Readonly<AbstractInstanceType<T>>;
    /** Creates new instance copying over defined values of arguments */
    static merge<T extends typeof SimpleResource>(this: T, first: AbstractInstanceType<T>, second: AbstractInstanceType<T>): Readonly<AbstractInstanceType<T>>;
    /** Whether key is non-default */
    static hasDefined<T extends typeof SimpleResource>(this: T, instance: AbstractInstanceType<T>, key: Filter<keyof AbstractInstanceType<T>, string>): boolean;
    /** Returns simple object with all the non-default members */
    static toObjectDefined<T extends typeof SimpleResource>(this: T, instance: AbstractInstanceType<T>): Partial<AbstractInstanceType<T>>;
    /** Returns array of all keys that have values defined in instance */
    static keysDefined<T extends typeof SimpleResource>(this: T, instance: AbstractInstanceType<T>): Filter<keyof AbstractInstanceType<T>, string>[];
    static toString<T extends typeof SimpleResource>(this: T): string;
    /** Returns the globally unique identifier for this SimpleResource */
    static getKey<T extends typeof SimpleResource>(this: T): string;
    /** A unique identifier for this SimpleResource */
    static pk<T extends typeof SimpleResource>(this: T, params: Partial<AbstractInstanceType<T>>): string | number | undefined;
    /** URL to find this SimpleResource */
    readonly url: string;
    private __url?;
    /** Get the url for a SimpleResource
     *
     * Default implementation conforms to common REST patterns
     */
    static url<T extends typeof SimpleResource>(this: T, urlParams?: Partial<AbstractInstanceType<T>>): string;
    /** Get the url for many SimpleResources
     *
     * Default implementation conforms to common REST patterns
     */
    static listUrl<T extends typeof SimpleResource>(this: T, searchParams?: Readonly<Record<string, string | number>>): string;
    /** Perform network request and resolve with json body */
    static fetch<T extends typeof SimpleResource>(this: T, method: Method, url: string, body?: Readonly<object | string>): Promise<any>;
    /** Get the entity schema defining  */
    static getEntitySchema<T extends typeof SimpleResource>(this: T): schemas.Entity<Readonly<AbstractInstanceType<T>>, string>;
    /** Get the request options for this SimpleResource  */
    static getFetchOptions<T extends typeof SimpleResource>(this: T): FetchOptions | undefined;
    /** Shape to get a single entity */
    static detailShape<T extends typeof SimpleResource>(this: T): ReadShape<SchemaDetail<Readonly<AbstractInstanceType<T>>>>;
    /** Shape to get a list of entities */
    static listShape<T extends typeof SimpleResource>(this: T): ReadShape<SchemaList<Readonly<AbstractInstanceType<T>>>>;
    /** Shape to create a new entity (post) */
    static createShape<T extends typeof SimpleResource>(this: T): MutateShape<SchemaDetail<Readonly<AbstractInstanceType<T>>>, Readonly<object>, Partial<AbstractInstanceType<T>>>;
    /** Shape to update an existing entity (put) */
    static updateShape<T extends typeof SimpleResource>(this: T): MutateShape<SchemaDetail<Readonly<AbstractInstanceType<T>>>, Readonly<object>, Partial<AbstractInstanceType<T>>>;
    /** Shape to update a subset of fields of an existing entity (patch) */
    static partialUpdateShape<T extends typeof SimpleResource>(this: T): MutateShape<SchemaDetail<Readonly<AbstractInstanceType<T>>>, Readonly<object>, Partial<AbstractInstanceType<T>>>;
    /** Shape to delete an entity (delete) */
    static deleteShape<T extends typeof SimpleResource>(this: T): DeleteShape<any, Readonly<object>>;
}
export {};
