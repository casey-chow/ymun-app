import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _memoize from "lodash/memoize";

/** Handles subscription actions -> fetch or receive actions
 *
 * Constructor takes a SubscriptionConstructable class to control how
 * subscriptions are handled. (e.g., polling, websockets)
 */
var SubscriptionManager =
/*#__PURE__*/
function () {
  function SubscriptionManager(Subscription) {
    _classCallCheck(this, SubscriptionManager);

    _defineProperty(this, "subscriptions", {});

    _defineProperty(this, "Subscription", void 0);

    this.Subscription = Subscription;
    this.getMiddleware = _memoize(this.getMiddleware);
  }
  /** Ensures all subscriptions are cleaned up. */


  _createClass(SubscriptionManager, [{
    key: "cleanup",
    value: function cleanup() {
      for (var _url in this.subscriptions) {
        this.subscriptions[_url].cleanup();
      }
    }
    /** Called when middleware intercepts 'rest-hooks/subscribe' action.
     *
     */

  }, {
    key: "handleSubscribe",
    value: function handleSubscribe(action, dispatch) {
      var url = action.meta.url;

      if (url in this.subscriptions) {
        this.subscriptions[url].add(action.meta.frequency);
      } else {
        this.subscriptions[url] = new this.Subscription({
          schema: action.meta.schema,
          fetch: action.meta.fetch,
          frequency: action.meta.frequency,
          url: url
        }, dispatch);
      }
    }
    /** Called when middleware intercepts 'rest-hooks/unsubscribe' action.
     *
     */

  }, {
    key: "handleUnsubscribe",
    value: function handleUnsubscribe(action, dispatch) {
      var url = action.meta.url;

      if (url in this.subscriptions) {
        var empty = this.subscriptions[url].remove(action.meta.frequency);

        if (empty) {
          delete this.subscriptions[url];
        }
      } else if (process.env.NODE_ENV !== 'production') {
        console.error("Mismatched unsubscribe: ".concat(url, " is not subscribed"));
      }
    }
    /** Attaches Manager to store
     *
     * Intercepts 'rest-hooks/subscribe'/'rest-hooks/unsubscribe' to register resources that
     * need to be kept up to date.
     *
     * Will possibly dispatch 'rest-hooks/fetch' or 'rest-hooks/receive' to keep resources fresh
     *
     */

  }, {
    key: "getMiddleware",
    value: function getMiddleware() {
      var _this = this;

      return function (_ref) {
        var dispatch = _ref.dispatch;
        return function (next) {
          return function (action) {
            switch (action.type) {
              case 'rest-hooks/subscribe':
                _this.handleSubscribe(action, dispatch);

                return Promise.resolve();

              case 'rest-hooks/unsubscribe':
                _this.handleUnsubscribe(action, dispatch);

                return Promise.resolve();

              default:
                return next(action);
            }
          };
        };
      };
    }
  }]);

  return SubscriptionManager;
}();

export { SubscriptionManager as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGF0ZS9TdWJzY3JpcHRpb25NYW5hZ2VyLnRzIl0sIm5hbWVzIjpbIlN1YnNjcmlwdGlvbk1hbmFnZXIiLCJTdWJzY3JpcHRpb24iLCJnZXRNaWRkbGV3YXJlIiwidXJsIiwic3Vic2NyaXB0aW9ucyIsImNsZWFudXAiLCJhY3Rpb24iLCJkaXNwYXRjaCIsIm1ldGEiLCJhZGQiLCJmcmVxdWVuY3kiLCJzY2hlbWEiLCJmZXRjaCIsImVtcHR5IiwicmVtb3ZlIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiY29uc29sZSIsImVycm9yIiwibmV4dCIsInR5cGUiLCJoYW5kbGVTdWJzY3JpYmUiLCJQcm9taXNlIiwicmVzb2x2ZSIsImhhbmRsZVVuc3Vic2NyaWJlIl0sIm1hcHBpbmdzIjoiOzs7OztBQWdDQTs7Ozs7SUFLcUJBLG1COzs7QUFPbkIsK0JBQVlDLFlBQVosRUFBNkI7QUFBQTs7QUFBQSwyQ0FIekIsRUFHeUI7O0FBQUE7O0FBQzNCLFNBQUtBLFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0EsU0FBS0MsYUFBTCxHQUFxQixTQUFRLEtBQUtBLGFBQWIsQ0FBckI7QUFDRDtBQUVEOzs7Ozs4QkFDVTtBQUNSLFdBQUssSUFBTUMsSUFBWCxJQUFrQixLQUFLQyxhQUF2QixFQUFzQztBQUNwQyxhQUFLQSxhQUFMLENBQW1CRCxJQUFuQixFQUF3QkUsT0FBeEI7QUFDRDtBQUNGO0FBRUQ7Ozs7OztvQ0FHMEJDLE0sRUFBeUJDLFEsRUFBeUI7QUFDMUUsVUFBTUosR0FBRyxHQUFHRyxNQUFNLENBQUNFLElBQVAsQ0FBWUwsR0FBeEI7O0FBQ0EsVUFBSUEsR0FBRyxJQUFJLEtBQUtDLGFBQWhCLEVBQStCO0FBQzdCLGFBQUtBLGFBQUwsQ0FBbUJELEdBQW5CLEVBQXdCTSxHQUF4QixDQUE0QkgsTUFBTSxDQUFDRSxJQUFQLENBQVlFLFNBQXhDO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsYUFBS04sYUFBTCxDQUFtQkQsR0FBbkIsSUFBMEIsSUFBSSxLQUFLRixZQUFULENBQ3hCO0FBQ0VVLFVBQUFBLE1BQU0sRUFBRUwsTUFBTSxDQUFDRSxJQUFQLENBQVlHLE1BRHRCO0FBRUVDLFVBQUFBLEtBQUssRUFBRU4sTUFBTSxDQUFDRSxJQUFQLENBQVlJLEtBRnJCO0FBR0VGLFVBQUFBLFNBQVMsRUFBRUosTUFBTSxDQUFDRSxJQUFQLENBQVlFLFNBSHpCO0FBSUVQLFVBQUFBLEdBQUcsRUFBSEE7QUFKRixTQUR3QixFQU94QkksUUFQd0IsQ0FBMUI7QUFTRDtBQUNGO0FBRUQ7Ozs7OztzQ0FJRUQsTSxFQUNBQyxRLEVBQ0E7QUFDQSxVQUFNSixHQUFHLEdBQUdHLE1BQU0sQ0FBQ0UsSUFBUCxDQUFZTCxHQUF4Qjs7QUFDQSxVQUFJQSxHQUFHLElBQUksS0FBS0MsYUFBaEIsRUFBK0I7QUFDN0IsWUFBTVMsS0FBSyxHQUFHLEtBQUtULGFBQUwsQ0FBbUJELEdBQW5CLEVBQXdCVyxNQUF4QixDQUErQlIsTUFBTSxDQUFDRSxJQUFQLENBQVlFLFNBQTNDLENBQWQ7O0FBQ0EsWUFBSUcsS0FBSixFQUFXO0FBQ1QsaUJBQU8sS0FBS1QsYUFBTCxDQUFtQkQsR0FBbkIsQ0FBUDtBQUNEO0FBQ0YsT0FMRCxNQUtPLElBQUlZLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQTdCLEVBQTJDO0FBQ2hEQyxRQUFBQSxPQUFPLENBQUNDLEtBQVIsbUNBQXlDaEIsR0FBekM7QUFDRDtBQUNGO0FBRUQ7Ozs7Ozs7Ozs7O29DQVF5RDtBQUFBOztBQUN2RCxhQUFPLGdCQUVpQjtBQUFBLFlBRHRCSSxRQUNzQixRQUR0QkEsUUFDc0I7QUFDdEIsZUFBTyxVQUFDYSxJQUFEO0FBQUEsaUJBQXVCLFVBQUNkLE1BQUQsRUFBcUI7QUFDakQsb0JBQVFBLE1BQU0sQ0FBQ2UsSUFBZjtBQUNFLG1CQUFLLHNCQUFMO0FBQ0UsZ0JBQUEsS0FBSSxDQUFDQyxlQUFMLENBQXFCaEIsTUFBckIsRUFBNkJDLFFBQTdCOztBQUNBLHVCQUFPZ0IsT0FBTyxDQUFDQyxPQUFSLEVBQVA7O0FBQ0YsbUJBQUssd0JBQUw7QUFDRSxnQkFBQSxLQUFJLENBQUNDLGlCQUFMLENBQXVCbkIsTUFBdkIsRUFBK0JDLFFBQS9COztBQUNBLHVCQUFPZ0IsT0FBTyxDQUFDQyxPQUFSLEVBQVA7O0FBQ0Y7QUFDRSx1QkFBT0osSUFBSSxDQUFDZCxNQUFELENBQVg7QUFSSjtBQVVELFdBWE07QUFBQSxTQUFQO0FBWUQsT0FmRDtBQWdCRDs7Ozs7O1NBbEZrQk4sbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtZW1vaXplIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7XG4gIE1pZGRsZXdhcmVBUEksXG4gIFN1YnNjcmliZUFjdGlvbixcbiAgVW5zdWJzY3JpYmVBY3Rpb24sXG4gIE1hbmFnZXIsXG4gIERpc3BhdGNoLFxufSBmcm9tICd+L3R5cGVzJztcbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gJ34vcmVzb3VyY2UnO1xuXG50eXBlIEFjdGlvbnMgPSBVbnN1YnNjcmliZUFjdGlvbiB8IFN1YnNjcmliZUFjdGlvbjtcblxuLyoqIFByb3BlcnRpZXMgc2VudCB0byBTdWJzY3JpcHRpb24gY29uc3RydWN0b3IgKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3Vic2NyaXB0aW9uSW5pdCB7XG4gIHNjaGVtYTogU2NoZW1hO1xuICBmZXRjaDogKCkgPT4gUHJvbWlzZTxhbnk+O1xuICB1cmw6IHN0cmluZztcbiAgZnJlcXVlbmN5PzogbnVtYmVyO1xufVxuXG4vKiogSW50ZXJmYWNlIGhhbmRsaW5nIGEgc2luZ2xlIHJlc291cmNlIHN1YnNjcmlwdGlvbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdWJzY3JpcHRpb24ge1xuICBhZGQoZnJlcXVlbmN5PzogbnVtYmVyKTogdm9pZDtcbiAgcmVtb3ZlKGZyZXF1ZW5jeT86IG51bWJlcik6IGJvb2xlYW47XG4gIGNsZWFudXAoKTogdm9pZDtcbn1cblxuLyoqIFRoZSBzdGF0aWMgY2xhc3MgdGhhdCBjb25zdHJ1Y3RzIFN1YnNjcmlwdGlvbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdWJzY3JpcHRpb25Db25zdHJ1Y3RhYmxlIHtcbiAgbmV3IChpbml0OiBTdWJzY3JpcHRpb25Jbml0LCBkaXNwYXRjaDogRGlzcGF0Y2g8YW55Pik6IFN1YnNjcmlwdGlvbjtcbn1cblxuLyoqIEhhbmRsZXMgc3Vic2NyaXB0aW9uIGFjdGlvbnMgLT4gZmV0Y2ggb3IgcmVjZWl2ZSBhY3Rpb25zXG4gKlxuICogQ29uc3RydWN0b3IgdGFrZXMgYSBTdWJzY3JpcHRpb25Db25zdHJ1Y3RhYmxlIGNsYXNzIHRvIGNvbnRyb2wgaG93XG4gKiBzdWJzY3JpcHRpb25zIGFyZSBoYW5kbGVkLiAoZS5nLiwgcG9sbGluZywgd2Vic29ja2V0cylcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3Vic2NyaXB0aW9uTWFuYWdlcjxTIGV4dGVuZHMgU3Vic2NyaXB0aW9uQ29uc3RydWN0YWJsZT5cbiAgaW1wbGVtZW50cyBNYW5hZ2VyIHtcbiAgcHJvdGVjdGVkIHN1YnNjcmlwdGlvbnM6IHtcbiAgICBbdXJsOiBzdHJpbmddOiBJbnN0YW5jZVR5cGU8Uz47XG4gIH0gPSB7fTtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IFN1YnNjcmlwdGlvbjogUztcblxuICBjb25zdHJ1Y3RvcihTdWJzY3JpcHRpb246IFMpIHtcbiAgICB0aGlzLlN1YnNjcmlwdGlvbiA9IFN1YnNjcmlwdGlvbjtcbiAgICB0aGlzLmdldE1pZGRsZXdhcmUgPSBtZW1vaXplKHRoaXMuZ2V0TWlkZGxld2FyZSk7XG4gIH1cblxuICAvKiogRW5zdXJlcyBhbGwgc3Vic2NyaXB0aW9ucyBhcmUgY2xlYW5lZCB1cC4gKi9cbiAgY2xlYW51cCgpIHtcbiAgICBmb3IgKGNvbnN0IHVybCBpbiB0aGlzLnN1YnNjcmlwdGlvbnMpIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uc1t1cmxdLmNsZWFudXAoKTtcbiAgICB9XG4gIH1cblxuICAvKiogQ2FsbGVkIHdoZW4gbWlkZGxld2FyZSBpbnRlcmNlcHRzICdyZXN0LWhvb2tzL3N1YnNjcmliZScgYWN0aW9uLlxuICAgKlxuICAgKi9cbiAgcHJvdGVjdGVkIGhhbmRsZVN1YnNjcmliZShhY3Rpb246IFN1YnNjcmliZUFjdGlvbiwgZGlzcGF0Y2g6IERpc3BhdGNoPGFueT4pIHtcbiAgICBjb25zdCB1cmwgPSBhY3Rpb24ubWV0YS51cmw7XG4gICAgaWYgKHVybCBpbiB0aGlzLnN1YnNjcmlwdGlvbnMpIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uc1t1cmxdLmFkZChhY3Rpb24ubWV0YS5mcmVxdWVuY3kpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnNbdXJsXSA9IG5ldyB0aGlzLlN1YnNjcmlwdGlvbihcbiAgICAgICAge1xuICAgICAgICAgIHNjaGVtYTogYWN0aW9uLm1ldGEuc2NoZW1hLFxuICAgICAgICAgIGZldGNoOiBhY3Rpb24ubWV0YS5mZXRjaCxcbiAgICAgICAgICBmcmVxdWVuY3k6IGFjdGlvbi5tZXRhLmZyZXF1ZW5jeSxcbiAgICAgICAgICB1cmwsXG4gICAgICAgIH0sXG4gICAgICAgIGRpc3BhdGNoLFxuICAgICAgKSBhcyBJbnN0YW5jZVR5cGU8Uz47XG4gICAgfVxuICB9XG5cbiAgLyoqIENhbGxlZCB3aGVuIG1pZGRsZXdhcmUgaW50ZXJjZXB0cyAncmVzdC1ob29rcy91bnN1YnNjcmliZScgYWN0aW9uLlxuICAgKlxuICAgKi9cbiAgcHJvdGVjdGVkIGhhbmRsZVVuc3Vic2NyaWJlKFxuICAgIGFjdGlvbjogVW5zdWJzY3JpYmVBY3Rpb24sXG4gICAgZGlzcGF0Y2g6IERpc3BhdGNoPGFueT4sXG4gICkge1xuICAgIGNvbnN0IHVybCA9IGFjdGlvbi5tZXRhLnVybDtcbiAgICBpZiAodXJsIGluIHRoaXMuc3Vic2NyaXB0aW9ucykge1xuICAgICAgY29uc3QgZW1wdHkgPSB0aGlzLnN1YnNjcmlwdGlvbnNbdXJsXS5yZW1vdmUoYWN0aW9uLm1ldGEuZnJlcXVlbmN5KTtcbiAgICAgIGlmIChlbXB0eSkge1xuICAgICAgICBkZWxldGUgdGhpcy5zdWJzY3JpcHRpb25zW3VybF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBNaXNtYXRjaGVkIHVuc3Vic2NyaWJlOiAke3VybH0gaXMgbm90IHN1YnNjcmliZWRgKTtcbiAgICB9XG4gIH1cblxuICAvKiogQXR0YWNoZXMgTWFuYWdlciB0byBzdG9yZVxuICAgKlxuICAgKiBJbnRlcmNlcHRzICdyZXN0LWhvb2tzL3N1YnNjcmliZScvJ3Jlc3QtaG9va3MvdW5zdWJzY3JpYmUnIHRvIHJlZ2lzdGVyIHJlc291cmNlcyB0aGF0XG4gICAqIG5lZWQgdG8gYmUga2VwdCB1cCB0byBkYXRlLlxuICAgKlxuICAgKiBXaWxsIHBvc3NpYmx5IGRpc3BhdGNoICdyZXN0LWhvb2tzL2ZldGNoJyBvciAncmVzdC1ob29rcy9yZWNlaXZlJyB0byBrZWVwIHJlc291cmNlcyBmcmVzaFxuICAgKlxuICAgKi9cbiAgZ2V0TWlkZGxld2FyZTxUIGV4dGVuZHMgU3Vic2NyaXB0aW9uTWFuYWdlcjxTPj4odGhpczogVCkge1xuICAgIHJldHVybiA8UiBleHRlbmRzIFJlYWN0LlJlZHVjZXI8YW55LCBBPiwgQSBleHRlbmRzIEFjdGlvbnM+KHtcbiAgICAgIGRpc3BhdGNoLFxuICAgIH06IE1pZGRsZXdhcmVBUEk8Uj4pID0+IHtcbiAgICAgIHJldHVybiAobmV4dDogRGlzcGF0Y2g8Uj4pID0+IChhY3Rpb246IEFjdGlvbnMpID0+IHtcbiAgICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICAgIGNhc2UgJ3Jlc3QtaG9va3Mvc3Vic2NyaWJlJzpcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU3Vic2NyaWJlKGFjdGlvbiwgZGlzcGF0Y2gpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgIGNhc2UgJ3Jlc3QtaG9va3MvdW5zdWJzY3JpYmUnOlxuICAgICAgICAgICAgdGhpcy5oYW5kbGVVbnN1YnNjcmliZShhY3Rpb24sIGRpc3BhdGNoKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICB9XG59XG4iXX0=