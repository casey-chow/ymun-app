import _typeof from "@babel/runtime/helpers/esm/typeof";
import { schemas } from "../../resource";
import { isEntity } from "../../resource/types";
/**
 * Build the result parameter to denormalize from schema alone.
 * Tries to compute the entity ids from params.
 */

export default function buildInferredResults(schema, params) {
  if (isEntity(schema)) {
    if (!params) return undefined;
    var id = schema.getId(params, undefined, ''); // Was unable to infer the entity's primary key from params

    if (id === undefined || id === '') return undefined;
    return id;
  }

  if (schema instanceof schemas.Union) {
    var discriminatedSchema = schema.inferSchema(params, undefined, ''); // Was unable to infer the entity's schema from params

    if (discriminatedSchema === undefined) return undefined;
    return {
      id: buildInferredResults(discriminatedSchema, params),
      schema: schema.getSchemaAttribute(params, parent, '')
    };
  }

  if (schema instanceof schemas.Array || Array.isArray(schema)) {
    return undefined;
  }

  if (schema instanceof schemas.Values) {
    return {};
  }

  var o = schema instanceof schemas.Object ? schema.schema : schema;
  var resultObject = {};

  for (var k in o) {
    if (!isSchema(o[k])) {
      resultObject[k] = o[k];
    } else {
      resultObject[k] = buildInferredResults(o[k], params);
    }
  }

  return resultObject;
}

function isSchema(candidate) {
  // TODO: improve detection
  return _typeof(candidate) === 'object' && candidate !== null && candidate !== undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdGF0ZS9zZWxlY3RvcnMvYnVpbGRJbmZlcnJlZFJlc3VsdHMudHMiXSwibmFtZXMiOlsic2NoZW1hcyIsImlzRW50aXR5IiwiYnVpbGRJbmZlcnJlZFJlc3VsdHMiLCJzY2hlbWEiLCJwYXJhbXMiLCJ1bmRlZmluZWQiLCJpZCIsImdldElkIiwiVW5pb24iLCJkaXNjcmltaW5hdGVkU2NoZW1hIiwiaW5mZXJTY2hlbWEiLCJnZXRTY2hlbWFBdHRyaWJ1dGUiLCJwYXJlbnQiLCJBcnJheSIsImlzQXJyYXkiLCJWYWx1ZXMiLCJvIiwiT2JqZWN0IiwicmVzdWx0T2JqZWN0IiwiayIsImlzU2NoZW1hIiwiY2FuZGlkYXRlIl0sIm1hcHBpbmdzIjoiO0FBQUEsU0FBaUJBLE9BQWpCLFFBQW1ELGdCQUFuRDtBQUNBLFNBQVNDLFFBQVQsUUFBeUIsc0JBQXpCO0FBRUE7Ozs7O0FBSUEsZUFBZSxTQUFTQyxvQkFBVCxDQUdiQyxNQUhhLEVBR0ZDLE1BSEUsRUFHMkM7QUFDeEQsTUFBSUgsUUFBUSxDQUFDRSxNQUFELENBQVosRUFBc0I7QUFDcEIsUUFBSSxDQUFDQyxNQUFMLEVBQWEsT0FBT0MsU0FBUDtBQUNiLFFBQU1DLEVBQUUsR0FBR0gsTUFBTSxDQUFDSSxLQUFQLENBQWFILE1BQWIsRUFBcUJDLFNBQXJCLEVBQWdDLEVBQWhDLENBQVgsQ0FGb0IsQ0FHcEI7O0FBQ0EsUUFBSUMsRUFBRSxLQUFLRCxTQUFQLElBQW9CQyxFQUFFLEtBQUssRUFBL0IsRUFBbUMsT0FBT0QsU0FBUDtBQUNuQyxXQUFPQyxFQUFQO0FBQ0Q7O0FBQ0QsTUFBSUgsTUFBTSxZQUFZSCxPQUFPLENBQUNRLEtBQTlCLEVBQXFDO0FBQ25DLFFBQU1DLG1CQUFtQixHQUFHTixNQUFNLENBQUNPLFdBQVAsQ0FBbUJOLE1BQW5CLEVBQTJCQyxTQUEzQixFQUFzQyxFQUF0QyxDQUE1QixDQURtQyxDQUVuQzs7QUFDQSxRQUFJSSxtQkFBbUIsS0FBS0osU0FBNUIsRUFBdUMsT0FBT0EsU0FBUDtBQUN2QyxXQUFPO0FBQ0xDLE1BQUFBLEVBQUUsRUFBRUosb0JBQW9CLENBQUNPLG1CQUFELEVBQXNCTCxNQUF0QixDQURuQjtBQUVMRCxNQUFBQSxNQUFNLEVBQUVBLE1BQU0sQ0FBQ1Esa0JBQVAsQ0FBMEJQLE1BQTFCLEVBQWtDUSxNQUFsQyxFQUEwQyxFQUExQztBQUZILEtBQVA7QUFJRDs7QUFDRCxNQUFJVCxNQUFNLFlBQVlILE9BQU8sQ0FBQ2EsS0FBMUIsSUFBbUNBLEtBQUssQ0FBQ0MsT0FBTixDQUFjWCxNQUFkLENBQXZDLEVBQThEO0FBQzVELFdBQU9FLFNBQVA7QUFDRDs7QUFDRCxNQUFJRixNQUFNLFlBQVlILE9BQU8sQ0FBQ2UsTUFBOUIsRUFBc0M7QUFDcEMsV0FBTyxFQUFQO0FBQ0Q7O0FBQ0QsTUFBTUMsQ0FBQyxHQUFHYixNQUFNLFlBQVlILE9BQU8sQ0FBQ2lCLE1BQTFCLEdBQW9DZCxNQUFELENBQWdCQSxNQUFuRCxHQUE0REEsTUFBdEU7QUFDQSxNQUFNZSxZQUFZLEdBQUcsRUFBckI7O0FBQ0EsT0FBSyxJQUFNQyxDQUFYLElBQWdCSCxDQUFoQixFQUFtQjtBQUNqQixRQUFJLENBQUNJLFFBQVEsQ0FBQ0osQ0FBQyxDQUFDRyxDQUFELENBQUYsQ0FBYixFQUFxQjtBQUNuQkQsTUFBQUEsWUFBWSxDQUFDQyxDQUFELENBQVosR0FBa0JILENBQUMsQ0FBQ0csQ0FBRCxDQUFuQjtBQUNELEtBRkQsTUFFTztBQUNMRCxNQUFBQSxZQUFZLENBQUNDLENBQUQsQ0FBWixHQUFrQmpCLG9CQUFvQixDQUFDYyxDQUFDLENBQUNHLENBQUQsQ0FBRixFQUFPZixNQUFQLENBQXRDO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPYyxZQUFQO0FBQ0Q7O0FBRUQsU0FBU0UsUUFBVCxDQUFrQkMsU0FBbEIsRUFBa0M7QUFDaEM7QUFDQSxTQUNFLFFBQU9BLFNBQVAsTUFBcUIsUUFBckIsSUFDQUEsU0FBUyxLQUFLLElBRGQsSUFFQUEsU0FBUyxLQUFLaEIsU0FIaEI7QUFLRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjaGVtYSwgc2NoZW1hcywgTm9ybWFsaXplTnVsbGFibGUgfSBmcm9tICd+L3Jlc291cmNlJztcbmltcG9ydCB7IGlzRW50aXR5IH0gZnJvbSAnfi9yZXNvdXJjZS90eXBlcyc7XG5cbi8qKlxuICogQnVpbGQgdGhlIHJlc3VsdCBwYXJhbWV0ZXIgdG8gZGVub3JtYWxpemUgZnJvbSBzY2hlbWEgYWxvbmUuXG4gKiBUcmllcyB0byBjb21wdXRlIHRoZSBlbnRpdHkgaWRzIGZyb20gcGFyYW1zLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEluZmVycmVkUmVzdWx0czxcbiAgUGFyYW1zIGV4dGVuZHMgUmVhZG9ubHk8b2JqZWN0PixcbiAgUyBleHRlbmRzIFNjaGVtYVxuPihzY2hlbWE6IFMsIHBhcmFtczogUGFyYW1zIHwgbnVsbCk6IE5vcm1hbGl6ZU51bGxhYmxlPFM+IHtcbiAgaWYgKGlzRW50aXR5KHNjaGVtYSkpIHtcbiAgICBpZiAoIXBhcmFtcykgcmV0dXJuIHVuZGVmaW5lZCBhcyBhbnk7XG4gICAgY29uc3QgaWQgPSBzY2hlbWEuZ2V0SWQocGFyYW1zLCB1bmRlZmluZWQsICcnKTtcbiAgICAvLyBXYXMgdW5hYmxlIHRvIGluZmVyIHRoZSBlbnRpdHkncyBwcmltYXJ5IGtleSBmcm9tIHBhcmFtc1xuICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkIHx8IGlkID09PSAnJykgcmV0dXJuIHVuZGVmaW5lZCBhcyBhbnk7XG4gICAgcmV0dXJuIGlkIGFzIGFueTtcbiAgfVxuICBpZiAoc2NoZW1hIGluc3RhbmNlb2Ygc2NoZW1hcy5Vbmlvbikge1xuICAgIGNvbnN0IGRpc2NyaW1pbmF0ZWRTY2hlbWEgPSBzY2hlbWEuaW5mZXJTY2hlbWEocGFyYW1zLCB1bmRlZmluZWQsICcnKTtcbiAgICAvLyBXYXMgdW5hYmxlIHRvIGluZmVyIHRoZSBlbnRpdHkncyBzY2hlbWEgZnJvbSBwYXJhbXNcbiAgICBpZiAoZGlzY3JpbWluYXRlZFNjaGVtYSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkIGFzIGFueTtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGJ1aWxkSW5mZXJyZWRSZXN1bHRzKGRpc2NyaW1pbmF0ZWRTY2hlbWEsIHBhcmFtcyksXG4gICAgICBzY2hlbWE6IHNjaGVtYS5nZXRTY2hlbWFBdHRyaWJ1dGUocGFyYW1zLCBwYXJlbnQsICcnKSxcbiAgICB9IGFzIGFueTtcbiAgfVxuICBpZiAoc2NoZW1hIGluc3RhbmNlb2Ygc2NoZW1hcy5BcnJheSB8fCBBcnJheS5pc0FycmF5KHNjaGVtYSkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkIGFzIGFueTtcbiAgfVxuICBpZiAoc2NoZW1hIGluc3RhbmNlb2Ygc2NoZW1hcy5WYWx1ZXMpIHtcbiAgICByZXR1cm4ge30gYXMgYW55O1xuICB9XG4gIGNvbnN0IG8gPSBzY2hlbWEgaW5zdGFuY2VvZiBzY2hlbWFzLk9iamVjdCA/IChzY2hlbWEgYXMgYW55KS5zY2hlbWEgOiBzY2hlbWE7XG4gIGNvbnN0IHJlc3VsdE9iamVjdCA9IHt9IGFzIGFueTtcbiAgZm9yIChjb25zdCBrIGluIG8pIHtcbiAgICBpZiAoIWlzU2NoZW1hKG9ba10pKSB7XG4gICAgICByZXN1bHRPYmplY3Rba10gPSBvW2tdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRPYmplY3Rba10gPSBidWlsZEluZmVycmVkUmVzdWx0cyhvW2tdLCBwYXJhbXMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0T2JqZWN0O1xufVxuXG5mdW5jdGlvbiBpc1NjaGVtYShjYW5kaWRhdGU6IGFueSkge1xuICAvLyBUT0RPOiBpbXByb3ZlIGRldGVjdGlvblxuICByZXR1cm4gKFxuICAgIHR5cGVvZiBjYW5kaWRhdGUgPT09ICdvYmplY3QnICYmXG4gICAgY2FuZGlkYXRlICE9PSBudWxsICYmXG4gICAgY2FuZGlkYXRlICE9PSB1bmRlZmluZWRcbiAgKTtcbn1cbiJdfQ==