import { State } from "../../types";
import { SchemaOf, ReadShape } from "../../resource/types";
import { Schema } from "../../resource/normal";
export default function useSchemaSelect<Params extends Readonly<object>, S extends Schema>({ schema, getFetchKey }: Pick<ReadShape<S, Params>, 'schema' | 'getFetchKey'>, params: Params | null, state: State<any>): typeof params extends null ? null : (SchemaOf<typeof schema> | null);
export declare function resultFinderFromSchema<S extends Schema>(schema: S): null | ((results: any) => SchemaOf<S>);
