import _typeof from "@babel/runtime/helpers/esm/typeof";
import { schemas } from "../../resource";
import { isEntity } from "../../resource/types";
/**
 * Build the result parameter to denormalize from schema alone.
 * Tries to compute the entity ids from params.
 */

export default function buildInferredResults(schema, params) {
  if (isEntity(schema)) {
    var id = schema.getId(params, undefined, ''); // Was unable to infer the entity's primary key from params

    if (id === undefined || id === '') return null;
    return id;
  }

  if (schema instanceof schemas.Array || Array.isArray(schema) || schema instanceof schemas.Values) {
    // array schemas should not be inferred because they're likely to be missing many members
    // Values cannot be inferred because they have aribtrary keys
    return null;
  }

  if (schema instanceof schemas.Union) {
    var discriminatedSchema = schema.inferSchema(params, undefined, ''); // Was unable to infer the entity's schema from params

    if (discriminatedSchema === undefined) return null;
    return {
      id: buildInferredResults(discriminatedSchema, params),
      schema: schema.getSchemaAttribute(params, parent, '')
    };
  }

  var o = schema instanceof schemas.Object ? schema.schema : schema;
  var resultObject = {};

  for (var k in o) {
    if (!isSchema(o[k])) {
      resultObject[k] = o[k];
    } else {
      var results = buildInferredResults(o[k], params);
      if (!results) return null;
      resultObject[k] = results;
    }
  }

  return resultObject;
}

function isSchema(candidate) {
  // TODO: improve detection
  return _typeof(candidate) === 'object' && candidate !== null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdGF0ZS9zZWxlY3RvcnMvYnVpbGRJbmZlcnJlZFJlc3VsdHNMZWdhY3kudHMiXSwibmFtZXMiOlsic2NoZW1hcyIsImlzRW50aXR5IiwiYnVpbGRJbmZlcnJlZFJlc3VsdHMiLCJzY2hlbWEiLCJwYXJhbXMiLCJpZCIsImdldElkIiwidW5kZWZpbmVkIiwiQXJyYXkiLCJpc0FycmF5IiwiVmFsdWVzIiwiVW5pb24iLCJkaXNjcmltaW5hdGVkU2NoZW1hIiwiaW5mZXJTY2hlbWEiLCJnZXRTY2hlbWFBdHRyaWJ1dGUiLCJwYXJlbnQiLCJvIiwiT2JqZWN0IiwicmVzdWx0T2JqZWN0IiwiayIsImlzU2NoZW1hIiwicmVzdWx0cyIsImNhbmRpZGF0ZSJdLCJtYXBwaW5ncyI6IjtBQUFBLFNBQTRCQSxPQUE1QixRQUEyQyxnQkFBM0M7QUFDQSxTQUFTQyxRQUFULFFBQXlCLHNCQUF6QjtBQUVBOzs7OztBQUlBLGVBQWUsU0FBU0Msb0JBQVQsQ0FHYkMsTUFIYSxFQUdGQyxNQUhFLEVBR21DO0FBQ2hELE1BQUlILFFBQVEsQ0FBQ0UsTUFBRCxDQUFaLEVBQXNCO0FBQ3BCLFFBQU1FLEVBQUUsR0FBR0YsTUFBTSxDQUFDRyxLQUFQLENBQWFGLE1BQWIsRUFBcUJHLFNBQXJCLEVBQWdDLEVBQWhDLENBQVgsQ0FEb0IsQ0FFcEI7O0FBQ0EsUUFBSUYsRUFBRSxLQUFLRSxTQUFQLElBQW9CRixFQUFFLEtBQUssRUFBL0IsRUFBbUMsT0FBTyxJQUFQO0FBQ25DLFdBQU9BLEVBQVA7QUFDRDs7QUFDRCxNQUNFRixNQUFNLFlBQVlILE9BQU8sQ0FBQ1EsS0FBMUIsSUFDQUEsS0FBSyxDQUFDQyxPQUFOLENBQWNOLE1BQWQsQ0FEQSxJQUVBQSxNQUFNLFlBQVlILE9BQU8sQ0FBQ1UsTUFINUIsRUFJRTtBQUNBO0FBQ0E7QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFDRCxNQUFJUCxNQUFNLFlBQVlILE9BQU8sQ0FBQ1csS0FBOUIsRUFBcUM7QUFDbkMsUUFBTUMsbUJBQW1CLEdBQUdULE1BQU0sQ0FBQ1UsV0FBUCxDQUFtQlQsTUFBbkIsRUFBMkJHLFNBQTNCLEVBQXNDLEVBQXRDLENBQTVCLENBRG1DLENBRW5DOztBQUNBLFFBQUlLLG1CQUFtQixLQUFLTCxTQUE1QixFQUF1QyxPQUFPLElBQVA7QUFDdkMsV0FBTztBQUNMRixNQUFBQSxFQUFFLEVBQUVILG9CQUFvQixDQUFDVSxtQkFBRCxFQUFzQlIsTUFBdEIsQ0FEbkI7QUFFTEQsTUFBQUEsTUFBTSxFQUFFQSxNQUFNLENBQUNXLGtCQUFQLENBQTBCVixNQUExQixFQUFrQ1csTUFBbEMsRUFBMEMsRUFBMUM7QUFGSCxLQUFQO0FBSUQ7O0FBQ0QsTUFBTUMsQ0FBQyxHQUFHYixNQUFNLFlBQVlILE9BQU8sQ0FBQ2lCLE1BQTFCLEdBQW9DZCxNQUFELENBQWdCQSxNQUFuRCxHQUE0REEsTUFBdEU7QUFDQSxNQUFNZSxZQUFZLEdBQUcsRUFBckI7O0FBQ0EsT0FBSyxJQUFNQyxDQUFYLElBQWdCSCxDQUFoQixFQUFtQjtBQUNqQixRQUFJLENBQUNJLFFBQVEsQ0FBQ0osQ0FBQyxDQUFDRyxDQUFELENBQUYsQ0FBYixFQUFxQjtBQUNuQkQsTUFBQUEsWUFBWSxDQUFDQyxDQUFELENBQVosR0FBa0JILENBQUMsQ0FBQ0csQ0FBRCxDQUFuQjtBQUNELEtBRkQsTUFFTztBQUNMLFVBQU1FLE9BQU8sR0FBR25CLG9CQUFvQixDQUFDYyxDQUFDLENBQUNHLENBQUQsQ0FBRixFQUFPZixNQUFQLENBQXBDO0FBQ0EsVUFBSSxDQUFDaUIsT0FBTCxFQUFjLE9BQU8sSUFBUDtBQUNkSCxNQUFBQSxZQUFZLENBQUNDLENBQUQsQ0FBWixHQUFrQkUsT0FBbEI7QUFDRDtBQUNGOztBQUNELFNBQU9ILFlBQVA7QUFDRDs7QUFFRCxTQUFTRSxRQUFULENBQWtCRSxTQUFsQixFQUFrQztBQUNoQztBQUNBLFNBQU8sUUFBT0EsU0FBUCxNQUFxQixRQUFyQixJQUFpQ0EsU0FBUyxLQUFLLElBQXREO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb3JtYWxpemUsIFNjaGVtYSwgc2NoZW1hcyB9IGZyb20gJ34vcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNFbnRpdHkgfSBmcm9tICd+L3Jlc291cmNlL3R5cGVzJztcblxuLyoqXG4gKiBCdWlsZCB0aGUgcmVzdWx0IHBhcmFtZXRlciB0byBkZW5vcm1hbGl6ZSBmcm9tIHNjaGVtYSBhbG9uZS5cbiAqIFRyaWVzIHRvIGNvbXB1dGUgdGhlIGVudGl0eSBpZHMgZnJvbSBwYXJhbXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkSW5mZXJyZWRSZXN1bHRzPFxuICBQYXJhbXMgZXh0ZW5kcyBSZWFkb25seTxvYmplY3Q+LFxuICBTIGV4dGVuZHMgU2NoZW1hXG4+KHNjaGVtYTogUywgcGFyYW1zOiBQYXJhbXMpOiBOb3JtYWxpemU8Uz4gfCBudWxsIHtcbiAgaWYgKGlzRW50aXR5KHNjaGVtYSkpIHtcbiAgICBjb25zdCBpZCA9IHNjaGVtYS5nZXRJZChwYXJhbXMsIHVuZGVmaW5lZCwgJycpO1xuICAgIC8vIFdhcyB1bmFibGUgdG8gaW5mZXIgdGhlIGVudGl0eSdzIHByaW1hcnkga2V5IGZyb20gcGFyYW1zXG4gICAgaWYgKGlkID09PSB1bmRlZmluZWQgfHwgaWQgPT09ICcnKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gaWQgYXMgYW55O1xuICB9XG4gIGlmIChcbiAgICBzY2hlbWEgaW5zdGFuY2VvZiBzY2hlbWFzLkFycmF5IHx8XG4gICAgQXJyYXkuaXNBcnJheShzY2hlbWEpIHx8XG4gICAgc2NoZW1hIGluc3RhbmNlb2Ygc2NoZW1hcy5WYWx1ZXNcbiAgKSB7XG4gICAgLy8gYXJyYXkgc2NoZW1hcyBzaG91bGQgbm90IGJlIGluZmVycmVkIGJlY2F1c2UgdGhleSdyZSBsaWtlbHkgdG8gYmUgbWlzc2luZyBtYW55IG1lbWJlcnNcbiAgICAvLyBWYWx1ZXMgY2Fubm90IGJlIGluZmVycmVkIGJlY2F1c2UgdGhleSBoYXZlIGFyaWJ0cmFyeSBrZXlzXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIHNjaGVtYXMuVW5pb24pIHtcbiAgICBjb25zdCBkaXNjcmltaW5hdGVkU2NoZW1hID0gc2NoZW1hLmluZmVyU2NoZW1hKHBhcmFtcywgdW5kZWZpbmVkLCAnJyk7XG4gICAgLy8gV2FzIHVuYWJsZSB0byBpbmZlciB0aGUgZW50aXR5J3Mgc2NoZW1hIGZyb20gcGFyYW1zXG4gICAgaWYgKGRpc2NyaW1pbmF0ZWRTY2hlbWEgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBidWlsZEluZmVycmVkUmVzdWx0cyhkaXNjcmltaW5hdGVkU2NoZW1hLCBwYXJhbXMpLFxuICAgICAgc2NoZW1hOiBzY2hlbWEuZ2V0U2NoZW1hQXR0cmlidXRlKHBhcmFtcywgcGFyZW50LCAnJyksXG4gICAgfSBhcyBhbnk7XG4gIH1cbiAgY29uc3QgbyA9IHNjaGVtYSBpbnN0YW5jZW9mIHNjaGVtYXMuT2JqZWN0ID8gKHNjaGVtYSBhcyBhbnkpLnNjaGVtYSA6IHNjaGVtYTtcbiAgY29uc3QgcmVzdWx0T2JqZWN0ID0ge30gYXMgYW55O1xuICBmb3IgKGNvbnN0IGsgaW4gbykge1xuICAgIGlmICghaXNTY2hlbWEob1trXSkpIHtcbiAgICAgIHJlc3VsdE9iamVjdFtrXSA9IG9ba107XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBidWlsZEluZmVycmVkUmVzdWx0cyhvW2tdLCBwYXJhbXMpO1xuICAgICAgaWYgKCFyZXN1bHRzKSByZXR1cm4gbnVsbDtcbiAgICAgIHJlc3VsdE9iamVjdFtrXSA9IHJlc3VsdHM7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRPYmplY3Q7XG59XG5cbmZ1bmN0aW9uIGlzU2NoZW1hKGNhbmRpZGF0ZTogYW55KSB7XG4gIC8vIFRPRE86IGltcHJvdmUgZGV0ZWN0aW9uXG4gIHJldHVybiB0eXBlb2YgY2FuZGlkYXRlID09PSAnb2JqZWN0JyAmJiBjYW5kaWRhdGUgIT09IG51bGw7XG59XG4iXX0=