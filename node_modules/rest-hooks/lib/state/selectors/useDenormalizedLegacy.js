import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import { useMemo } from 'react';
import { isEntity } from "../../resource/types";
import { denormalize } from "../../resource";
import buildInferredResultsLegacy from './buildInferredResultsLegacy';
/**
 * Selects the Denormalize form from `state` cache.
 *
 * If `result` is not found, will attempt to generate it naturally
 * using params and schema. This increases cache hit rate for many
 * detail shapes.
 */

export default function useDenormalizedLegacy(_ref, params, state) {
  var schema = _ref.schema,
      getFetchKey = _ref.getFetchKey;
  // Select from state
  var entities = state.entities;
  var cacheResults = params && state.results[getFetchKey(params)]; // We can grab entities without actual results if the params compute a primary key

  var results = useMemo(function () {
    if (!params) return null;
    if (cacheResults) return cacheResults; // in case we don't even have entities for a model yet, denormalize() will throw
    // entities[entitySchema.key] === undefined

    return buildInferredResultsLegacy(schema, params); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [cacheResults, params && getFetchKey(params)]); // The final denormalize block

  return useMemo(function () {
    if (!entities || !params || !results) return null; // Warn users with bad configurations

    if (process.env.NODE_ENV !== 'production' && isEntity(schema)) {
      if (Array.isArray(results)) {
        throw new Error("url ".concat(getFetchKey(params), " has list results when single result is expected"));
      }

      if (_typeof(results) === 'object') {
        throw new Error("url ".concat(getFetchKey(params), " has object results when single result is expected"));
      }
    } // Select the actual results now


    var _denormalize = denormalize(results, schema, entities),
        _denormalize2 = _slicedToArray(_denormalize, 2),
        denormalized = _denormalize2[0],
        entitiesFound = _denormalize2[1];

    if (!entitiesFound && !cacheResults) return null;
    return denormalized; // TODO: would be nice to make this only recompute on the entity types that are in schema
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [entities, params && getFetchKey(params), results]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdGF0ZS9zZWxlY3RvcnMvdXNlRGVub3JtYWxpemVkTGVnYWN5LnRzIl0sIm5hbWVzIjpbInVzZU1lbW8iLCJpc0VudGl0eSIsImRlbm9ybWFsaXplIiwiYnVpbGRJbmZlcnJlZFJlc3VsdHNMZWdhY3kiLCJ1c2VEZW5vcm1hbGl6ZWRMZWdhY3kiLCJwYXJhbXMiLCJzdGF0ZSIsInNjaGVtYSIsImdldEZldGNoS2V5IiwiZW50aXRpZXMiLCJjYWNoZVJlc3VsdHMiLCJyZXN1bHRzIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiQXJyYXkiLCJpc0FycmF5IiwiRXJyb3IiLCJkZW5vcm1hbGl6ZWQiLCJlbnRpdGllc0ZvdW5kIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLE9BQVQsUUFBd0IsT0FBeEI7QUFFQSxTQUFTQyxRQUFULFFBQW9DLHNCQUFwQztBQUNBLFNBQWlCQyxXQUFqQixRQUE0RCxnQkFBNUQ7QUFDQSxPQUFPQywwQkFBUCxNQUF1Qyw4QkFBdkM7QUFFQTs7Ozs7Ozs7QUFPQSxlQUFlLFNBQVNDLHFCQUFULE9BS2JDLE1BTGEsRUFNYkMsS0FOYSxFQU9zQjtBQUFBLE1BSGpDQyxNQUdpQyxRQUhqQ0EsTUFHaUM7QUFBQSxNQUh6QkMsV0FHeUIsUUFIekJBLFdBR3lCO0FBQ25DO0FBQ0EsTUFBTUMsUUFBUSxHQUFHSCxLQUFLLENBQUNHLFFBQXZCO0FBQ0EsTUFBTUMsWUFBWSxHQUFHTCxNQUFNLElBQUtDLEtBQUssQ0FBQ0ssT0FBTixDQUFjSCxXQUFXLENBQUNILE1BQUQsQ0FBekIsQ0FBaEMsQ0FIbUMsQ0FLbkM7O0FBQ0EsTUFBTU0sT0FBTyxHQUFHWCxPQUFPLENBQUMsWUFBTTtBQUM1QixRQUFJLENBQUNLLE1BQUwsRUFBYSxPQUFPLElBQVA7QUFDYixRQUFJSyxZQUFKLEVBQWtCLE9BQU9BLFlBQVAsQ0FGVSxDQUk1QjtBQUNBOztBQUNBLFdBQU9QLDBCQUEwQixDQUFDSSxNQUFELEVBQVNGLE1BQVQsQ0FBakMsQ0FONEIsQ0FPNUI7QUFDRCxHQVJzQixFQVFwQixDQUFDSyxZQUFELEVBQWVMLE1BQU0sSUFBSUcsV0FBVyxDQUFDSCxNQUFELENBQXBDLENBUm9CLENBQXZCLENBTm1DLENBZ0JuQzs7QUFDQSxTQUFPTCxPQUFPLENBQUMsWUFBTTtBQUNuQixRQUFJLENBQUNTLFFBQUQsSUFBYSxDQUFDSixNQUFkLElBQXdCLENBQUNNLE9BQTdCLEVBQXNDLE9BQU8sSUFBUCxDQURuQixDQUduQjs7QUFDQSxRQUFJQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUF6QixJQUF5Q2IsUUFBUSxDQUFDTSxNQUFELENBQXJELEVBQStEO0FBQzdELFVBQUlRLEtBQUssQ0FBQ0MsT0FBTixDQUFjTCxPQUFkLENBQUosRUFBNEI7QUFDMUIsY0FBTSxJQUFJTSxLQUFKLGVBQ0dULFdBQVcsQ0FDaEJILE1BRGdCLENBRGQsc0RBQU47QUFLRDs7QUFDRCxVQUFJLFFBQU9NLE9BQVAsTUFBbUIsUUFBdkIsRUFBaUM7QUFDL0IsY0FBTSxJQUFJTSxLQUFKLGVBQ0dULFdBQVcsQ0FDaEJILE1BRGdCLENBRGQsd0RBQU47QUFLRDtBQUNGLEtBbkJrQixDQXFCbkI7OztBQXJCbUIsdUJBc0JtQkgsV0FBVyxDQUMvQ1MsT0FEK0MsRUFFL0NKLE1BRitDLEVBRy9DRSxRQUgrQyxDQXRCOUI7QUFBQTtBQUFBLFFBc0JaUyxZQXRCWTtBQUFBLFFBc0JFQyxhQXRCRjs7QUEyQm5CLFFBQUksQ0FBQ0EsYUFBRCxJQUFrQixDQUFDVCxZQUF2QixFQUFxQyxPQUFPLElBQVA7QUFDckMsV0FBT1EsWUFBUCxDQTVCbUIsQ0E2Qm5CO0FBQ0E7QUFDRCxHQS9CYSxFQStCWCxDQUFDVCxRQUFELEVBQVdKLE1BQU0sSUFBSUcsV0FBVyxDQUFDSCxNQUFELENBQWhDLEVBQTBDTSxPQUExQyxDQS9CVyxDQUFkO0FBZ0NEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnfi90eXBlcyc7XG5pbXBvcnQgeyBpc0VudGl0eSwgUmVhZFNoYXBlIH0gZnJvbSAnfi9yZXNvdXJjZS90eXBlcyc7XG5pbXBvcnQgeyBTY2hlbWEsIGRlbm9ybWFsaXplLCBOb3JtYWxpemUsIERlbm9ybWFsaXplIH0gZnJvbSAnfi9yZXNvdXJjZSc7XG5pbXBvcnQgYnVpbGRJbmZlcnJlZFJlc3VsdHNMZWdhY3kgZnJvbSAnLi9idWlsZEluZmVycmVkUmVzdWx0c0xlZ2FjeSc7XG5cbi8qKlxuICogU2VsZWN0cyB0aGUgRGVub3JtYWxpemUgZm9ybSBmcm9tIGBzdGF0ZWAgY2FjaGUuXG4gKlxuICogSWYgYHJlc3VsdGAgaXMgbm90IGZvdW5kLCB3aWxsIGF0dGVtcHQgdG8gZ2VuZXJhdGUgaXQgbmF0dXJhbGx5XG4gKiB1c2luZyBwYXJhbXMgYW5kIHNjaGVtYS4gVGhpcyBpbmNyZWFzZXMgY2FjaGUgaGl0IHJhdGUgZm9yIG1hbnlcbiAqIGRldGFpbCBzaGFwZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZURlbm9ybWFsaXplZExlZ2FjeTxcbiAgUGFyYW1zIGV4dGVuZHMgUmVhZG9ubHk8b2JqZWN0PixcbiAgUyBleHRlbmRzIFNjaGVtYVxuPihcbiAgeyBzY2hlbWEsIGdldEZldGNoS2V5IH06IFBpY2s8UmVhZFNoYXBlPFMsIFBhcmFtcz4sICdzY2hlbWEnIHwgJ2dldEZldGNoS2V5Jz4sXG4gIHBhcmFtczogUGFyYW1zIHwgbnVsbCxcbiAgc3RhdGU6IFN0YXRlPGFueT4sXG4pOiBEZW5vcm1hbGl6ZTx0eXBlb2Ygc2NoZW1hPiB8IG51bGwge1xuICAvLyBTZWxlY3QgZnJvbSBzdGF0ZVxuICBjb25zdCBlbnRpdGllcyA9IHN0YXRlLmVudGl0aWVzO1xuICBjb25zdCBjYWNoZVJlc3VsdHMgPSBwYXJhbXMgJiYgKHN0YXRlLnJlc3VsdHNbZ2V0RmV0Y2hLZXkocGFyYW1zKV0gYXMgYW55KTtcblxuICAvLyBXZSBjYW4gZ3JhYiBlbnRpdGllcyB3aXRob3V0IGFjdHVhbCByZXN1bHRzIGlmIHRoZSBwYXJhbXMgY29tcHV0ZSBhIHByaW1hcnkga2V5XG4gIGNvbnN0IHJlc3VsdHMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoIXBhcmFtcykgcmV0dXJuIG51bGw7XG4gICAgaWYgKGNhY2hlUmVzdWx0cykgcmV0dXJuIGNhY2hlUmVzdWx0cztcblxuICAgIC8vIGluIGNhc2Ugd2UgZG9uJ3QgZXZlbiBoYXZlIGVudGl0aWVzIGZvciBhIG1vZGVsIHlldCwgZGVub3JtYWxpemUoKSB3aWxsIHRocm93XG4gICAgLy8gZW50aXRpZXNbZW50aXR5U2NoZW1hLmtleV0gPT09IHVuZGVmaW5lZFxuICAgIHJldHVybiBidWlsZEluZmVycmVkUmVzdWx0c0xlZ2FjeShzY2hlbWEsIHBhcmFtcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbY2FjaGVSZXN1bHRzLCBwYXJhbXMgJiYgZ2V0RmV0Y2hLZXkocGFyYW1zKV0pO1xuXG4gIC8vIFRoZSBmaW5hbCBkZW5vcm1hbGl6ZSBibG9ja1xuICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFlbnRpdGllcyB8fCAhcGFyYW1zIHx8ICFyZXN1bHRzKSByZXR1cm4gbnVsbDtcblxuICAgIC8vIFdhcm4gdXNlcnMgd2l0aCBiYWQgY29uZmlndXJhdGlvbnNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0VudGl0eShzY2hlbWEpKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHRzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYHVybCAke2dldEZldGNoS2V5KFxuICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICl9IGhhcyBsaXN0IHJlc3VsdHMgd2hlbiBzaW5nbGUgcmVzdWx0IGlzIGV4cGVjdGVkYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGB1cmwgJHtnZXRGZXRjaEtleShcbiAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICApfSBoYXMgb2JqZWN0IHJlc3VsdHMgd2hlbiBzaW5nbGUgcmVzdWx0IGlzIGV4cGVjdGVkYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZWxlY3QgdGhlIGFjdHVhbCByZXN1bHRzIG5vd1xuICAgIGNvbnN0IFtkZW5vcm1hbGl6ZWQsIGVudGl0aWVzRm91bmRdID0gZGVub3JtYWxpemUoXG4gICAgICByZXN1bHRzLFxuICAgICAgc2NoZW1hLFxuICAgICAgZW50aXRpZXMsXG4gICAgKTtcbiAgICBpZiAoIWVudGl0aWVzRm91bmQgJiYgIWNhY2hlUmVzdWx0cykgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIGRlbm9ybWFsaXplZCBhcyBhbnk7XG4gICAgLy8gVE9ETzogd291bGQgYmUgbmljZSB0byBtYWtlIHRoaXMgb25seSByZWNvbXB1dGUgb24gdGhlIGVudGl0eSB0eXBlcyB0aGF0IGFyZSBpbiBzY2hlbWFcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtlbnRpdGllcywgcGFyYW1zICYmIGdldEZldGNoS2V5KHBhcmFtcyksIHJlc3VsdHNdKTtcbn1cbiJdfQ==