import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import { useMemo } from 'react';
import { isEntity } from "../../resource/types";
import { denormalize } from "../../resource";
import buildInferredResults from './buildInferredResults';
/**
 * Selects the denormalized form from `state` cache.
 *
 * If `result` is not found, will attempt to generate it naturally
 * using params and schema. This increases cache hit rate for many
 * detail shapes.
 *
 * @returns [denormalizedValue, allEntitiesFound]
 */

export default function useDenormalized(_ref, params, state) {
  var schema = _ref.schema,
      getFetchKey = _ref.getFetchKey;
  // Select from state
  var entities = state.entities;
  var cacheResults = params && state.results[getFetchKey(params)]; // We can grab entities without actual results if the params compute a primary key

  var results = useMemo(function () {
    if (cacheResults) return cacheResults; // in case we don't even have entities for a model yet, denormalize() will throw
    // entities[entitySchema.key] === undefined

    return buildInferredResults(schema, params); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [cacheResults, params && getFetchKey(params)]); // The final denormalize block

  return useMemo(function () {
    // Warn users with bad configurations
    if (process.env.NODE_ENV !== 'production' && isEntity(schema)) {
      var paramEncoding = params ? getFetchKey(params) : '';

      if (Array.isArray(results)) {
        throw new Error("url ".concat(paramEncoding, " has list results when single result is expected"));
      }

      if (_typeof(results) === 'object') {
        throw new Error("url ".concat(paramEncoding, " has object results when single result is expected"));
      }
    } // second argument is false if any entities are missing


    var _denormalize = denormalize(results, schema, entities),
        _denormalize2 = _slicedToArray(_denormalize, 2),
        denormalized = _denormalize2[0],
        entitiesFound = _denormalize2[1];

    return [denormalized, entitiesFound]; // TODO: would be nice to make this only recompute on the entity types that are in schema
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [entities, params && getFetchKey(params), results]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdGF0ZS9zZWxlY3RvcnMvdXNlRGVub3JtYWxpemVkLnRzIl0sIm5hbWVzIjpbInVzZU1lbW8iLCJpc0VudGl0eSIsImRlbm9ybWFsaXplIiwiYnVpbGRJbmZlcnJlZFJlc3VsdHMiLCJ1c2VEZW5vcm1hbGl6ZWQiLCJwYXJhbXMiLCJzdGF0ZSIsInNjaGVtYSIsImdldEZldGNoS2V5IiwiZW50aXRpZXMiLCJjYWNoZVJlc3VsdHMiLCJyZXN1bHRzIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwicGFyYW1FbmNvZGluZyIsIkFycmF5IiwiaXNBcnJheSIsIkVycm9yIiwiZGVub3JtYWxpemVkIiwiZW50aXRpZXNGb3VuZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxPQUFULFFBQXdCLE9BQXhCO0FBRUEsU0FBU0MsUUFBVCxRQUFvQyxzQkFBcEM7QUFDQSxTQUFpQkMsV0FBakIsUUFBeUQsZ0JBQXpEO0FBQ0EsT0FBT0Msb0JBQVAsTUFBaUMsd0JBQWpDO0FBRUE7Ozs7Ozs7Ozs7QUFTQSxlQUFlLFNBQVNDLGVBQVQsT0FLYkMsTUFMYSxFQU1iQyxLQU5hLEVBVWI7QUFBQSxNQU5FQyxNQU1GLFFBTkVBLE1BTUY7QUFBQSxNQU5VQyxXQU1WLFFBTlVBLFdBTVY7QUFDQTtBQUNBLE1BQU1DLFFBQVEsR0FBR0gsS0FBSyxDQUFDRyxRQUF2QjtBQUNBLE1BQU1DLFlBQVksR0FBR0wsTUFBTSxJQUFJQyxLQUFLLENBQUNLLE9BQU4sQ0FBY0gsV0FBVyxDQUFDSCxNQUFELENBQXpCLENBQS9CLENBSEEsQ0FLQTs7QUFDQSxNQUFNTSxPQUFPLEdBQUdYLE9BQU8sQ0FBQyxZQUFNO0FBQzVCLFFBQUlVLFlBQUosRUFBa0IsT0FBT0EsWUFBUCxDQURVLENBRzVCO0FBQ0E7O0FBQ0EsV0FBT1Asb0JBQW9CLENBQUNJLE1BQUQsRUFBU0YsTUFBVCxDQUEzQixDQUw0QixDQU01QjtBQUNELEdBUHNCLEVBT3BCLENBQUNLLFlBQUQsRUFBZUwsTUFBTSxJQUFJRyxXQUFXLENBQUNILE1BQUQsQ0FBcEMsQ0FQb0IsQ0FBdkIsQ0FOQSxDQWVBOztBQUNBLFNBQU9MLE9BQU8sQ0FBQyxZQUFNO0FBQ25CO0FBQ0EsUUFBSVksT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVosS0FBeUIsWUFBekIsSUFBeUNiLFFBQVEsQ0FBQ00sTUFBRCxDQUFyRCxFQUErRDtBQUM3RCxVQUFNUSxhQUFhLEdBQUdWLE1BQU0sR0FBR0csV0FBVyxDQUFDSCxNQUFELENBQWQsR0FBeUIsRUFBckQ7O0FBQ0EsVUFBSVcsS0FBSyxDQUFDQyxPQUFOLENBQWNOLE9BQWQsQ0FBSixFQUE0QjtBQUMxQixjQUFNLElBQUlPLEtBQUosZUFDR0gsYUFESCxzREFBTjtBQUdEOztBQUNELFVBQUksUUFBT0osT0FBUCxNQUFtQixRQUF2QixFQUFpQztBQUMvQixjQUFNLElBQUlPLEtBQUosZUFDR0gsYUFESCx3REFBTjtBQUdEO0FBQ0YsS0Fka0IsQ0FnQm5COzs7QUFoQm1CLHVCQWlCbUNiLFdBQVcsQ0FDL0RTLE9BRCtELEVBRS9ESixNQUYrRCxFQUcvREUsUUFIK0QsQ0FqQjlDO0FBQUE7QUFBQSxRQWlCWlUsWUFqQlk7QUFBQSxRQWlCRUMsYUFqQkY7O0FBc0JuQixXQUFPLENBQUNELFlBQUQsRUFBZUMsYUFBZixDQUFQLENBdEJtQixDQXVCbkI7QUFDQTtBQUNELEdBekJhLEVBeUJYLENBQUNYLFFBQUQsRUFBV0osTUFBTSxJQUFJRyxXQUFXLENBQUNILE1BQUQsQ0FBaEMsRUFBMENNLE9BQTFDLENBekJXLENBQWQ7QUEwQkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICd+L3R5cGVzJztcbmltcG9ydCB7IGlzRW50aXR5LCBSZWFkU2hhcGUgfSBmcm9tICd+L3Jlc291cmNlL3R5cGVzJztcbmltcG9ydCB7IFNjaGVtYSwgZGVub3JtYWxpemUsIERlbm9ybWFsaXplTnVsbGFibGUgfSBmcm9tICd+L3Jlc291cmNlJztcbmltcG9ydCBidWlsZEluZmVycmVkUmVzdWx0cyBmcm9tICcuL2J1aWxkSW5mZXJyZWRSZXN1bHRzJztcblxuLyoqXG4gKiBTZWxlY3RzIHRoZSBkZW5vcm1hbGl6ZWQgZm9ybSBmcm9tIGBzdGF0ZWAgY2FjaGUuXG4gKlxuICogSWYgYHJlc3VsdGAgaXMgbm90IGZvdW5kLCB3aWxsIGF0dGVtcHQgdG8gZ2VuZXJhdGUgaXQgbmF0dXJhbGx5XG4gKiB1c2luZyBwYXJhbXMgYW5kIHNjaGVtYS4gVGhpcyBpbmNyZWFzZXMgY2FjaGUgaGl0IHJhdGUgZm9yIG1hbnlcbiAqIGRldGFpbCBzaGFwZXMuXG4gKlxuICogQHJldHVybnMgW2Rlbm9ybWFsaXplZFZhbHVlLCBhbGxFbnRpdGllc0ZvdW5kXVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VEZW5vcm1hbGl6ZWQ8XG4gIFBhcmFtcyBleHRlbmRzIFJlYWRvbmx5PG9iamVjdD4sXG4gIFMgZXh0ZW5kcyBTY2hlbWFcbj4oXG4gIHsgc2NoZW1hLCBnZXRGZXRjaEtleSB9OiBQaWNrPFJlYWRTaGFwZTxTLCBQYXJhbXM+LCAnc2NoZW1hJyB8ICdnZXRGZXRjaEtleSc+LFxuICBwYXJhbXM6IFBhcmFtcyB8IG51bGwsXG4gIHN0YXRlOiBTdGF0ZTxhbnk+LFxuKTogW1xuICBEZW5vcm1hbGl6ZU51bGxhYmxlPHR5cGVvZiBzY2hlbWE+LFxuICB0eXBlb2YgcGFyYW1zIGV4dGVuZHMgbnVsbCA/IGZhbHNlIDogYm9vbGVhbixcbl0ge1xuICAvLyBTZWxlY3QgZnJvbSBzdGF0ZVxuICBjb25zdCBlbnRpdGllcyA9IHN0YXRlLmVudGl0aWVzO1xuICBjb25zdCBjYWNoZVJlc3VsdHMgPSBwYXJhbXMgJiYgc3RhdGUucmVzdWx0c1tnZXRGZXRjaEtleShwYXJhbXMpXTtcblxuICAvLyBXZSBjYW4gZ3JhYiBlbnRpdGllcyB3aXRob3V0IGFjdHVhbCByZXN1bHRzIGlmIHRoZSBwYXJhbXMgY29tcHV0ZSBhIHByaW1hcnkga2V5XG4gIGNvbnN0IHJlc3VsdHMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoY2FjaGVSZXN1bHRzKSByZXR1cm4gY2FjaGVSZXN1bHRzO1xuXG4gICAgLy8gaW4gY2FzZSB3ZSBkb24ndCBldmVuIGhhdmUgZW50aXRpZXMgZm9yIGEgbW9kZWwgeWV0LCBkZW5vcm1hbGl6ZSgpIHdpbGwgdGhyb3dcbiAgICAvLyBlbnRpdGllc1tlbnRpdHlTY2hlbWEua2V5XSA9PT0gdW5kZWZpbmVkXG4gICAgcmV0dXJuIGJ1aWxkSW5mZXJyZWRSZXN1bHRzKHNjaGVtYSwgcGFyYW1zKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtjYWNoZVJlc3VsdHMsIHBhcmFtcyAmJiBnZXRGZXRjaEtleShwYXJhbXMpXSk7XG5cbiAgLy8gVGhlIGZpbmFsIGRlbm9ybWFsaXplIGJsb2NrXG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICAvLyBXYXJuIHVzZXJzIHdpdGggYmFkIGNvbmZpZ3VyYXRpb25zXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNFbnRpdHkoc2NoZW1hKSkge1xuICAgICAgY29uc3QgcGFyYW1FbmNvZGluZyA9IHBhcmFtcyA/IGdldEZldGNoS2V5KHBhcmFtcykgOiAnJztcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdHMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgdXJsICR7cGFyYW1FbmNvZGluZ30gaGFzIGxpc3QgcmVzdWx0cyB3aGVuIHNpbmdsZSByZXN1bHQgaXMgZXhwZWN0ZWRgLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiByZXN1bHRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYHVybCAke3BhcmFtRW5jb2Rpbmd9IGhhcyBvYmplY3QgcmVzdWx0cyB3aGVuIHNpbmdsZSByZXN1bHQgaXMgZXhwZWN0ZWRgLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNlY29uZCBhcmd1bWVudCBpcyBmYWxzZSBpZiBhbnkgZW50aXRpZXMgYXJlIG1pc3NpbmdcbiAgICBjb25zdCBbZGVub3JtYWxpemVkLCBlbnRpdGllc0ZvdW5kXTogW2FueSwgYm9vbGVhbl0gPSBkZW5vcm1hbGl6ZShcbiAgICAgIHJlc3VsdHMsXG4gICAgICBzY2hlbWEsXG4gICAgICBlbnRpdGllcyxcbiAgICApO1xuICAgIHJldHVybiBbZGVub3JtYWxpemVkLCBlbnRpdGllc0ZvdW5kXSBhcyBhbnk7XG4gICAgLy8gVE9ETzogd291bGQgYmUgbmljZSB0byBtYWtlIHRoaXMgb25seSByZWNvbXB1dGUgb24gdGhlIGVudGl0eSB0eXBlcyB0aGF0IGFyZSBpbiBzY2hlbWFcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtlbnRpdGllcywgcGFyYW1zICYmIGdldEZldGNoS2V5KHBhcmFtcyksIHJlc3VsdHNdKTtcbn1cbiJdfQ==