import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import isMergeableObject from './isMergeable'; // Note: the return types are technically not as strict as they could be; but this is sufficient for our local usage.

/**
 * Deep merge two objects or arrays. Uses static merge function if exists.
 */

export default function mergeDeepCopy(target, source) {
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  var Static = source && source.constructor;

  if (target && Static && isMergeable(Static)) {
    if (isMergeable(target.constructor)) {
      return Static.merge(target, source);
    } else {
      return source;
    }
  } else if (isMergeableObject(source)) {
    // target and source are mergeable
    if (isMergeableObject(target) && sourceAndTargetTypesMatch) {
      var destination = targetIsArray ? _toConsumableArray(target) : _objectSpread({}, target);
      Object.keys(source).forEach(function (key) {
        destination[key] = mergeDeepCopy(destination[key], source[key]);
      });
      return destination; // not mergeable, but still need to clone source
    } else {
      return mergeDeepCopy(sourceIsArray ? [] : {}, source);
    }
  } else if (source === undefined) {
    return target;
  }

  return source;
}

function isMergeable(constructor) {
  return constructor && typeof constructor.merge === 'function';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdGF0ZS9tZXJnZS9tZXJnZURlZXBDb3B5LnRzIl0sIm5hbWVzIjpbImlzTWVyZ2VhYmxlT2JqZWN0IiwibWVyZ2VEZWVwQ29weSIsInRhcmdldCIsInNvdXJjZSIsInNvdXJjZUlzQXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJ0YXJnZXRJc0FycmF5Iiwic291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCIsIlN0YXRpYyIsImNvbnN0cnVjdG9yIiwiaXNNZXJnZWFibGUiLCJtZXJnZSIsImRlc3RpbmF0aW9uIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBT0EsaUJBQVAsTUFBOEIsZUFBOUIsQyxDQUVBOztBQUVBOzs7O0FBR0EsZUFBZSxTQUFTQyxhQUFULENBQStCQyxNQUEvQixFQUEyQ0MsTUFBM0MsRUFBZ0U7QUFDN0UsTUFBTUMsYUFBYSxHQUFHQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsTUFBZCxDQUF0QjtBQUNBLE1BQU1JLGFBQWEsR0FBR0YsS0FBSyxDQUFDQyxPQUFOLENBQWNKLE1BQWQsQ0FBdEI7QUFDQSxNQUFNTSx5QkFBeUIsR0FBR0osYUFBYSxLQUFLRyxhQUFwRDtBQUNBLE1BQU1FLE1BQXNCLEdBQUdOLE1BQU0sSUFBS0EsTUFBRCxDQUFnQk8sV0FBekQ7O0FBRUEsTUFBSVIsTUFBTSxJQUFJTyxNQUFWLElBQW9CRSxXQUFXLENBQUNGLE1BQUQsQ0FBbkMsRUFBNkM7QUFDM0MsUUFBSUUsV0FBVyxDQUFFVCxNQUFELENBQWdCUSxXQUFqQixDQUFmLEVBQThDO0FBQzVDLGFBQU9ELE1BQU0sQ0FBQ0csS0FBUCxDQUFhVixNQUFiLEVBQXFCQyxNQUFyQixDQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBT0EsTUFBUDtBQUNEO0FBQ0YsR0FORCxNQU1PLElBQUlILGlCQUFpQixDQUFDRyxNQUFELENBQXJCLEVBQStCO0FBQ3BDO0FBQ0EsUUFBSUgsaUJBQWlCLENBQUNFLE1BQUQsQ0FBakIsSUFBNkJNLHlCQUFqQyxFQUE0RDtBQUMxRCxVQUFNSyxXQUFnQixHQUFHTixhQUFhLHNCQUM3QkwsTUFENkIsc0JBRTdCQSxNQUY2QixDQUF0QztBQUdBWSxNQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWVosTUFBWixFQUFvQmEsT0FBcEIsQ0FBNEIsVUFBQUMsR0FBRyxFQUFJO0FBQ2pDSixRQUFBQSxXQUFXLENBQUNJLEdBQUQsQ0FBWCxHQUFtQmhCLGFBQWEsQ0FDOUJZLFdBQVcsQ0FBQ0ksR0FBRCxDQURtQixFQUU3QmQsTUFBRCxDQUFnQmMsR0FBaEIsQ0FGOEIsQ0FBaEM7QUFJRCxPQUxEO0FBTUEsYUFBT0osV0FBUCxDQVYwRCxDQVcxRDtBQUNELEtBWkQsTUFZTztBQUNMLGFBQU9aLGFBQWEsQ0FBQ0csYUFBYSxHQUFHLEVBQUgsR0FBUyxFQUF2QixFQUFtQ0QsTUFBbkMsQ0FBcEI7QUFDRDtBQUNGLEdBakJNLE1BaUJBLElBQUlBLE1BQU0sS0FBS2UsU0FBZixFQUEwQjtBQUMvQixXQUFPaEIsTUFBUDtBQUNEOztBQUNELFNBQU9DLE1BQVA7QUFDRDs7QUFTRCxTQUFTUSxXQUFULENBQXdCRCxXQUF4QixFQUE2RTtBQUMzRSxTQUFPQSxXQUFXLElBQUksT0FBT0EsV0FBVyxDQUFDRSxLQUFuQixLQUE2QixVQUFuRDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzTWVyZ2VhYmxlT2JqZWN0IGZyb20gJy4vaXNNZXJnZWFibGUnO1xuXG4vLyBOb3RlOiB0aGUgcmV0dXJuIHR5cGVzIGFyZSB0ZWNobmljYWxseSBub3QgYXMgc3RyaWN0IGFzIHRoZXkgY291bGQgYmU7IGJ1dCB0aGlzIGlzIHN1ZmZpY2llbnQgZm9yIG91ciBsb2NhbCB1c2FnZS5cblxuLyoqXG4gKiBEZWVwIG1lcmdlIHR3byBvYmplY3RzIG9yIGFycmF5cy4gVXNlcyBzdGF0aWMgbWVyZ2UgZnVuY3Rpb24gaWYgZXhpc3RzLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZURlZXBDb3B5PFQxLCBUMj4odGFyZ2V0OiBUMSwgc291cmNlOiBUMik6IFQxICYgVDIge1xuICBjb25zdCBzb3VyY2VJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuICBjb25zdCB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuICBjb25zdCBzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoID0gc291cmNlSXNBcnJheSA9PT0gdGFyZ2V0SXNBcnJheTtcbiAgY29uc3QgU3RhdGljOiBTdGF0aWNUeXBlPFQyPiA9IHNvdXJjZSAmJiAoc291cmNlIGFzIGFueSkuY29uc3RydWN0b3I7XG5cbiAgaWYgKHRhcmdldCAmJiBTdGF0aWMgJiYgaXNNZXJnZWFibGUoU3RhdGljKSkge1xuICAgIGlmIChpc01lcmdlYWJsZSgodGFyZ2V0IGFzIGFueSkuY29uc3RydWN0b3IpKSB7XG4gICAgICByZXR1cm4gU3RhdGljLm1lcmdlKHRhcmdldCwgc291cmNlKSBhcyBhbnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzb3VyY2UgYXMgYW55O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc01lcmdlYWJsZU9iamVjdChzb3VyY2UpKSB7XG4gICAgLy8gdGFyZ2V0IGFuZCBzb3VyY2UgYXJlIG1lcmdlYWJsZVxuICAgIGlmIChpc01lcmdlYWJsZU9iamVjdCh0YXJnZXQpICYmIHNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2gpIHtcbiAgICAgIGNvbnN0IGRlc3RpbmF0aW9uOiBhbnkgPSB0YXJnZXRJc0FycmF5XG4gICAgICAgID8gWy4uLih0YXJnZXQgYXMgYW55KV1cbiAgICAgICAgOiB7IC4uLnRhcmdldCB9O1xuICAgICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBtZXJnZURlZXBDb3B5KFxuICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0sXG4gICAgICAgICAgKHNvdXJjZSBhcyBhbnkpW2tleV0sXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbiAgICAgIC8vIG5vdCBtZXJnZWFibGUsIGJ1dCBzdGlsbCBuZWVkIHRvIGNsb25lIHNvdXJjZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWVyZ2VEZWVwQ29weShzb3VyY2VJc0FycmF5ID8gW10gOiAoe30gYXMgYW55KSwgc291cmNlIGFzIGFueSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRhcmdldCBhcyBhbnk7XG4gIH1cbiAgcmV0dXJuIHNvdXJjZSBhcyBhbnk7XG59XG5cbnR5cGUgU3RhdGljVHlwZTxUPiA9IFQgZXh0ZW5kcyB7IGNvbnN0cnVjdG9yOiBpbmZlciBVIH0gPyBVIDogdW5kZWZpbmVkO1xuXG5pbnRlcmZhY2UgTWVyZ2VhYmxlU3RhdGljPFQ+IHtcbiAgbmV3ICgpOiBUO1xuICBtZXJnZShhOiBULCBiOiBUKTogVDtcbn1cblxuZnVuY3Rpb24gaXNNZXJnZWFibGU8VD4oY29uc3RydWN0b3I6IGFueSk6IGNvbnN0cnVjdG9yIGlzIE1lcmdlYWJsZVN0YXRpYzxUPiB7XG4gIHJldHVybiBjb25zdHJ1Y3RvciAmJiB0eXBlb2YgY29uc3RydWN0b3IubWVyZ2UgPT09ICdmdW5jdGlvbic7XG59XG4iXX0=