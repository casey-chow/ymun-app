import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

/**
 * PollingSubscription keeps a given resource updated by
 * dispatching a fetch at a rate equal to the minimum update
 * interval requested.
 */
var PollingSubscription =
/*#__PURE__*/
function () {
  function PollingSubscription(_ref, dispatch) {
    var url = _ref.url,
        schema = _ref.schema,
        fetch = _ref.fetch,
        frequency = _ref.frequency;

    _classCallCheck(this, PollingSubscription);

    _defineProperty(this, "schema", void 0);

    _defineProperty(this, "fetch", void 0);

    _defineProperty(this, "url", void 0);

    _defineProperty(this, "frequency", void 0);

    _defineProperty(this, "frequencyHistogram", new Map());

    _defineProperty(this, "dispatch", void 0);

    _defineProperty(this, "intervalId", void 0);

    _defineProperty(this, "lastIntervalId", void 0);

    if (frequency === undefined) throw new Error('frequency needed for polling subscription');
    this.schema = schema;
    this.fetch = fetch;
    this.frequency = frequency;
    this.url = url;
    this.frequencyHistogram.set(this.frequency, 1);
    this.dispatch = dispatch;
    this.run();
  }
  /** Subscribe to a frequency */


  _createClass(PollingSubscription, [{
    key: "add",
    value: function add(frequency) {
      if (frequency === undefined) return;

      if (this.frequencyHistogram.has(frequency)) {
        this.frequencyHistogram.set(frequency, this.frequencyHistogram.get(frequency) + 1);
      } else {
        this.frequencyHistogram.set(frequency, 1); // new min so restart service

        if (frequency < this.frequency) {
          this.frequency = frequency;
          this.run();
        }
      }
    }
    /** Unsubscribe from a frequency */

  }, {
    key: "remove",
    value: function remove(frequency) {
      if (frequency === undefined) return false;

      if (this.frequencyHistogram.has(frequency)) {
        this.frequencyHistogram.set(frequency, this.frequencyHistogram.get(frequency) - 1);

        if (this.frequencyHistogram.get(frequency) < 1) {
          this.frequencyHistogram["delete"](frequency); // nothing subscribed to this anymore...it is invalid

          if (this.frequencyHistogram.size === 0) {
            this.cleanup();
            return true;
          } // this was the min, so find the next size


          if (frequency <= this.frequency) {
            this.frequency = Math.min.apply(Math, _toConsumableArray(this.frequencyHistogram.keys()));
            this.run();
          }
        }
      } else if (process.env.NODE_ENV !== 'production') {
        console.error("Mismatched remove: ".concat(frequency, " is not subscribed for ").concat(this.url));
      }

      return false;
    }
    /** Cleanup means clearing out background interval. */

  }, {
    key: "cleanup",
    value: function cleanup() {
      if (this.intervalId) {
        clearInterval(this.intervalId);
        this.intervalId = undefined;
      }

      if (this.lastIntervalId) {
        clearInterval(this.lastIntervalId);
        this.lastIntervalId = undefined;
      }
    }
    /** Trigger request for latest resource */

  }, {
    key: "update",
    value: function update() {
      this.dispatch({
        type: 'rest-hooks/fetch',
        payload: this.fetch,
        meta: {
          schema: this.schema,
          url: this.url,
          responseType: 'rest-hooks/receive',
          throttle: true,
          options: {
            dataExpiryLength: this.frequency / 2,
            errorExpiryLength: this.frequency / 10
          },
          resolve: function resolve() {},
          reject: function reject() {}
        }
      });
    }
    /** Run polling process with current frequency
     *
     * Will clean up old poll interval on next run
     */

  }, {
    key: "run",
    value: function run() {
      var _this = this;

      this.lastIntervalId = this.intervalId;
      this.intervalId = setInterval(function () {
        // since we don't know how long into the last poll it was before resetting
        // we wait til the next fetch to clear old intervals
        if (_this.lastIntervalId) {
          clearInterval(_this.lastIntervalId);
          _this.lastIntervalId = undefined;
        }

        _this.update();
      }, this.frequency);
    }
  }]);

  return PollingSubscription;
}();

export { PollingSubscription as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,