import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _memoize from "lodash/memoize";
import RIC from './RIC';
/** Handles all async network dispatches
 *
 * Dedupes concurrent requests by keeping track of all fetches in flight
 * and returning existing promises for requests already in flight.
 *
 * Interfaces with store via a redux-compatible middleware.
 */

var NetworkManager =
/*#__PURE__*/
function () {
  function NetworkManager() {
    var dataExpiryLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 60000;
    var errorExpiryLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;

    _classCallCheck(this, NetworkManager);

    _defineProperty(this, "fetched", {});

    _defineProperty(this, "resolvers", {});

    _defineProperty(this, "rejectors", {});

    _defineProperty(this, "dataExpiryLength", void 0);

    _defineProperty(this, "errorExpiryLength", void 0);

    _defineProperty(this, "getMiddleware", _memoize(function () {
      var _this = this;

      return function (_ref) {
        var dispatch = _ref.dispatch;
        return function (next) {
          return function (action) {
            switch (action.type) {
              case 'rest-hooks/fetch':
                _this.handleFetch(action, dispatch);

                return Promise.resolve();

              case 'rest-hooks/purge':
              case 'rest-hooks/rpc':
              case 'rest-hooks/receive':
                // only receive after new state is computed
                return next(action).then(function () {
                  if (action.meta.url in _this.fetched) {
                    _this.handleReceive(action);
                  }
                });

              case 'rest-hooks/reset':
                _this.cleanup();

                return next(action);

              default:
                return next(action);
            }
          };
        };
      };
    }));

    this.dataExpiryLength = dataExpiryLength;
    this.errorExpiryLength = errorExpiryLength;
  }
  /** Ensures all promises are completed by rejecting remaining. */


  _createClass(NetworkManager, [{
    key: "cleanup",
    value: function cleanup() {
      for (var _k in this.rejectors) {
        var error = new Error('Cleaning up Network Manager');
        error.name = 'CLEANUP';

        this.rejectors[_k](error);
      }
    }
    /** Clear promise state for a given url */

  }, {
    key: "clear",
    value: function clear(url) {
      delete this.resolvers[url];
      delete this.rejectors[url];
      delete this.fetched[url];
    }
    /** Called when middleware intercepts 'rest-hooks/fetch' action.
     *
     * Will then start a promise for a url and potentially start the network
     * fetch.
     *
     * Uses throttle only when instructed by action meta. This is valuable
     * for ensures mutation requests always go through.
     */

  }, {
    key: "handleFetch",
    value: function handleFetch(action, dispatch) {
      var fetch = action.payload;
      var _action$meta = action.meta,
          schema = _action$meta.schema,
          url = _action$meta.url,
          responseType = _action$meta.responseType,
          throttle = _action$meta.throttle,
          resolve = _action$meta.resolve,
          updaters = _action$meta.updaters,
          reject = _action$meta.reject,
          _action$meta$options = _action$meta.options,
          options = _action$meta$options === void 0 ? {} : _action$meta$options;
      var _options$dataExpiryLe = options.dataExpiryLength,
          dataExpiryLength = _options$dataExpiryLe === void 0 ? this.dataExpiryLength : _options$dataExpiryLe,
          _options$errorExpiryL = options.errorExpiryLength,
          errorExpiryLength = _options$errorExpiryL === void 0 ? this.errorExpiryLength : _options$errorExpiryL;

      var deferedFetch = function deferedFetch() {
        return fetch().then(function (data) {
          var now = Date.now();
          var meta = {
            schema: schema,
            url: url,
            date: now,
            expiresAt: now + dataExpiryLength
          };

          if (['rest-hooks/receive', 'rest-hooks/rpc'].includes(responseType)) {
            meta.updaters = updaters;
          }

          dispatch({
            type: responseType,
            payload: data,
            meta: meta
          });
          return data;
        })["catch"](function (error) {
          if (error.name === 'CLEANUP') return;
          var now = Date.now();
          dispatch({
            type: responseType,
            payload: error,
            meta: {
              schema: schema,
              url: url,
              date: now,
              expiresAt: now + errorExpiryLength
            },
            error: true
          });
          throw error;
        });
      };

      var promise;

      if (throttle) {
        promise = this.throttle(url, deferedFetch);
      } else {
        promise = deferedFetch();
      }

      promise.then(function (data) {
        return resolve(data);
      })["catch"](function (error) {
        return reject(error);
      });
      return promise;
    }
    /** Called when middleware intercepts a receive action.
     *
     * Will resolve the promise associated with receive url.
     */

  }, {
    key: "handleReceive",
    value: function handleReceive(action) {
      // this can still turn out to be untrue since this is async
      if (action.meta.url in this.fetched) {
        var promiseHandler;

        if (action.error) {
          promiseHandler = this.rejectors[action.meta.url];
        } else {
          promiseHandler = this.resolvers[action.meta.url];
        }

        promiseHandler(action.payload); // since we're resolved we no longer need to keep track of this promise

        this.clear(action.meta.url);
      }
    }
    /** Attaches NetworkManager to store
     *
     * Intercepts 'rest-hooks/fetch' actions to start requests.
     *
     * Resolve/rejects a request when matching 'rest-hooks/receive' event
     * is seen.
     */

  }, {
    key: "throttle",

    /** Ensures only one request for a given url is in flight at any time
     *
     * Uses url as key to either retrieve in-flight promise, or if not
     * create a new promise and call fetch.
     *
     * Note: The new promise is not actually tied to fetch at all,
     * but is resolved when the expected 'recieve' action is processed.
     * This ensures promises are resolved only once their data is processed
     * by the reducer.
     */
    value: function throttle(url, fetch) {
      var _this2 = this;

      // we're already fetching so reuse the promise
      if (url in this.fetched) {
        return this.fetched[url];
      }

      this.fetched[url] = new Promise(function (resolve, reject) {
        _this2.resolvers[url] = resolve;
        _this2.rejectors[url] = reject;
      }); // since our real promise is resolved via the wrapReducer(),
      // we should just stop all errors here.
      // TODO: decouple this from useFetcher() (that's what's dispatching the error the resolves in here)

      RIC(function () {
        fetch()["catch"](function () {
          return null;
        });
      }, {
        timeout: 500
      });
      return this.fetched[url];
    }
  }]);

  return NetworkManager;
}();

export { NetworkManager as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,