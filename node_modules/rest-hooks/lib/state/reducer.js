import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { normalize } from "../resource";
import mergeDeepCopy from './merge/mergeDeepCopy';
import applyUpdatersToResults from './applyUpdatersToResults';
export var initialState = {
  entities: {},
  results: {},
  meta: {}
};
export default function reducer(state, action) {
  if (!state) state = initialState;

  switch (action.type) {
    case 'rest-hooks/receive':
      {
        if (action.error) {
          return _objectSpread({}, state, {
            meta: _objectSpread({}, state.meta, _defineProperty({}, action.meta.url, {
              date: action.meta.date,
              error: action.payload,
              expiresAt: action.meta.expiresAt
            }))
          });
        }

        var _normalize = normalize(action.payload, action.meta.schema),
            result = _normalize.result,
            entities = _normalize.entities;

        var results = _objectSpread({}, state.results, _defineProperty({}, action.meta.url, result));

        results = applyUpdatersToResults(results, result, action.meta.updaters);
        return {
          entities: mergeDeepCopy(state.entities, entities),
          results: results,
          meta: _objectSpread({}, state.meta, _defineProperty({}, action.meta.url, {
            date: action.meta.date,
            expiresAt: action.meta.expiresAt
          }))
        };
      }

    case 'rest-hooks/rpc':
      {
        if (action.error) return state;

        var _normalize2 = normalize(action.payload, action.meta.schema),
            _entities = _normalize2.entities,
            _result = _normalize2.result;

        var _results = applyUpdatersToResults(state.results, _result, action.meta.updaters);

        return _objectSpread({}, state, {
          entities: mergeDeepCopy(state.entities, _entities),
          results: _results
        });
      }

    case 'rest-hooks/purge':
      {
        if (action.error) return state;
        var key = action.meta.schema.key;
        var pk = action.meta.url;

        var _entities2 = purgeEntity(state.entities, key, pk);

        return _objectSpread({}, state, {
          entities: _entities2
        });
      }

    case 'rest-hooks/invalidate':
      return _objectSpread({}, state, {
        meta: _objectSpread({}, state.meta, _defineProperty({}, action.meta.url, _objectSpread({}, state.meta[action.meta.url], {
          expiresAt: 0
        })))
      });

    case 'rest-hooks/reset':
      return initialState;

    default:
      // If 'fetch' action reaches the reducer there are no middlewares installed to handle it
      if (process.env.NODE_ENV !== 'production' && action.type === 'rest-hooks/fetch') {
        console.warn('Reducer recieved fetch action - you are likely missing the NetworkManager middleware');
        console.warn('See https://resthooks.io/docs/guides/redux#indextsx for hooking up redux');
      } // A reducer must always return a valid state.
      // Alternatively you can throw an error if an invalid action is dispatched.


      return state;
  }
}

// equivalent to entities.deleteIn(key, pk)
function purgeEntity(entities, key, pk) {
  var copy = _objectSpread({}, entities);

  copy[key] = _objectSpread({}, copy[key]);
  delete copy[key][pk];
  return copy;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,