/// <reference types="node" />
import { Schema } from "../resource";
import { Dispatch } from "../types";
import { Subscription, SubscriptionInit } from './SubscriptionManager';
/**
 * PollingSubscription keeps a given resource updated by
 * dispatching a fetch at a rate equal to the minimum update
 * interval requested.
 */
export default class PollingSubscription implements Subscription {
    protected readonly schema: Schema;
    protected readonly fetch: () => Promise<any>;
    protected readonly url: string;
    protected frequency: number;
    protected frequencyHistogram: Map<number, number>;
    protected dispatch: Dispatch<any>;
    protected intervalId?: NodeJS.Timeout;
    protected lastIntervalId?: NodeJS.Timeout;
    constructor({ url, schema, fetch, frequency }: SubscriptionInit, dispatch: Dispatch<any>);
    /** Subscribe to a frequency */
    add(frequency?: number): void;
    /** Unsubscribe from a frequency */
    remove(frequency?: number): boolean;
    /** Cleanup means clearing out background interval. */
    cleanup(): void;
    /** Trigger request for latest resource */
    protected update(): void;
    /** Run polling process with current frequency
     *
     * Will clean up old poll interval on next run
     */
    protected run(): void;
}
