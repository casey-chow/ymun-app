/// <reference types="react" />
import { Resource, SimpleResource, SuperagentResource, FetchShape, DeleteShape, ReadShape, MutateShape, Schema, SchemaList, SchemaDetail, SchemaOf, schemas } from './resource';
import NetworkManager from './state/NetworkManager';
import PollingSubscription from './state/PollingSubscription';
import SubscriptionManager from './state/SubscriptionManager';
import reducer from './state/reducer';
import { useDenormalized } from './state/selectors';
import { useCache, useCacheLegacy, useFetcher, useRetrieve, useResource, useResourceLegacy, useSubscription, useMeta, useError, CacheProvider, useInvalidator, useResetter, ExternalCacheProvider, PromiseifyMiddleware, NetworkErrorBoundary, NetworkError } from './react-integration';
import useSelectionUnstable from './react-integration/hooks/useSelection';
import { Request as RequestType } from 'superagent';
import { AbstractInstanceType, FetchOptions, Method, State, FetchAction, ReceiveAction, RPCAction, PurgeAction, Dispatch, MiddlewareAPI, Middleware, Manager } from './types';
declare const __INTERNAL__: {
    initialState: Readonly<{
        entities: Readonly<{
            [k: string]: {
                [id: string]: unknown;
            } | undefined;
        }>;
        results: Readonly<{
            [url: string]: unknown;
        }>;
        meta: Readonly<{
            [url: string]: {
                date: number;
                error?: Error | undefined;
                expiresAt: number;
            };
        }>;
    }>;
    StateContext: import("react").Context<Readonly<{
        entities: Readonly<{
            [k: string]: {
                [id: string]: unknown;
            } | undefined;
        }>;
        results: Readonly<{
            [url: string]: unknown;
        }>;
        meta: Readonly<{
            [url: string]: {
                date: number;
                error?: Error | undefined;
                expiresAt: number;
            };
        }>;
    }>>;
    DispatchContext: import("react").Context<(value: import("./types").ActionTypes) => Promise<void>>;
    RIC: (cb: (...args: any[]) => void, options: any) => void;
};
export declare type DeleteShape<S extends schemas.Entity, Params extends Readonly<object> = Readonly<object>, Body extends Readonly<object | string> | void = undefined> = DeleteShape<S, Params, Body>;
export declare type MutateShape<S extends Schema, Params extends Readonly<object> = Readonly<object>, Body extends Readonly<object | string> | void = Readonly<object> | undefined> = MutateShape<S, Params, Body>;
export declare type ReadShape<S extends Schema, Params extends Readonly<object> = Readonly<object>> = ReadShape<S, Params>;
export declare type FetchShape<S extends Schema, Params extends Readonly<object> = Readonly<object>, Body extends Readonly<object | string> | void = Readonly<object> | undefined> = FetchShape<S, Params, Body>;
export declare type State<T> = State<T>;
export declare type Schema = Schema;
export declare type SchemaList<T> = SchemaList<T>;
export declare type SchemaDetail<T> = SchemaDetail<T>;
export declare type SchemaOf<T> = SchemaOf<T>;
export declare type AbstractInstanceType<T> = AbstractInstanceType<T>;
export declare type FetchOptions = FetchOptions;
export declare type Method = Method;
export declare type NetworkError = NetworkError;
export declare type Request = RequestType;
export declare type FetchAction<Payload extends object | string | number = object | string | number> = FetchAction<Payload>;
export declare type ReceiveAction<Payload extends object | string | number = object | string | number> = ReceiveAction<Payload>;
export declare type RPCAction<Payload extends object | string | number = object | string | number> = RPCAction<Payload>;
export declare type PurgeAction = PurgeAction;
export declare type Dispatch<R extends React.Reducer<any, any>> = Dispatch<R>;
export declare type MiddlewareAPI<R extends React.Reducer<any, any> = React.Reducer<any, any>> = MiddlewareAPI<R>;
export declare type Middleware = Middleware;
export declare type Manager = Manager;
export { Resource, SimpleResource, SuperagentResource, CacheProvider, ExternalCacheProvider, PromiseifyMiddleware, useCache, useCacheLegacy, useFetcher, useRetrieve, useInvalidator, useResetter, useResource, useResourceLegacy, useSubscription, useMeta, useError, useSelectionUnstable, useDenormalized, NetworkManager, SubscriptionManager, PollingSubscription, reducer, NetworkErrorBoundary, schemas, __INTERNAL__, };
