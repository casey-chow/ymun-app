import React from 'react';
import { State, Manager } from '..';
declare type DeepPartialWithUnknown<T> = {
    [K in keyof T]?: T[K] extends unknown ? any : T[K] extends object ? DeepPartialWithUnknown<T[K]> : T[K];
};
declare let makeExternalCacheProvider: (managers: Manager[], initialState?: DeepPartialWithUnknown<State<any>>) => (props: {
    children: React.ReactNode;
}) => JSX.Element;
declare const makeCacheProvider: (managers: import("../types").Manager[], initialState?: Readonly<{
    entities: Readonly<{
        [k: string]: {
            [id: string]: unknown;
        } | undefined;
    }>;
    results: Readonly<{
        [url: string]: unknown;
    }>;
    meta: Readonly<{
        [url: string]: {
            date: number;
            error?: Error | undefined;
            expiresAt: number;
        };
    }>;
}> | undefined) => ({ children, }: {
    children: React.ReactNode;
}) => JSX.Element;
export { makeExternalCacheProvider, makeCacheProvider };
