import _jsx from "@babel/runtime/helpers/esm/jsx";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import React from 'react';
import { reducer, ExternalCacheProvider, CacheProvider, PromiseifyMiddleware } from '..'; // Extension of the DeepPartial type defined by Redux which handles unknown

var makeExternalCacheProvider;

try {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  var _require = require('redux'),
      createStore = _require.createStore,
      applyMiddleware = _require.applyMiddleware;

  makeExternalCacheProvider = function makeExternalCacheProvider(managers, initialState) {
    var store = createStore(reducer, initialState, applyMiddleware.apply(void 0, _toConsumableArray(managers.map(function (manager) {
      return manager.getMiddleware();
    })).concat([PromiseifyMiddleware])));
    return function ConfiguredExternalCacheProvider(_ref) {
      var children = _ref.children;
      return _jsx(ExternalCacheProvider, {
        store: store,
        selector: function selector(s) {
          return s;
        }
      }, void 0, children);
    };
  };
} catch (e) {
  makeExternalCacheProvider = function makeExternalCacheProvider(managers, initialState) {
    throw new Error('Using makeExternalCacheProvider() requires redux to be installed as a peerDependency to rest-hooks');
  };
}

var makeCacheProvider = function makeCacheProvider(managers, initialState) {
  return function ConfiguredCacheProvider(_ref2) {
    var children = _ref2.children;
    return _jsx(CacheProvider, {
      managers: managers,
      initialState: initialState
    }, void 0, children);
  };
};

export { makeExternalCacheProvider, makeCacheProvider };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L3Byb3ZpZGVycy50c3giXSwibmFtZXMiOlsiUmVhY3QiLCJyZWR1Y2VyIiwiRXh0ZXJuYWxDYWNoZVByb3ZpZGVyIiwiQ2FjaGVQcm92aWRlciIsIlByb21pc2VpZnlNaWRkbGV3YXJlIiwibWFrZUV4dGVybmFsQ2FjaGVQcm92aWRlciIsInJlcXVpcmUiLCJjcmVhdGVTdG9yZSIsImFwcGx5TWlkZGxld2FyZSIsIm1hbmFnZXJzIiwiaW5pdGlhbFN0YXRlIiwic3RvcmUiLCJtYXAiLCJtYW5hZ2VyIiwiZ2V0TWlkZGxld2FyZSIsIkNvbmZpZ3VyZWRFeHRlcm5hbENhY2hlUHJvdmlkZXIiLCJjaGlsZHJlbiIsInMiLCJlIiwiRXJyb3IiLCJtYWtlQ2FjaGVQcm92aWRlciIsIkNvbmZpZ3VyZWRDYWNoZVByb3ZpZGVyIl0sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxTQUVFQyxPQUZGLEVBR0VDLHFCQUhGLEVBSUVDLGFBSkYsRUFNRUMsb0JBTkYsUUFPTyxJQVBQLEMsQ0FTQTs7QUFTQSxJQUFJQyx5QkFBSjs7QUFLQSxJQUFJO0FBQ0Y7QUFERSxpQkFFdUNDLE9BQU8sQ0FBQyxPQUFELENBRjlDO0FBQUEsTUFFTUMsV0FGTixZQUVNQSxXQUZOO0FBQUEsTUFFbUJDLGVBRm5CLFlBRW1CQSxlQUZuQjs7QUFHRkgsRUFBQUEseUJBQXlCLEdBQUcsbUNBQzFCSSxRQUQwQixFQUUxQkMsWUFGMEIsRUFHdkI7QUFDSCxRQUFNQyxLQUFLLEdBQUdKLFdBQVcsQ0FDdkJOLE9BRHVCLEVBRXZCUyxZQUZ1QixFQUd2QkYsZUFBZSxNQUFmLDRCQUNLQyxRQUFRLENBQUNHLEdBQVQsQ0FBYSxVQUFBQyxPQUFPO0FBQUEsYUFBSUEsT0FBTyxDQUFDQyxhQUFSLEVBQUo7QUFBQSxLQUFwQixDQURMLFVBRUVWLG9CQUZGLEdBSHVCLENBQXpCO0FBU0EsV0FBTyxTQUFTVywrQkFBVCxPQUlKO0FBQUEsVUFIREMsUUFHQyxRQUhEQSxRQUdDO0FBQ0QsYUFDRSxLQUFDLHFCQUFEO0FBQXVCLFFBQUEsS0FBSyxFQUFFTCxLQUE5QjtBQUFxQyxRQUFBLFFBQVEsRUFBRSxrQkFBQ00sQ0FBRDtBQUFBLGlCQUFtQkEsQ0FBbkI7QUFBQTtBQUEvQyxpQkFDR0QsUUFESCxDQURGO0FBS0QsS0FWRDtBQVdELEdBeEJEO0FBeUJELENBNUJELENBNEJFLE9BQU9FLENBQVAsRUFBVTtBQUNWYixFQUFBQSx5QkFBeUIsR0FBRyxtQ0FDMUJJLFFBRDBCLEVBRTFCQyxZQUYwQixFQUdrQztBQUM1RCxVQUFNLElBQUlTLEtBQUosQ0FDSixvR0FESSxDQUFOO0FBR0QsR0FQRDtBQVFEOztBQUVELElBQU1DLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FDeEJYLFFBRHdCLEVBRXhCQyxZQUZ3QixFQUdyQjtBQUNILFNBQU8sU0FBU1csdUJBQVQsUUFJSjtBQUFBLFFBSERMLFFBR0MsU0FIREEsUUFHQztBQUNELFdBQ0UsS0FBQyxhQUFEO0FBQWUsTUFBQSxRQUFRLEVBQUVQLFFBQXpCO0FBQW1DLE1BQUEsWUFBWSxFQUFFQztBQUFqRCxlQUNHTSxRQURILENBREY7QUFLRCxHQVZEO0FBV0QsQ0FmRDs7QUFpQkEsU0FBU1gseUJBQVQsRUFBb0NlLGlCQUFwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBTdGF0ZSxcbiAgcmVkdWNlcixcbiAgRXh0ZXJuYWxDYWNoZVByb3ZpZGVyLFxuICBDYWNoZVByb3ZpZGVyLFxuICBNYW5hZ2VyLFxuICBQcm9taXNlaWZ5TWlkZGxld2FyZSxcbn0gZnJvbSAnLi4nO1xuXG4vLyBFeHRlbnNpb24gb2YgdGhlIERlZXBQYXJ0aWFsIHR5cGUgZGVmaW5lZCBieSBSZWR1eCB3aGljaCBoYW5kbGVzIHVua25vd25cbnR5cGUgRGVlcFBhcnRpYWxXaXRoVW5rbm93bjxUPiA9IHtcbiAgW0sgaW4ga2V5b2YgVF0/OiBUW0tdIGV4dGVuZHMgdW5rbm93blxuICAgID8gYW55XG4gICAgOiBUW0tdIGV4dGVuZHMgb2JqZWN0XG4gICAgPyBEZWVwUGFydGlhbFdpdGhVbmtub3duPFRbS10+XG4gICAgOiBUW0tdO1xufTtcblxubGV0IG1ha2VFeHRlcm5hbENhY2hlUHJvdmlkZXI6IChcbiAgbWFuYWdlcnM6IE1hbmFnZXJbXSxcbiAgaW5pdGlhbFN0YXRlPzogRGVlcFBhcnRpYWxXaXRoVW5rbm93bjxTdGF0ZTxhbnk+PixcbikgPT4gKHByb3BzOiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgPT4gSlNYLkVsZW1lbnQ7XG5cbnRyeSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG4gIGNvbnN0IHsgY3JlYXRlU3RvcmUsIGFwcGx5TWlkZGxld2FyZSB9ID0gcmVxdWlyZSgncmVkdXgnKTtcbiAgbWFrZUV4dGVybmFsQ2FjaGVQcm92aWRlciA9IChcbiAgICBtYW5hZ2VyczogTWFuYWdlcltdLFxuICAgIGluaXRpYWxTdGF0ZT86IERlZXBQYXJ0aWFsV2l0aFVua25vd248U3RhdGU8YW55Pj4sXG4gICkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXG4gICAgICByZWR1Y2VyLFxuICAgICAgaW5pdGlhbFN0YXRlLFxuICAgICAgYXBwbHlNaWRkbGV3YXJlKFxuICAgICAgICAuLi5tYW5hZ2Vycy5tYXAobWFuYWdlciA9PiBtYW5hZ2VyLmdldE1pZGRsZXdhcmUoKSksXG4gICAgICAgIFByb21pc2VpZnlNaWRkbGV3YXJlLFxuICAgICAgKSxcbiAgICApO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIENvbmZpZ3VyZWRFeHRlcm5hbENhY2hlUHJvdmlkZXIoe1xuICAgICAgY2hpbGRyZW4sXG4gICAgfToge1xuICAgICAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICB9KSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8RXh0ZXJuYWxDYWNoZVByb3ZpZGVyIHN0b3JlPXtzdG9yZX0gc2VsZWN0b3I9eyhzOiBTdGF0ZTxhbnk+KSA9PiBzfT5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvRXh0ZXJuYWxDYWNoZVByb3ZpZGVyPlxuICAgICAgKTtcbiAgICB9O1xuICB9O1xufSBjYXRjaCAoZSkge1xuICBtYWtlRXh0ZXJuYWxDYWNoZVByb3ZpZGVyID0gKFxuICAgIG1hbmFnZXJzOiBNYW5hZ2VyW10sXG4gICAgaW5pdGlhbFN0YXRlPzogRGVlcFBhcnRpYWxXaXRoVW5rbm93bjxTdGF0ZTxhbnk+PixcbiAgKTogKChwcm9wczogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pID0+IEpTWC5FbGVtZW50KSA9PiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ1VzaW5nIG1ha2VFeHRlcm5hbENhY2hlUHJvdmlkZXIoKSByZXF1aXJlcyByZWR1eCB0byBiZSBpbnN0YWxsZWQgYXMgYSBwZWVyRGVwZW5kZW5jeSB0byByZXN0LWhvb2tzJyxcbiAgICApO1xuICB9O1xufVxuXG5jb25zdCBtYWtlQ2FjaGVQcm92aWRlciA9IChcbiAgbWFuYWdlcnM6IE1hbmFnZXJbXSxcbiAgaW5pdGlhbFN0YXRlPzogU3RhdGU8dW5rbm93bj4sXG4pID0+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIENvbmZpZ3VyZWRDYWNoZVByb3ZpZGVyKHtcbiAgICBjaGlsZHJlbixcbiAgfToge1xuICAgIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG4gIH0pIHtcbiAgICByZXR1cm4gKFxuICAgICAgPENhY2hlUHJvdmlkZXIgbWFuYWdlcnM9e21hbmFnZXJzfSBpbml0aWFsU3RhdGU9e2luaXRpYWxTdGF0ZX0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvQ2FjaGVQcm92aWRlcj5cbiAgICApO1xuICB9O1xufTtcblxuZXhwb3J0IHsgbWFrZUV4dGVybmFsQ2FjaGVQcm92aWRlciwgbWFrZUNhY2hlUHJvdmlkZXIgfTtcbiJdfQ==