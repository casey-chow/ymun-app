import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _jsx from "@babel/runtime/helpers/esm/jsx";
import React from 'react';
import { renderHook } from '@testing-library/react-hooks';
import { MockNetworkManager } from './managers';
import mockInitialState from './mockState';
import { SubscriptionManager, PollingSubscription } from '..';
export default function makeRenderRestHook(makeProvider) {
  var manager = new MockNetworkManager();
  var subManager = new SubscriptionManager(PollingSubscription);

  function renderRestHook(callback, options) {
    var initialState = options && options.results && mockInitialState(options.results);
    var Provider = makeProvider([manager, subManager], initialState);
    var Wrapper = options && options.wrapper;
    var wrapper = Wrapper ? function ProviderWrapped(_ref) {
      var children = _ref.children;
      return _jsx(Provider, {}, void 0, _jsx(Wrapper, {}, void 0, children));
    } : Provider;
    return renderHook(callback, _objectSpread({}, options, {
      wrapper: wrapper
    }));
  }

  renderRestHook.cleanup = function () {
    manager.cleanup();
    subManager.cleanup();
  };

  return renderRestHook;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L21ha2VSZW5kZXJSZXN0SG9vay50c3giXSwibmFtZXMiOlsiUmVhY3QiLCJyZW5kZXJIb29rIiwiTW9ja05ldHdvcmtNYW5hZ2VyIiwibW9ja0luaXRpYWxTdGF0ZSIsIlN1YnNjcmlwdGlvbk1hbmFnZXIiLCJQb2xsaW5nU3Vic2NyaXB0aW9uIiwibWFrZVJlbmRlclJlc3RIb29rIiwibWFrZVByb3ZpZGVyIiwibWFuYWdlciIsInN1Yk1hbmFnZXIiLCJyZW5kZXJSZXN0SG9vayIsImNhbGxiYWNrIiwib3B0aW9ucyIsImluaXRpYWxTdGF0ZSIsInJlc3VsdHMiLCJQcm92aWRlciIsIldyYXBwZXIiLCJ3cmFwcGVyIiwiUHJvdmlkZXJXcmFwcGVkIiwiY2hpbGRyZW4iLCJjbGVhbnVwIl0sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxTQUFTQyxVQUFULFFBQThDLDhCQUE5QztBQUVBLFNBQVNDLGtCQUFULFFBQW1DLFlBQW5DO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBMEMsYUFBMUM7QUFDQSxTQUFnQkMsbUJBQWhCLEVBQXFDQyxtQkFBckMsUUFBeUUsSUFBekU7QUFFQSxlQUFlLFNBQVNDLGtCQUFULENBQ2JDLFlBRGEsRUFLYjtBQUNBLE1BQU1DLE9BQU8sR0FBRyxJQUFJTixrQkFBSixFQUFoQjtBQUNBLE1BQU1PLFVBQVUsR0FBRyxJQUFJTCxtQkFBSixDQUF3QkMsbUJBQXhCLENBQW5COztBQUNBLFdBQVNLLGNBQVQsQ0FDRUMsUUFERixFQUVFQyxPQUZGLEVBTUU7QUFDQSxRQUFNQyxZQUFZLEdBQ2hCRCxPQUFPLElBQUlBLE9BQU8sQ0FBQ0UsT0FBbkIsSUFBOEJYLGdCQUFnQixDQUFDUyxPQUFPLENBQUNFLE9BQVQsQ0FEaEQ7QUFFQSxRQUFNQyxRQUFrQyxHQUFHUixZQUFZLENBQ3JELENBQUNDLE9BQUQsRUFBVUMsVUFBVixDQURxRCxFQUVyREksWUFGcUQsQ0FBdkQ7QUFJQSxRQUFNRyxPQUFPLEdBQUdKLE9BQU8sSUFBSUEsT0FBTyxDQUFDSyxPQUFuQztBQUNBLFFBQU1BLE9BQWlDLEdBQUdELE9BQU8sR0FDN0MsU0FBU0UsZUFBVCxPQUF1RTtBQUFBLFVBQTVDQyxRQUE0QyxRQUE1Q0EsUUFBNEM7QUFDckUsYUFDRSxLQUFDLFFBQUQsY0FDRSxLQUFDLE9BQUQsY0FBVUEsUUFBVixDQURGLENBREY7QUFLRCxLQVA0QyxHQVE3Q0osUUFSSjtBQVNBLFdBQU9kLFVBQVUsQ0FBQ1UsUUFBRCxvQkFDWkMsT0FEWTtBQUVmSyxNQUFBQSxPQUFPLEVBQVBBO0FBRmUsT0FBakI7QUFJRDs7QUFDRFAsRUFBQUEsY0FBYyxDQUFDVSxPQUFmLEdBQXlCLFlBQU07QUFDN0JaLElBQUFBLE9BQU8sQ0FBQ1ksT0FBUjtBQUNBWCxJQUFBQSxVQUFVLENBQUNXLE9BQVg7QUFDRCxHQUhEOztBQUlBLFNBQU9WLGNBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXJIb29rLCBSZW5kZXJIb29rT3B0aW9ucyB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtaG9va3MnO1xuXG5pbXBvcnQgeyBNb2NrTmV0d29ya01hbmFnZXIgfSBmcm9tICcuL21hbmFnZXJzJztcbmltcG9ydCBtb2NrSW5pdGlhbFN0YXRlLCB7IEZpeHR1cmUgfSBmcm9tICcuL21vY2tTdGF0ZSc7XG5pbXBvcnQgeyBTdGF0ZSwgU3Vic2NyaXB0aW9uTWFuYWdlciwgUG9sbGluZ1N1YnNjcmlwdGlvbiwgTWFuYWdlciB9IGZyb20gJy4uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFrZVJlbmRlclJlc3RIb29rKFxuICBtYWtlUHJvdmlkZXI6IChcbiAgICBtYW5hZ2VyczogTWFuYWdlcltdLFxuICAgIGluaXRpYWxTdGF0ZT86IFN0YXRlPHVua25vd24+LFxuICApID0+IFJlYWN0LkNvbXBvbmVudFR5cGU8eyBjaGlsZHJlbjogUmVhY3QuUmVhY3RDaGlsZCB9Pixcbikge1xuICBjb25zdCBtYW5hZ2VyID0gbmV3IE1vY2tOZXR3b3JrTWFuYWdlcigpO1xuICBjb25zdCBzdWJNYW5hZ2VyID0gbmV3IFN1YnNjcmlwdGlvbk1hbmFnZXIoUG9sbGluZ1N1YnNjcmlwdGlvbik7XG4gIGZ1bmN0aW9uIHJlbmRlclJlc3RIb29rPFAsIFI+KFxuICAgIGNhbGxiYWNrOiAocHJvcHM6IFApID0+IFIsXG4gICAgb3B0aW9ucz86IHtcbiAgICAgIGluaXRpYWxQcm9wcz86IFA7XG4gICAgICByZXN1bHRzPzogRml4dHVyZVtdO1xuICAgIH0gJiBSZW5kZXJIb29rT3B0aW9uczxQPixcbiAgKSB7XG4gICAgY29uc3QgaW5pdGlhbFN0YXRlID1cbiAgICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5yZXN1bHRzICYmIG1vY2tJbml0aWFsU3RhdGUob3B0aW9ucy5yZXN1bHRzKTtcbiAgICBjb25zdCBQcm92aWRlcjogUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+ID0gbWFrZVByb3ZpZGVyKFxuICAgICAgW21hbmFnZXIsIHN1Yk1hbmFnZXJdLFxuICAgICAgaW5pdGlhbFN0YXRlLFxuICAgICk7XG4gICAgY29uc3QgV3JhcHBlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy53cmFwcGVyO1xuICAgIGNvbnN0IHdyYXBwZXI6IFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PiA9IFdyYXBwZXJcbiAgICAgID8gZnVuY3Rpb24gUHJvdmlkZXJXcmFwcGVkKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3RDaGlsZCB9KSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxQcm92aWRlcj5cbiAgICAgICAgICAgICAgPFdyYXBwZXI+e2NoaWxkcmVufTwvV3JhcHBlcj5cbiAgICAgICAgICAgIDwvUHJvdmlkZXI+XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgOiBQcm92aWRlcjtcbiAgICByZXR1cm4gcmVuZGVySG9vayhjYWxsYmFjaywge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHdyYXBwZXIsXG4gICAgfSk7XG4gIH1cbiAgcmVuZGVyUmVzdEhvb2suY2xlYW51cCA9ICgpID0+IHtcbiAgICBtYW5hZ2VyLmNsZWFudXAoKTtcbiAgICBzdWJNYW5hZ2VyLmNsZWFudXAoKTtcbiAgfTtcbiAgcmV0dXJuIHJlbmRlclJlc3RIb29rO1xufVxuIl19