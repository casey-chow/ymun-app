import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { act } from '@testing-library/react-hooks';
import { NetworkManager } from '..';
export var MockNetworkManager =
/*#__PURE__*/
function (_NetworkManager) {
  _inherits(MockNetworkManager, _NetworkManager);

  function MockNetworkManager() {
    _classCallCheck(this, MockNetworkManager);

    return _possibleConstructorReturn(this, _getPrototypeOf(MockNetworkManager).apply(this, arguments));
  }

  _createClass(MockNetworkManager, [{
    key: "handleFetch",
    value: function handleFetch(action, dispatch) {
      var mockDispatch = function mockDispatch(v) {
        act(function () {
          dispatch(v);
        });
        return Promise.resolve();
      };

      return _get(_getPrototypeOf(MockNetworkManager.prototype), "handleFetch", this).call(this, action, mockDispatch);
    }
  }, {
    key: "handleReceive",
    value: function handleReceive(action) {
      var _this = this;

      act(function () {
        _get(_getPrototypeOf(MockNetworkManager.prototype), "handleReceive", _this).call(_this, action);
      });
    }
  }]);

  return MockNetworkManager;
}(NetworkManager);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L21hbmFnZXJzLnRzIl0sIm5hbWVzIjpbImFjdCIsIk5ldHdvcmtNYW5hZ2VyIiwiTW9ja05ldHdvcmtNYW5hZ2VyIiwiYWN0aW9uIiwiZGlzcGF0Y2giLCJtb2NrRGlzcGF0Y2giLCJ2IiwiUHJvbWlzZSIsInJlc29sdmUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLFNBQVNBLEdBQVQsUUFBb0IsOEJBQXBCO0FBQ0EsU0FBU0MsY0FBVCxRQUFxRSxJQUFyRTtBQUVBLFdBQWFDLGtCQUFiO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUEsZ0NBQ2NDLE1BRGQsRUFDbUNDLFFBRG5DLEVBQzREO0FBQ3hELFVBQU1DLFlBQTZCLEdBQUcsU0FBaENBLFlBQWdDLENBQUNDLENBQUQsRUFBWTtBQUNoRE4sUUFBQUEsR0FBRyxDQUFDLFlBQU07QUFDUkksVUFBQUEsUUFBUSxDQUFDRSxDQUFELENBQVI7QUFDRCxTQUZFLENBQUg7QUFHQSxlQUFPQyxPQUFPLENBQUNDLE9BQVIsRUFBUDtBQUNELE9BTEQ7O0FBTUEsaUdBQXlCTCxNQUF6QixFQUFpQ0UsWUFBakM7QUFDRDtBQVRIO0FBQUE7QUFBQSxrQ0FVZ0JGLE1BVmhCLEVBVXVDO0FBQUE7O0FBQ25DSCxNQUFBQSxHQUFHLENBQUMsWUFBTTtBQUNSLGdHQUFvQkcsTUFBcEI7QUFDRCxPQUZFLENBQUg7QUFHRDtBQWRIOztBQUFBO0FBQUEsRUFBd0NGLGNBQXhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1ob29rcyc7XG5pbXBvcnQgeyBOZXR3b3JrTWFuYWdlciwgRmV0Y2hBY3Rpb24sIFJlY2VpdmVBY3Rpb24sIERpc3BhdGNoIH0gZnJvbSAnLi4nO1xuXG5leHBvcnQgY2xhc3MgTW9ja05ldHdvcmtNYW5hZ2VyIGV4dGVuZHMgTmV0d29ya01hbmFnZXIge1xuICBoYW5kbGVGZXRjaChhY3Rpb246IEZldGNoQWN0aW9uLCBkaXNwYXRjaDogRGlzcGF0Y2g8YW55Pikge1xuICAgIGNvbnN0IG1vY2tEaXNwYXRjaDogdHlwZW9mIGRpc3BhdGNoID0gKHY6IGFueSkgPT4ge1xuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgZGlzcGF0Y2godik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBzdXBlci5oYW5kbGVGZXRjaChhY3Rpb24sIG1vY2tEaXNwYXRjaCk7XG4gIH1cbiAgaGFuZGxlUmVjZWl2ZShhY3Rpb246IFJlY2VpdmVBY3Rpb24pIHtcbiAgICBhY3QoKCkgPT4ge1xuICAgICAgc3VwZXIuaGFuZGxlUmVjZWl2ZShhY3Rpb24pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=