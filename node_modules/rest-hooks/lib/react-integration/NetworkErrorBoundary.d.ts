import React from 'react';
export interface NetworkError extends Error {
    status: number | undefined;
    response?: {
        statusText?: string;
        body?: any;
    };
}
interface Props<E extends NetworkError> {
    children: React.ReactNode;
    fallbackComponent: React.ComponentType<{
        error: E;
    }>;
}
interface State<E extends NetworkError> {
    error?: E;
}
export default class NetworkErrorBoundary<E extends NetworkError> extends React.Component<Props<E>, State<E>> {
    static defaultProps: {
        fallbackComponent: ({ error }: {
            error: NetworkError;
        }) => JSX.Element;
    };
    static getDerivedStateFromError(error: NetworkError | any): {
        error: NetworkError;
    } | undefined;
    state: State<E>;
    render(): {} | null | undefined;
}
export {};
