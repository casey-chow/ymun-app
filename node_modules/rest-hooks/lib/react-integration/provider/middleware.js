import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useReducer, useMemo, useRef, useEffect } from 'react';
import usePromisifiedDispatch from './usePromisifiedDispatch'; // TODO: release as own library?

/** Redux-middleware compatible integration for useReducer() */

export default function createEnhancedReducerHook() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  var useEnhancedReducer = function useEnhancedReducer(reducer, startingState) {
    var stateRef = useRef(startingState);

    var _useReducer = useReducer(reducer, startingState),
        _useReducer2 = _slicedToArray(_useReducer, 2),
        state = _useReducer2[0],
        realDispatch = _useReducer2[1];

    useEffect(function () {
      stateRef.current = state;
    }, [state]);
    var dispatchWithPromise = usePromisifiedDispatch(realDispatch, state);
    var outerDispatch = useMemo(function () {
      var _dispatch = function dispatch() {
        throw new Error("Dispatching while constructing your middleware is not allowed. " + "Other middleware would not be applied to this dispatch.");
      }; // closure here around dispatch allows us to change it after middleware is constructed


      var middlewareAPI = {
        getState: function getState() {
          return stateRef.current;
        },
        dispatch: function dispatch(action) {
          return _dispatch(action);
        }
      };
      var chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose(chain)(dispatchWithPromise);
      return _dispatch;
    }, [dispatchWithPromise]);
    return [state, outerDispatch];
  };

  return useEnhancedReducer;
}

var compose = function compose(fns) {
  return function (initial) {
    return fns.reduceRight(function (v, f) {
      return f(v);
    }, initial);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWFjdC1pbnRlZ3JhdGlvbi9wcm92aWRlci9taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbInVzZVJlZHVjZXIiLCJ1c2VNZW1vIiwidXNlUmVmIiwidXNlRWZmZWN0IiwidXNlUHJvbWlzaWZpZWREaXNwYXRjaCIsImNyZWF0ZUVuaGFuY2VkUmVkdWNlckhvb2siLCJtaWRkbGV3YXJlcyIsInVzZUVuaGFuY2VkUmVkdWNlciIsInJlZHVjZXIiLCJzdGFydGluZ1N0YXRlIiwic3RhdGVSZWYiLCJzdGF0ZSIsInJlYWxEaXNwYXRjaCIsImN1cnJlbnQiLCJkaXNwYXRjaFdpdGhQcm9taXNlIiwib3V0ZXJEaXNwYXRjaCIsImRpc3BhdGNoIiwiRXJyb3IiLCJtaWRkbGV3YXJlQVBJIiwiZ2V0U3RhdGUiLCJhY3Rpb24iLCJjaGFpbiIsIm1hcCIsIm1pZGRsZXdhcmUiLCJjb21wb3NlIiwiZm5zIiwiaW5pdGlhbCIsInJlZHVjZVJpZ2h0IiwidiIsImYiXSwibWFwcGluZ3MiOiI7QUFBQSxTQUFTQSxVQUFULEVBQXFCQyxPQUFyQixFQUE4QkMsTUFBOUIsRUFBbURDLFNBQW5ELFFBQW9FLE9BQXBFO0FBR0EsT0FBT0Msc0JBQVAsTUFBbUMsMEJBQW5DLEMsQ0FFQTs7QUFDQTs7QUFDQSxlQUFlLFNBQVNDLHlCQUFULEdBRWI7QUFBQSxvQ0FER0MsV0FDSDtBQURHQSxJQUFBQSxXQUNIO0FBQUE7O0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixDQUN6QkMsT0FEeUIsRUFFekJDLGFBRnlCLEVBTXRCO0FBQ0gsUUFBTUMsUUFBUSxHQUFHUixNQUFNLENBQUNPLGFBQUQsQ0FBdkI7O0FBREcsc0JBRTJCVCxVQUFVLENBQUNRLE9BQUQsRUFBVUMsYUFBVixDQUZyQztBQUFBO0FBQUEsUUFFSUUsS0FGSjtBQUFBLFFBRVdDLFlBRlg7O0FBSUhULElBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ2RPLE1BQUFBLFFBQVEsQ0FBQ0csT0FBVCxHQUFtQkYsS0FBbkI7QUFDRCxLQUZRLEVBRU4sQ0FBQ0EsS0FBRCxDQUZNLENBQVQ7QUFJQSxRQUFNRyxtQkFBbUIsR0FBR1Ysc0JBQXNCLENBQUNRLFlBQUQsRUFBZUQsS0FBZixDQUFsRDtBQUVBLFFBQU1JLGFBQWEsR0FBR2QsT0FBTyxDQUFDLFlBQU07QUFDbEMsVUFBSWUsU0FBcUIsR0FBRyxvQkFBTTtBQUNoQyxjQUFNLElBQUlDLEtBQUosQ0FDSiw2SEFESSxDQUFOO0FBSUQsT0FMRCxDQURrQyxDQU9sQzs7O0FBQ0EsVUFBTUMsYUFBYSxHQUFHO0FBQ3BCQyxRQUFBQSxRQUFRLEVBQUU7QUFBQSxpQkFBTVQsUUFBUSxDQUFDRyxPQUFmO0FBQUEsU0FEVTtBQUVwQkcsUUFBQUEsUUFBUSxFQUFFLGtCQUFDSSxNQUFEO0FBQUEsaUJBQW9DSixTQUFRLENBQUNJLE1BQUQsQ0FBNUM7QUFBQTtBQUZVLE9BQXRCO0FBSUEsVUFBTUMsS0FBSyxHQUFHZixXQUFXLENBQUNnQixHQUFaLENBQWdCLFVBQUFDLFVBQVU7QUFBQSxlQUFJQSxVQUFVLENBQUNMLGFBQUQsQ0FBZDtBQUFBLE9BQTFCLENBQWQ7QUFDQUYsTUFBQUEsU0FBUSxHQUFHUSxPQUFPLENBQUNILEtBQUQsQ0FBUCxDQUFlUCxtQkFBZixDQUFYO0FBQ0EsYUFBT0UsU0FBUDtBQUNELEtBZjRCLEVBZTFCLENBQUNGLG1CQUFELENBZjBCLENBQTdCO0FBZ0JBLFdBQU8sQ0FBQ0gsS0FBRCxFQUFRSSxhQUFSLENBQVA7QUFDRCxHQWpDRDs7QUFrQ0EsU0FBT1Isa0JBQVA7QUFDRDs7QUFFRCxJQUFNaUIsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBQ0MsR0FBRDtBQUFBLFNBQXFCLFVBQUNDLE9BQUQ7QUFBQSxXQUNuQ0QsR0FBRyxDQUFDRSxXQUFKLENBQWdCLFVBQUNDLENBQUQsRUFBSUMsQ0FBSjtBQUFBLGFBQVVBLENBQUMsQ0FBQ0QsQ0FBRCxDQUFYO0FBQUEsS0FBaEIsRUFBZ0NGLE9BQWhDLENBRG1DO0FBQUEsR0FBckI7QUFBQSxDQUFoQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZU1lbW8sIHVzZVJlZiwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1pZGRsZXdhcmUsIERpc3BhdGNoIH0gZnJvbSAnfi90eXBlcyc7XG5cbmltcG9ydCB1c2VQcm9taXNpZmllZERpc3BhdGNoIGZyb20gJy4vdXNlUHJvbWlzaWZpZWREaXNwYXRjaCc7XG5cbi8vIFRPRE86IHJlbGVhc2UgYXMgb3duIGxpYnJhcnk/XG4vKiogUmVkdXgtbWlkZGxld2FyZSBjb21wYXRpYmxlIGludGVncmF0aW9uIGZvciB1c2VSZWR1Y2VyKCkgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUVuaGFuY2VkUmVkdWNlckhvb2soXG4gIC4uLm1pZGRsZXdhcmVzOiBNaWRkbGV3YXJlW11cbikge1xuICBjb25zdCB1c2VFbmhhbmNlZFJlZHVjZXIgPSA8UiBleHRlbmRzIFJlYWN0LlJlZHVjZXI8YW55LCBhbnk+PihcbiAgICByZWR1Y2VyOiBSLFxuICAgIHN0YXJ0aW5nU3RhdGU6IFJlYWN0LlJlZHVjZXJTdGF0ZTxSPixcbiAgKTogW1xuICAgIFJlYWN0LlJlZHVjZXJTdGF0ZTxSPixcbiAgICAodmFsdWU6IFJlYWN0LlJlZHVjZXJBY3Rpb248Uj4pID0+IFByb21pc2U8YW55PixcbiAgXSA9PiB7XG4gICAgY29uc3Qgc3RhdGVSZWYgPSB1c2VSZWYoc3RhcnRpbmdTdGF0ZSk7XG4gICAgY29uc3QgW3N0YXRlLCByZWFsRGlzcGF0Y2hdID0gdXNlUmVkdWNlcihyZWR1Y2VyLCBzdGFydGluZ1N0YXRlKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBzdGF0ZVJlZi5jdXJyZW50ID0gc3RhdGU7XG4gICAgfSwgW3N0YXRlXSk7XG5cbiAgICBjb25zdCBkaXNwYXRjaFdpdGhQcm9taXNlID0gdXNlUHJvbWlzaWZpZWREaXNwYXRjaChyZWFsRGlzcGF0Y2gsIHN0YXRlKTtcblxuICAgIGNvbnN0IG91dGVyRGlzcGF0Y2ggPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgIGxldCBkaXNwYXRjaDogRGlzcGF0Y2g8Uj4gPSAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gYCArXG4gICAgICAgICAgICBgT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLmAsXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgICAgLy8gY2xvc3VyZSBoZXJlIGFyb3VuZCBkaXNwYXRjaCBhbGxvd3MgdXMgdG8gY2hhbmdlIGl0IGFmdGVyIG1pZGRsZXdhcmUgaXMgY29uc3RydWN0ZWRcbiAgICAgIGNvbnN0IG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiAoKSA9PiBzdGF0ZVJlZi5jdXJyZW50LFxuICAgICAgICBkaXNwYXRjaDogKGFjdGlvbjogUmVhY3QuUmVkdWNlckFjdGlvbjxSPikgPT4gZGlzcGF0Y2goYWN0aW9uKSxcbiAgICAgIH07XG4gICAgICBjb25zdCBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChtaWRkbGV3YXJlID0+IG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSkpO1xuICAgICAgZGlzcGF0Y2ggPSBjb21wb3NlKGNoYWluKShkaXNwYXRjaFdpdGhQcm9taXNlKTtcbiAgICAgIHJldHVybiBkaXNwYXRjaDtcbiAgICB9LCBbZGlzcGF0Y2hXaXRoUHJvbWlzZV0pO1xuICAgIHJldHVybiBbc3RhdGUsIG91dGVyRGlzcGF0Y2hdO1xuICB9O1xuICByZXR1cm4gdXNlRW5oYW5jZWRSZWR1Y2VyO1xufVxuXG5jb25zdCBjb21wb3NlID0gKGZuczogRnVuY3Rpb25bXSkgPT4gKGluaXRpYWw6IGFueSkgPT5cbiAgZm5zLnJlZHVjZVJpZ2h0KCh2LCBmKSA9PiBmKHYpLCBpbml0aWFsKTtcbiJdfQ==