import _jsx from "@babel/runtime/helpers/esm/jsx";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import React, { useEffect } from 'react';
import { StateContext, DispatchContext } from "../context";
import masterReducer, { initialState as defaultState } from "../../state/reducer";
import NetworkManager from "../../state/NetworkManager";
import SubscriptionManager from "../../state/SubscriptionManager";
import PollingSubscription from "../../state/PollingSubscription";
import createEnhancedReducerHook from './middleware';

/** Controller managing state of the REST cache and coordinating network requests. */
export default function CacheProvider(_ref) {
  var children = _ref.children,
      managers = _ref.managers,
      initialState = _ref.initialState;
  var useEnhancedReducer = createEnhancedReducerHook.apply(void 0, _toConsumableArray(managers.map(function (manager) {
    return manager.getMiddleware();
  })));

  var _useEnhancedReducer = useEnhancedReducer(masterReducer, initialState),
      _useEnhancedReducer2 = _slicedToArray(_useEnhancedReducer, 2),
      state = _useEnhancedReducer2[0],
      dispatch = _useEnhancedReducer2[1]; // if we change out the manager we need to make sure it has no hanging async


  useEffect(function () {
    return function () {
      for (var i = 0; i < managers.length; ++i) {
        managers[i].cleanup();
      }
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, managers);
  return _jsx(DispatchContext.Provider, {
    value: dispatch
  }, void 0, _jsx(StateContext.Provider, {
    value: state
  }, void 0, children));
}
CacheProvider.defaultProps = {
  managers: [new NetworkManager(), new SubscriptionManager(PollingSubscription)],
  initialState: defaultState
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWFjdC1pbnRlZ3JhdGlvbi9wcm92aWRlci9DYWNoZVByb3ZpZGVyLnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUVmZmVjdCIsIlN0YXRlQ29udGV4dCIsIkRpc3BhdGNoQ29udGV4dCIsIm1hc3RlclJlZHVjZXIiLCJpbml0aWFsU3RhdGUiLCJkZWZhdWx0U3RhdGUiLCJOZXR3b3JrTWFuYWdlciIsIlN1YnNjcmlwdGlvbk1hbmFnZXIiLCJQb2xsaW5nU3Vic2NyaXB0aW9uIiwiY3JlYXRlRW5oYW5jZWRSZWR1Y2VySG9vayIsIkNhY2hlUHJvdmlkZXIiLCJjaGlsZHJlbiIsIm1hbmFnZXJzIiwidXNlRW5oYW5jZWRSZWR1Y2VyIiwibWFwIiwibWFuYWdlciIsImdldE1pZGRsZXdhcmUiLCJzdGF0ZSIsImRpc3BhdGNoIiwiaSIsImxlbmd0aCIsImNsZWFudXAiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7OztBQUFBLE9BQU9BLEtBQVAsSUFBMkJDLFNBQTNCLFFBQTRDLE9BQTVDO0FBQ0EsU0FBU0MsWUFBVCxFQUF1QkMsZUFBdkIsUUFBOEMsWUFBOUM7QUFDQSxPQUFPQyxhQUFQLElBQXdCQyxZQUFZLElBQUlDLFlBQXhDLFFBQTRELHFCQUE1RDtBQUNBLE9BQU9DLGNBQVAsTUFBMkIsNEJBQTNCO0FBQ0EsT0FBT0MsbUJBQVAsTUFBZ0MsaUNBQWhDO0FBQ0EsT0FBT0MsbUJBQVAsTUFBZ0MsaUNBQWhDO0FBRUEsT0FBT0MseUJBQVAsTUFBc0MsY0FBdEM7O0FBUUE7QUFDQSxlQUFlLFNBQVNDLGFBQVQsT0FJRztBQUFBLE1BSGhCQyxRQUdnQixRQUhoQkEsUUFHZ0I7QUFBQSxNQUZoQkMsUUFFZ0IsUUFGaEJBLFFBRWdCO0FBQUEsTUFEaEJSLFlBQ2dCLFFBRGhCQSxZQUNnQjtBQUNoQixNQUFNUyxrQkFBa0IsR0FBR0oseUJBQXlCLE1BQXpCLDRCQUN0QkcsUUFBUSxDQUFDRSxHQUFULENBQWEsVUFBQUMsT0FBTztBQUFBLFdBQUlBLE9BQU8sQ0FBQ0MsYUFBUixFQUFKO0FBQUEsR0FBcEIsQ0FEc0IsRUFBM0I7O0FBRGdCLDRCQUlVSCxrQkFBa0IsQ0FBQ1YsYUFBRCxFQUFnQkMsWUFBaEIsQ0FKNUI7QUFBQTtBQUFBLE1BSVRhLEtBSlM7QUFBQSxNQUlGQyxRQUpFLDRCQU1oQjs7O0FBQ0FsQixFQUFBQSxTQUFTLENBQUMsWUFBTTtBQUNkLFdBQU8sWUFBTTtBQUNYLFdBQUssSUFBSW1CLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdQLFFBQVEsQ0FBQ1EsTUFBN0IsRUFBcUMsRUFBRUQsQ0FBdkMsRUFBMEM7QUFDeENQLFFBQUFBLFFBQVEsQ0FBQ08sQ0FBRCxDQUFSLENBQVlFLE9BQVo7QUFDRDtBQUNGLEtBSkQsQ0FEYyxDQU1kO0FBQ0QsR0FQUSxFQU9OVCxRQVBNLENBQVQ7QUFTQSxTQUNFLEtBQUMsZUFBRCxDQUFpQixRQUFqQjtBQUEwQixJQUFBLEtBQUssRUFBRU07QUFBakMsYUFDRSxLQUFDLFlBQUQsQ0FBYyxRQUFkO0FBQXVCLElBQUEsS0FBSyxFQUFFRDtBQUE5QixhQUFzQ04sUUFBdEMsQ0FERixDQURGO0FBS0Q7QUFDREQsYUFBYSxDQUFDWSxZQUFkLEdBQTZCO0FBQzNCVixFQUFBQSxRQUFRLEVBQUUsQ0FDUixJQUFJTixjQUFKLEVBRFEsRUFFUixJQUFJQyxtQkFBSixDQUF3QkMsbUJBQXhCLENBRlEsQ0FEaUI7QUFLM0JKLEVBQUFBLFlBQVksRUFBRUM7QUFMYSxDQUE3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN0YXRlQ29udGV4dCwgRGlzcGF0Y2hDb250ZXh0IH0gZnJvbSAnfi9yZWFjdC1pbnRlZ3JhdGlvbi9jb250ZXh0JztcbmltcG9ydCBtYXN0ZXJSZWR1Y2VyLCB7IGluaXRpYWxTdGF0ZSBhcyBkZWZhdWx0U3RhdGUgfSBmcm9tICd+L3N0YXRlL3JlZHVjZXInO1xuaW1wb3J0IE5ldHdvcmtNYW5hZ2VyIGZyb20gJ34vc3RhdGUvTmV0d29ya01hbmFnZXInO1xuaW1wb3J0IFN1YnNjcmlwdGlvbk1hbmFnZXIgZnJvbSAnfi9zdGF0ZS9TdWJzY3JpcHRpb25NYW5hZ2VyJztcbmltcG9ydCBQb2xsaW5nU3Vic2NyaXB0aW9uIGZyb20gJ34vc3RhdGUvUG9sbGluZ1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBTdGF0ZSwgTWFuYWdlciB9IGZyb20gJ34vdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUVuaGFuY2VkUmVkdWNlckhvb2sgZnJvbSAnLi9taWRkbGV3YXJlJztcblxuaW50ZXJmYWNlIFByb3ZpZGVyUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xuICBtYW5hZ2VyczogTWFuYWdlcltdO1xuICBpbml0aWFsU3RhdGU6IFN0YXRlPHVua25vd24+O1xufVxuXG4vKiogQ29udHJvbGxlciBtYW5hZ2luZyBzdGF0ZSBvZiB0aGUgUkVTVCBjYWNoZSBhbmQgY29vcmRpbmF0aW5nIG5ldHdvcmsgcmVxdWVzdHMuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDYWNoZVByb3ZpZGVyKHtcbiAgY2hpbGRyZW4sXG4gIG1hbmFnZXJzLFxuICBpbml0aWFsU3RhdGUsXG59OiBQcm92aWRlclByb3BzKSB7XG4gIGNvbnN0IHVzZUVuaGFuY2VkUmVkdWNlciA9IGNyZWF0ZUVuaGFuY2VkUmVkdWNlckhvb2soXG4gICAgLi4ubWFuYWdlcnMubWFwKG1hbmFnZXIgPT4gbWFuYWdlci5nZXRNaWRkbGV3YXJlKCkpLFxuICApO1xuICBjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IHVzZUVuaGFuY2VkUmVkdWNlcihtYXN0ZXJSZWR1Y2VyLCBpbml0aWFsU3RhdGUpO1xuXG4gIC8vIGlmIHdlIGNoYW5nZSBvdXQgdGhlIG1hbmFnZXIgd2UgbmVlZCB0byBtYWtlIHN1cmUgaXQgaGFzIG5vIGhhbmdpbmcgYXN5bmNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYW5hZ2Vycy5sZW5ndGg7ICsraSkge1xuICAgICAgICBtYW5hZ2Vyc1tpXS5jbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIG1hbmFnZXJzKTtcblxuICByZXR1cm4gKFxuICAgIDxEaXNwYXRjaENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2Rpc3BhdGNofT5cbiAgICAgIDxTdGF0ZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3N0YXRlfT57Y2hpbGRyZW59PC9TdGF0ZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgPC9EaXNwYXRjaENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG5DYWNoZVByb3ZpZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgbWFuYWdlcnM6IFtcbiAgICBuZXcgTmV0d29ya01hbmFnZXIoKSxcbiAgICBuZXcgU3Vic2NyaXB0aW9uTWFuYWdlcihQb2xsaW5nU3Vic2NyaXB0aW9uKSxcbiAgXSxcbiAgaW5pdGlhbFN0YXRlOiBkZWZhdWx0U3RhdGUsXG59O1xuIl19