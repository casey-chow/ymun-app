import { useRef, useCallback, useEffect } from 'react';
export default function usePromisifiedDispatch(dispatch, state) {
  var dispatchPromiseRef = useRef(null);
  useEffect(function () {
    if (dispatchPromiseRef.current) {
      dispatchPromiseRef.current.resolve();
      dispatchPromiseRef.current = null;
    }
  }, [state]);
  return useCallback(function (action) {
    if (!dispatchPromiseRef.current) {
      dispatchPromiseRef.current = NewPromiseHolder();
    } // we use the promise before dispatch so we know it will be resolved
    // however that can also make the ref clear, so we need to make sure we have to promise before
    // dispatching so we can return it even if the ref changes.


    var promise = dispatchPromiseRef.current.promise;
    dispatch(action);
    return promise;
  }, [dispatch]);
}

function NewPromiseHolder() {
  // any so we can build it
  var promiseHolder = {};
  promiseHolder.promise = new Promise(function (resolve) {
    promiseHolder.resolve = resolve;
  });
  return promiseHolder;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWFjdC1pbnRlZ3JhdGlvbi9wcm92aWRlci91c2VQcm9taXNpZmllZERpc3BhdGNoLnRzIl0sIm5hbWVzIjpbInVzZVJlZiIsInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0IiwidXNlUHJvbWlzaWZpZWREaXNwYXRjaCIsImRpc3BhdGNoIiwic3RhdGUiLCJkaXNwYXRjaFByb21pc2VSZWYiLCJjdXJyZW50IiwicmVzb2x2ZSIsImFjdGlvbiIsIk5ld1Byb21pc2VIb2xkZXIiLCJwcm9taXNlIiwicHJvbWlzZUhvbGRlciIsIlByb21pc2UiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLE1BQVQsRUFBaUJDLFdBQWpCLEVBQThCQyxTQUE5QixRQUErQyxPQUEvQztBQUlBLGVBQWUsU0FBU0Msc0JBQVQsQ0FHYkMsUUFIYSxFQUliQyxLQUphLEVBS2I7QUFDQSxNQUFNQyxrQkFBa0IsR0FBR04sTUFBTSxDQUF1QixJQUF2QixDQUFqQztBQUNBRSxFQUFBQSxTQUFTLENBQUMsWUFBTTtBQUNkLFFBQUlJLGtCQUFrQixDQUFDQyxPQUF2QixFQUFnQztBQUM5QkQsTUFBQUEsa0JBQWtCLENBQUNDLE9BQW5CLENBQTJCQyxPQUEzQjtBQUNBRixNQUFBQSxrQkFBa0IsQ0FBQ0MsT0FBbkIsR0FBNkIsSUFBN0I7QUFDRDtBQUNGLEdBTFEsRUFLTixDQUFDRixLQUFELENBTE0sQ0FBVDtBQU9BLFNBQU9KLFdBQVcsQ0FDaEIsVUFBQ1EsTUFBRCxFQUFvQztBQUNsQyxRQUFJLENBQUNILGtCQUFrQixDQUFDQyxPQUF4QixFQUFpQztBQUMvQkQsTUFBQUEsa0JBQWtCLENBQUNDLE9BQW5CLEdBQTZCRyxnQkFBZ0IsRUFBN0M7QUFDRCxLQUhpQyxDQUlsQztBQUNBO0FBQ0E7OztBQUNBLFFBQU1DLE9BQU8sR0FBR0wsa0JBQWtCLENBQUNDLE9BQW5CLENBQTJCSSxPQUEzQztBQUNBUCxJQUFBQSxRQUFRLENBQUNLLE1BQUQsQ0FBUjtBQUNBLFdBQU9FLE9BQVA7QUFDRCxHQVhlLEVBWWhCLENBQUNQLFFBQUQsQ0FaZ0IsQ0FBbEI7QUFjRDs7QUFFRCxTQUFTTSxnQkFBVCxHQUEyQztBQUN6QztBQUNBLE1BQU1FLGFBQWtCLEdBQUcsRUFBM0I7QUFDQUEsRUFBQUEsYUFBYSxDQUFDRCxPQUFkLEdBQXdCLElBQUlFLE9BQUosQ0FBWSxVQUFBTCxPQUFPLEVBQUk7QUFDN0NJLElBQUFBLGFBQWEsQ0FBQ0osT0FBZCxHQUF3QkEsT0FBeEI7QUFDRCxHQUZ1QixDQUF4QjtBQUdBLFNBQU9JLGFBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVJlZiwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxudHlwZSBQcm9taXNlSG9sZGVyID0geyBwcm9taXNlOiBQcm9taXNlPHZvaWQ+OyByZXNvbHZlOiAoKSA9PiB2b2lkIH07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVByb21pc2lmaWVkRGlzcGF0Y2g8XG4gIFIgZXh0ZW5kcyBSZWFjdC5SZWR1Y2VyPGFueSwgYW55PlxuPihcbiAgZGlzcGF0Y2g6IFJlYWN0LkRpc3BhdGNoPFJlYWN0LlJlZHVjZXJBY3Rpb248Uj4+LFxuICBzdGF0ZTogUmVhY3QuUmVkdWNlclN0YXRlPFI+LFxuKSB7XG4gIGNvbnN0IGRpc3BhdGNoUHJvbWlzZVJlZiA9IHVzZVJlZjxudWxsIHwgUHJvbWlzZUhvbGRlcj4obnVsbCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRpc3BhdGNoUHJvbWlzZVJlZi5jdXJyZW50KSB7XG4gICAgICBkaXNwYXRjaFByb21pc2VSZWYuY3VycmVudC5yZXNvbHZlKCk7XG4gICAgICBkaXNwYXRjaFByb21pc2VSZWYuY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9LCBbc3RhdGVdKTtcblxuICByZXR1cm4gdXNlQ2FsbGJhY2soXG4gICAgKGFjdGlvbjogUmVhY3QuUmVkdWNlckFjdGlvbjxSPikgPT4ge1xuICAgICAgaWYgKCFkaXNwYXRjaFByb21pc2VSZWYuY3VycmVudCkge1xuICAgICAgICBkaXNwYXRjaFByb21pc2VSZWYuY3VycmVudCA9IE5ld1Byb21pc2VIb2xkZXIoKTtcbiAgICAgIH1cbiAgICAgIC8vIHdlIHVzZSB0aGUgcHJvbWlzZSBiZWZvcmUgZGlzcGF0Y2ggc28gd2Uga25vdyBpdCB3aWxsIGJlIHJlc29sdmVkXG4gICAgICAvLyBob3dldmVyIHRoYXQgY2FuIGFsc28gbWFrZSB0aGUgcmVmIGNsZWFyLCBzbyB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB3ZSBoYXZlIHRvIHByb21pc2UgYmVmb3JlXG4gICAgICAvLyBkaXNwYXRjaGluZyBzbyB3ZSBjYW4gcmV0dXJuIGl0IGV2ZW4gaWYgdGhlIHJlZiBjaGFuZ2VzLlxuICAgICAgY29uc3QgcHJvbWlzZSA9IGRpc3BhdGNoUHJvbWlzZVJlZi5jdXJyZW50LnByb21pc2U7XG4gICAgICBkaXNwYXRjaChhY3Rpb24pO1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfSxcbiAgICBbZGlzcGF0Y2hdLFxuICApO1xufVxuXG5mdW5jdGlvbiBOZXdQcm9taXNlSG9sZGVyKCk6IFByb21pc2VIb2xkZXIge1xuICAvLyBhbnkgc28gd2UgY2FuIGJ1aWxkIGl0XG4gIGNvbnN0IHByb21pc2VIb2xkZXI6IGFueSA9IHt9O1xuICBwcm9taXNlSG9sZGVyLnByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBwcm9taXNlSG9sZGVyLnJlc29sdmUgPSByZXNvbHZlO1xuICB9KTtcbiAgcmV0dXJuIHByb21pc2VIb2xkZXI7XG59XG4iXX0=