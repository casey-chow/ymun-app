import { useMemo } from 'react';
import useFetcher from './useFetcher';
import useMeta from './useMeta';
/** Returns whether the data at this url is fresh or stale */

function useExpiresAt(fetchShape, params) {
  var meta = useMeta(fetchShape, params);

  if (!meta) {
    return 0;
  }

  return meta.expiresAt;
}
/** Request a resource if it is not in cache. */


export default function useRetrieve(fetchShape, params) {
  var fetch = useFetcher(fetchShape, true);
  var expiresAt = useExpiresAt(fetchShape, params);
  return useMemo(function () {
    if (Date.now() <= expiresAt) return; // null params mean don't do anything

    if (!params) return;
    return fetch(params); // we need to check against serialized params, since params can change frequently
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [expiresAt, fetch, params && fetchShape.getFetchKey(params)]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWFjdC1pbnRlZ3JhdGlvbi9ob29rcy91c2VSZXRyaWV2ZS50cyJdLCJuYW1lcyI6WyJ1c2VNZW1vIiwidXNlRmV0Y2hlciIsInVzZU1ldGEiLCJ1c2VFeHBpcmVzQXQiLCJmZXRjaFNoYXBlIiwicGFyYW1zIiwibWV0YSIsImV4cGlyZXNBdCIsInVzZVJldHJpZXZlIiwiZmV0Y2giLCJEYXRlIiwibm93IiwiZ2V0RmV0Y2hLZXkiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLE9BQVQsUUFBd0IsT0FBeEI7QUFHQSxPQUFPQyxVQUFQLE1BQXVCLGNBQXZCO0FBQ0EsT0FBT0MsT0FBUCxNQUFvQixXQUFwQjtBQUVBOztBQUNBLFNBQVNDLFlBQVQsQ0FDRUMsVUFERixFQUVFQyxNQUZGLEVBR1U7QUFDUixNQUFNQyxJQUFJLEdBQUdKLE9BQU8sQ0FBQ0UsVUFBRCxFQUFhQyxNQUFiLENBQXBCOztBQUNBLE1BQUksQ0FBQ0MsSUFBTCxFQUFXO0FBQ1QsV0FBTyxDQUFQO0FBQ0Q7O0FBQ0QsU0FBT0EsSUFBSSxDQUFDQyxTQUFaO0FBQ0Q7QUFFRDs7O0FBQ0EsZUFBZSxTQUFTQyxXQUFULENBR2JKLFVBSGEsRUFHcUJDLE1BSHJCLEVBRzRDO0FBQ3pELE1BQU1JLEtBQUssR0FBR1IsVUFBVSxDQUFDRyxVQUFELEVBQWEsSUFBYixDQUF4QjtBQUNBLE1BQU1HLFNBQVMsR0FBR0osWUFBWSxDQUFDQyxVQUFELEVBQWFDLE1BQWIsQ0FBOUI7QUFFQSxTQUFPTCxPQUFPLENBQUMsWUFBTTtBQUNuQixRQUFJVSxJQUFJLENBQUNDLEdBQUwsTUFBY0osU0FBbEIsRUFBNkIsT0FEVixDQUVuQjs7QUFDQSxRQUFJLENBQUNGLE1BQUwsRUFBYTtBQUNiLFdBQU9JLEtBQUssQ0FBQ0osTUFBRCxDQUFaLENBSm1CLENBS25CO0FBQ0E7QUFDRCxHQVBhLEVBT1gsQ0FBQ0UsU0FBRCxFQUFZRSxLQUFaLEVBQW1CSixNQUFNLElBQUlELFVBQVUsQ0FBQ1EsV0FBWCxDQUF1QlAsTUFBdkIsQ0FBN0IsQ0FQVyxDQUFkO0FBUUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBSZWFkU2hhcGUsIFNjaGVtYSB9IGZyb20gJ34vcmVzb3VyY2UnO1xuaW1wb3J0IHVzZUZldGNoZXIgZnJvbSAnLi91c2VGZXRjaGVyJztcbmltcG9ydCB1c2VNZXRhIGZyb20gJy4vdXNlTWV0YSc7XG5cbi8qKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGRhdGEgYXQgdGhpcyB1cmwgaXMgZnJlc2ggb3Igc3RhbGUgKi9cbmZ1bmN0aW9uIHVzZUV4cGlyZXNBdDxQYXJhbXMgZXh0ZW5kcyBSZWFkb25seTxvYmplY3Q+LCBTIGV4dGVuZHMgU2NoZW1hPihcbiAgZmV0Y2hTaGFwZTogUmVhZFNoYXBlPFMsIFBhcmFtcz4sXG4gIHBhcmFtczogUGFyYW1zIHwgbnVsbCxcbik6IG51bWJlciB7XG4gIGNvbnN0IG1ldGEgPSB1c2VNZXRhKGZldGNoU2hhcGUsIHBhcmFtcyk7XG4gIGlmICghbWV0YSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBtZXRhLmV4cGlyZXNBdDtcbn1cblxuLyoqIFJlcXVlc3QgYSByZXNvdXJjZSBpZiBpdCBpcyBub3QgaW4gY2FjaGUuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VSZXRyaWV2ZTxcbiAgUGFyYW1zIGV4dGVuZHMgUmVhZG9ubHk8b2JqZWN0PixcbiAgUyBleHRlbmRzIFNjaGVtYVxuPihmZXRjaFNoYXBlOiBSZWFkU2hhcGU8UywgUGFyYW1zPiwgcGFyYW1zOiBQYXJhbXMgfCBudWxsKSB7XG4gIGNvbnN0IGZldGNoID0gdXNlRmV0Y2hlcihmZXRjaFNoYXBlLCB0cnVlKTtcbiAgY29uc3QgZXhwaXJlc0F0ID0gdXNlRXhwaXJlc0F0KGZldGNoU2hhcGUsIHBhcmFtcyk7XG5cbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChEYXRlLm5vdygpIDw9IGV4cGlyZXNBdCkgcmV0dXJuO1xuICAgIC8vIG51bGwgcGFyYW1zIG1lYW4gZG9uJ3QgZG8gYW55dGhpbmdcbiAgICBpZiAoIXBhcmFtcykgcmV0dXJuO1xuICAgIHJldHVybiBmZXRjaChwYXJhbXMpO1xuICAgIC8vIHdlIG5lZWQgdG8gY2hlY2sgYWdhaW5zdCBzZXJpYWxpemVkIHBhcmFtcywgc2luY2UgcGFyYW1zIGNhbiBjaGFuZ2UgZnJlcXVlbnRseVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW2V4cGlyZXNBdCwgZmV0Y2gsIHBhcmFtcyAmJiBmZXRjaFNoYXBlLmdldEZldGNoS2V5KHBhcmFtcyldKTtcbn1cbiJdfQ==