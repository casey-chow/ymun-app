import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useContext, useRef, useCallback } from 'react';
import { isDeleteShape } from "../../resource";
import { DispatchContext } from "../context";
var SHAPE_TYPE_TO_RESPONSE_TYPE = {
  read: 'rest-hooks/receive',
  mutate: 'rest-hooks/rpc',
  "delete": 'rest-hooks/purge'
};

/** Build an imperative dispatcher to issue network requests. */
export default function useFetcher(fetchShape) {
  var throttle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var dispatch = useContext(DispatchContext); // we just want the current values when we dispatch, so
  // box the shape in a ref to make react-hooks/exhaustive-deps happy

  var shapeRef = useRef(fetchShape);
  shapeRef.current = fetchShape;
  var fetchDispatcher = useCallback(function (params, body, updateParams) {
    var _shapeRef$current = shapeRef.current,
        fetch = _shapeRef$current.fetch,
        schema = _shapeRef$current.schema,
        type = _shapeRef$current.type,
        getFetchKey = _shapeRef$current.getFetchKey,
        options = _shapeRef$current.options;
    var responseType = SHAPE_TYPE_TO_RESPONSE_TYPE[type];
    var key = getFetchKey(params);
    var identifier = isDeleteShape(shapeRef.current) ? shapeRef.current.schema.getId(params) : key;
    var resolve = 0;
    var reject = 0;
    var promise = new Promise(function (a, b) {
      resolve = a;
      reject = b;
    });
    var meta = {
      schema: schema,
      responseType: responseType,
      url: identifier,
      throttle: throttle,
      options: options,
      resolve: resolve,
      reject: reject
    };

    if (updateParams) {
      meta.updaters = updateParams.reduce(function (accumulator, _ref) {
        var _ref2 = _slicedToArray(_ref, 3),
            toShape = _ref2[0],
            toParams = _ref2[1],
            updateFn = _ref2[2];

        return _objectSpread(_defineProperty({}, toShape.getFetchKey(toParams), updateFn), accumulator);
      }, {});
    }

    dispatch({
      type: 'rest-hooks/fetch',
      payload: function payload() {
        return fetch(params, body);
      },
      meta: meta
    });
    return promise;
  }, [dispatch, throttle]); // any is due to the ternary that we don't want to deal with in our implementation

  return fetchDispatcher;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWFjdC1pbnRlZ3JhdGlvbi9ob29rcy91c2VGZXRjaGVyLnRzIl0sIm5hbWVzIjpbInVzZUNvbnRleHQiLCJ1c2VSZWYiLCJ1c2VDYWxsYmFjayIsImlzRGVsZXRlU2hhcGUiLCJEaXNwYXRjaENvbnRleHQiLCJTSEFQRV9UWVBFX1RPX1JFU1BPTlNFX1RZUEUiLCJyZWFkIiwibXV0YXRlIiwidXNlRmV0Y2hlciIsImZldGNoU2hhcGUiLCJ0aHJvdHRsZSIsImRpc3BhdGNoIiwic2hhcGVSZWYiLCJjdXJyZW50IiwiZmV0Y2hEaXNwYXRjaGVyIiwicGFyYW1zIiwiYm9keSIsInVwZGF0ZVBhcmFtcyIsImZldGNoIiwic2NoZW1hIiwidHlwZSIsImdldEZldGNoS2V5Iiwib3B0aW9ucyIsInJlc3BvbnNlVHlwZSIsImtleSIsImlkZW50aWZpZXIiLCJnZXRJZCIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9taXNlIiwiUHJvbWlzZSIsImEiLCJiIiwibWV0YSIsInVybCIsInVwZGF0ZXJzIiwicmVkdWNlIiwiYWNjdW11bGF0b3IiLCJ0b1NoYXBlIiwidG9QYXJhbXMiLCJ1cGRhdGVGbiIsInBheWxvYWQiXSwibWFwcGluZ3MiOiI7OztBQUFBLFNBQVNBLFVBQVQsRUFBcUJDLE1BQXJCLEVBQTZCQyxXQUE3QixRQUFnRCxPQUFoRDtBQUdBLFNBSUVDLGFBSkYsUUFRTyxnQkFSUDtBQVNBLFNBQVNDLGVBQVQsUUFBZ0MsWUFBaEM7QUFFQSxJQUFNQywyQkFHTCxHQUFHO0FBQ0ZDLEVBQUFBLElBQUksRUFBRSxvQkFESjtBQUVGQyxFQUFBQSxNQUFNLEVBQUUsZ0JBRk47QUFHRixZQUFRO0FBSE4sQ0FISjs7QUFrQkE7QUFDQSxlQUFlLFNBQVNDLFVBQVQsQ0FPYkMsVUFQYSxFQW9CTztBQUFBLE1BWnBCQyxRQVlvQix1RUFaVCxLQVlTO0FBQ3BCLE1BQU1DLFFBQVEsR0FBR1gsVUFBVSxDQUFDSSxlQUFELENBQTNCLENBRG9CLENBR3BCO0FBQ0E7O0FBQ0EsTUFBTVEsUUFBUSxHQUFHWCxNQUFNLENBQUNRLFVBQUQsQ0FBdkI7QUFDQUcsRUFBQUEsUUFBUSxDQUFDQyxPQUFULEdBQW1CSixVQUFuQjtBQUVBLE1BQU1LLGVBQWUsR0FBR1osV0FBVyxDQUNqQyxVQUNFYSxNQURGLEVBRUVDLElBRkYsRUFHRUMsWUFIRixFQVNLO0FBQUEsNEJBQ21ETCxRQUFRLENBQUNDLE9BRDVEO0FBQUEsUUFDS0ssS0FETCxxQkFDS0EsS0FETDtBQUFBLFFBQ1lDLE1BRFoscUJBQ1lBLE1BRFo7QUFBQSxRQUNvQkMsSUFEcEIscUJBQ29CQSxJQURwQjtBQUFBLFFBQzBCQyxXQUQxQixxQkFDMEJBLFdBRDFCO0FBQUEsUUFDdUNDLE9BRHZDLHFCQUN1Q0EsT0FEdkM7QUFFSCxRQUFNQyxZQUFZLEdBQUdsQiwyQkFBMkIsQ0FBQ2UsSUFBRCxDQUFoRDtBQUVBLFFBQU1JLEdBQUcsR0FBR0gsV0FBVyxDQUFDTixNQUFELENBQXZCO0FBQ0EsUUFBTVUsVUFBVSxHQUFHdEIsYUFBYSxDQUFDUyxRQUFRLENBQUNDLE9BQVYsQ0FBYixHQUNmRCxRQUFRLENBQUNDLE9BQVQsQ0FBaUJNLE1BQWpCLENBQXdCTyxLQUF4QixDQUE4QlgsTUFBOUIsQ0FEZSxHQUVmUyxHQUZKO0FBR0EsUUFBSUcsT0FBaUQsR0FBRyxDQUF4RDtBQUNBLFFBQUlDLE1BQThCLEdBQUcsQ0FBckM7QUFDQSxRQUFNQyxPQUFPLEdBQUcsSUFBSUMsT0FBSixDQUFpQixVQUFDQyxDQUFELEVBQUlDLENBQUosRUFBVTtBQUN4Q0wsTUFBQUEsT0FEd0MsR0FDcEJJLENBRG9CO0FBQy9CSCxNQUFBQSxNQUQrQixHQUNqQkksQ0FEaUI7QUFFMUMsS0FGZSxDQUFoQjtBQUdBLFFBQU1DLElBQXlCLEdBQUc7QUFDaENkLE1BQUFBLE1BQU0sRUFBTkEsTUFEZ0M7QUFFaENJLE1BQUFBLFlBQVksRUFBWkEsWUFGZ0M7QUFHaENXLE1BQUFBLEdBQUcsRUFBRVQsVUFIMkI7QUFJaENmLE1BQUFBLFFBQVEsRUFBUkEsUUFKZ0M7QUFLaENZLE1BQUFBLE9BQU8sRUFBUEEsT0FMZ0M7QUFNaENLLE1BQUFBLE9BQU8sRUFBUEEsT0FOZ0M7QUFPaENDLE1BQUFBLE1BQU0sRUFBTkE7QUFQZ0MsS0FBbEM7O0FBVUEsUUFBSVgsWUFBSixFQUFrQjtBQUNoQmdCLE1BQUFBLElBQUksQ0FBQ0UsUUFBTCxHQUFnQmxCLFlBQVksQ0FBQ21CLE1BQWIsQ0FDZCxVQUFDQyxXQUFEO0FBQUE7QUFBQSxZQUF1QkMsT0FBdkI7QUFBQSxZQUFnQ0MsUUFBaEM7QUFBQSxZQUEwQ0MsUUFBMUM7O0FBQUEsaURBQ0dGLE9BQU8sQ0FBQ2pCLFdBQVIsQ0FBb0JrQixRQUFwQixDQURILEVBQ21DQyxRQURuQyxHQUVLSCxXQUZMO0FBQUEsT0FEYyxFQUtkLEVBTGMsQ0FBaEI7QUFPRDs7QUFFRDFCLElBQUFBLFFBQVEsQ0FBQztBQUNQUyxNQUFBQSxJQUFJLEVBQUUsa0JBREM7QUFFUHFCLE1BQUFBLE9BQU8sRUFBRTtBQUFBLGVBQU12QixLQUFLLENBQUNILE1BQUQsRUFBU0MsSUFBVCxDQUFYO0FBQUEsT0FGRjtBQUdQaUIsTUFBQUEsSUFBSSxFQUFKQTtBQUhPLEtBQUQsQ0FBUjtBQUtBLFdBQU9KLE9BQVA7QUFDRCxHQWpEZ0MsRUFrRGpDLENBQUNsQixRQUFELEVBQVdELFFBQVgsQ0FsRGlDLENBQW5DLENBUm9CLENBNERwQjs7QUFDQSxTQUFPSSxlQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VSZWYsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBGZXRjaEFjdGlvbiwgVXBkYXRlRnVuY3Rpb24gfSBmcm9tICd+L3R5cGVzJztcbmltcG9ydCB7XG4gIEZldGNoU2hhcGUsXG4gIERlbGV0ZVNoYXBlLFxuICBTY2hlbWEsXG4gIGlzRGVsZXRlU2hhcGUsXG4gIFNjaGVtYUZyb21TaGFwZSxcbiAgUGFyYW1zRnJvbVNoYXBlLFxuICBCb2R5RnJvbVNoYXBlLFxufSBmcm9tICd+L3Jlc291cmNlJztcbmltcG9ydCB7IERpc3BhdGNoQ29udGV4dCB9IGZyb20gJ34vcmVhY3QtaW50ZWdyYXRpb24vY29udGV4dCc7XG5cbmNvbnN0IFNIQVBFX1RZUEVfVE9fUkVTUE9OU0VfVFlQRTogUmVjb3JkPFxuICBGZXRjaFNoYXBlPGFueSwgYW55LCBhbnk+Wyd0eXBlJ10sXG4gICdyZXN0LWhvb2tzL3JlY2VpdmUnIHwgJ3Jlc3QtaG9va3MvcnBjJyB8ICdyZXN0LWhvb2tzL3B1cmdlJ1xuPiA9IHtcbiAgcmVhZDogJ3Jlc3QtaG9va3MvcmVjZWl2ZScsXG4gIG11dGF0ZTogJ3Jlc3QtaG9va3MvcnBjJyxcbiAgZGVsZXRlOiAncmVzdC1ob29rcy9wdXJnZScsXG59O1xuXG50eXBlIE9wdGltaXN0aWNVcGRhdGVQYXJhbXM8XG4gIFNvdXJjZVNjaGVtYSBleHRlbmRzIFNjaGVtYSxcbiAgRGVzdFNoYXBlIGV4dGVuZHMgRmV0Y2hTaGFwZTxhbnksIGFueSwgYW55PlxuPiA9IFtcbiAgRGVzdFNoYXBlLFxuICBQYXJhbXNGcm9tU2hhcGU8RGVzdFNoYXBlPixcbiAgVXBkYXRlRnVuY3Rpb248U291cmNlU2NoZW1hLCBTY2hlbWFGcm9tU2hhcGU8RGVzdFNoYXBlPj4sXG5dO1xuXG4vKiogQnVpbGQgYW4gaW1wZXJhdGl2ZSBkaXNwYXRjaGVyIHRvIGlzc3VlIG5ldHdvcmsgcmVxdWVzdHMuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGZXRjaGVyPFxuICBTaGFwZSBleHRlbmRzIEZldGNoU2hhcGU8XG4gICAgU2NoZW1hLFxuICAgIFJlYWRvbmx5PG9iamVjdD4sXG4gICAgUmVhZG9ubHk8b2JqZWN0IHwgc3RyaW5nPiB8IHZvaWRcbiAgPlxuPihcbiAgZmV0Y2hTaGFwZTogU2hhcGUsXG4gIHRocm90dGxlID0gZmFsc2UsXG4pOiBTaGFwZSBleHRlbmRzIERlbGV0ZVNoYXBlPGFueSwgYW55LCBhbnk+XG4gID8gKHBhcmFtczogUGFyYW1zRnJvbVNoYXBlPFNoYXBlPiwgYm9keTogQm9keUZyb21TaGFwZTxTaGFwZT4pID0+IFByb21pc2U8YW55PlxuICA6IDxcbiAgICAgIFVwZGF0ZVBhcmFtcyBleHRlbmRzIE9wdGltaXN0aWNVcGRhdGVQYXJhbXM8XG4gICAgICAgIFNjaGVtYUZyb21TaGFwZTxTaGFwZT4sXG4gICAgICAgIEZldGNoU2hhcGU8YW55LCBhbnksIGFueT5cbiAgICAgID5bXVxuICAgID4oXG4gICAgICBwYXJhbXM6IFBhcmFtc0Zyb21TaGFwZTxTaGFwZT4sXG4gICAgICBib2R5OiBCb2R5RnJvbVNoYXBlPFNoYXBlPixcbiAgICAgIHVwZGF0ZVBhcmFtcz86IFVwZGF0ZVBhcmFtcyB8IHVuZGVmaW5lZCxcbiAgICApID0+IFByb21pc2U8YW55PiB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlQ29udGV4dChEaXNwYXRjaENvbnRleHQpO1xuXG4gIC8vIHdlIGp1c3Qgd2FudCB0aGUgY3VycmVudCB2YWx1ZXMgd2hlbiB3ZSBkaXNwYXRjaCwgc29cbiAgLy8gYm94IHRoZSBzaGFwZSBpbiBhIHJlZiB0byBtYWtlIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyBoYXBweVxuICBjb25zdCBzaGFwZVJlZiA9IHVzZVJlZihmZXRjaFNoYXBlKTtcbiAgc2hhcGVSZWYuY3VycmVudCA9IGZldGNoU2hhcGU7XG5cbiAgY29uc3QgZmV0Y2hEaXNwYXRjaGVyID0gdXNlQ2FsbGJhY2soXG4gICAgKFxuICAgICAgcGFyYW1zOiBQYXJhbXNGcm9tU2hhcGU8U2hhcGU+LFxuICAgICAgYm9keTogQm9keUZyb21TaGFwZTxTaGFwZT4sXG4gICAgICB1cGRhdGVQYXJhbXM/OlxuICAgICAgICB8IE9wdGltaXN0aWNVcGRhdGVQYXJhbXM8XG4gICAgICAgICAgICBTY2hlbWFGcm9tU2hhcGU8U2hhcGU+LFxuICAgICAgICAgICAgRmV0Y2hTaGFwZTxhbnksIGFueSwgYW55PlxuICAgICAgICAgID5bXVxuICAgICAgICB8IHVuZGVmaW5lZCxcbiAgICApID0+IHtcbiAgICAgIGNvbnN0IHsgZmV0Y2gsIHNjaGVtYSwgdHlwZSwgZ2V0RmV0Y2hLZXksIG9wdGlvbnMgfSA9IHNoYXBlUmVmLmN1cnJlbnQ7XG4gICAgICBjb25zdCByZXNwb25zZVR5cGUgPSBTSEFQRV9UWVBFX1RPX1JFU1BPTlNFX1RZUEVbdHlwZV07XG5cbiAgICAgIGNvbnN0IGtleSA9IGdldEZldGNoS2V5KHBhcmFtcyk7XG4gICAgICBjb25zdCBpZGVudGlmaWVyID0gaXNEZWxldGVTaGFwZShzaGFwZVJlZi5jdXJyZW50KVxuICAgICAgICA/IHNoYXBlUmVmLmN1cnJlbnQuc2NoZW1hLmdldElkKHBhcmFtcylcbiAgICAgICAgOiBrZXk7XG4gICAgICBsZXQgcmVzb2x2ZTogKHZhbHVlPzogYW55IHwgUHJvbWlzZUxpa2U8YW55PikgPT4gdm9pZCA9IDAgYXMgYW55O1xuICAgICAgbGV0IHJlamVjdDogKHJlYXNvbj86IGFueSkgPT4gdm9pZCA9IDAgYXMgYW55O1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlPGFueT4oKGEsIGIpID0+IHtcbiAgICAgICAgW3Jlc29sdmUsIHJlamVjdF0gPSBbYSwgYl07XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IG1ldGE6IEZldGNoQWN0aW9uWydtZXRhJ10gPSB7XG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgcmVzcG9uc2VUeXBlLFxuICAgICAgICB1cmw6IGlkZW50aWZpZXIsXG4gICAgICAgIHRocm90dGxlLFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICByZXNvbHZlLFxuICAgICAgICByZWplY3QsXG4gICAgICB9O1xuXG4gICAgICBpZiAodXBkYXRlUGFyYW1zKSB7XG4gICAgICAgIG1ldGEudXBkYXRlcnMgPSB1cGRhdGVQYXJhbXMucmVkdWNlKFxuICAgICAgICAgIChhY2N1bXVsYXRvcjogb2JqZWN0LCBbdG9TaGFwZSwgdG9QYXJhbXMsIHVwZGF0ZUZuXSkgPT4gKHtcbiAgICAgICAgICAgIFt0b1NoYXBlLmdldEZldGNoS2V5KHRvUGFyYW1zKV06IHVwZGF0ZUZuLFxuICAgICAgICAgICAgLi4uYWNjdW11bGF0b3IsXG4gICAgICAgICAgfSksXG4gICAgICAgICAge30sXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ3Jlc3QtaG9va3MvZmV0Y2gnLFxuICAgICAgICBwYXlsb2FkOiAoKSA9PiBmZXRjaChwYXJhbXMsIGJvZHkpLFxuICAgICAgICBtZXRhLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9LFxuICAgIFtkaXNwYXRjaCwgdGhyb3R0bGVdLFxuICApO1xuICAvLyBhbnkgaXMgZHVlIHRvIHRoZSB0ZXJuYXJ5IHRoYXQgd2UgZG9uJ3Qgd2FudCB0byBkZWFsIHdpdGggaW4gb3VyIGltcGxlbWVudGF0aW9uXG4gIHJldHVybiBmZXRjaERpc3BhdGNoZXIgYXMgYW55O1xufVxuIl19