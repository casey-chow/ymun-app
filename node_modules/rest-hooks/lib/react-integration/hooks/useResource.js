import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useDenormalized } from "../../state/selectors";
import useRetrieve from './useRetrieve';
import useError from './useError';
import { useMemo, useContext } from 'react';
import { StateContext } from "../context";
import hasUsableData from './hasUsableData';

/** single form resource */
function useOneResource(fetchShape, params) {
  var maybePromise = useRetrieve(fetchShape, params);
  var state = useContext(StateContext);

  var _useDenormalized = useDenormalized(fetchShape, params, state),
      _useDenormalized2 = _slicedToArray(_useDenormalized, 2),
      denormalized = _useDenormalized2[0],
      ready = _useDenormalized2[1];

  var error = useError(fetchShape, params, ready);
  if (!hasUsableData(ready, fetchShape) && maybePromise) throw maybePromise;
  if (error) throw error;
  return denormalized;
}
/** many form resource */


function useManyResources() {
  for (var _len = arguments.length, resourceList = new Array(_len), _key = 0; _key < _len; _key++) {
    resourceList[_key] = arguments[_key];
  }

  var state = useContext(StateContext);
  var denormalizedValues = resourceList.map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        fetchShape = _ref2[0],
        params = _ref2[1];

    return (// eslint-disable-next-line react-hooks/rules-of-hooks
      useDenormalized(fetchShape, params, state)
    );
  });
  var promises = resourceList.map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        fetchShape = _ref4[0],
        params = _ref4[1];

    return (// eslint-disable-next-line react-hooks/rules-of-hooks
      useRetrieve(fetchShape, params)
    );
  }) // only wait on promises without results
  .map(function (p, i) {
    return !hasUsableData(denormalizedValues[i][1], resourceList[i][0]) && p;
  }); // throw first valid error

  for (var i = 0; i < resourceList.length; i++) {
    var _resourceList$i = _slicedToArray(resourceList[i], 2),
        _fetchShape = _resourceList$i[0],
        _params = _resourceList$i[1];

    var _denormalizedValues$i = _slicedToArray(denormalizedValues[i], 2),
        _ = _denormalizedValues$i[0],
        ready = _denormalizedValues$i[1]; // eslint-disable-next-line react-hooks/rules-of-hooks


    var error = useError(_fetchShape, _params, ready);
    if (error && !promises[i]) throw error;
  }

  var promise = useMemo(function () {
    var activePromises = promises.filter(function (p) {
      return p;
    });

    if (activePromises.length) {
      return Promise.all(activePromises);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, promises);
  if (promise) throw promise;
  return denormalizedValues.map(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 1),
        denormalized = _ref6[0];

    return denormalized;
  });
}

export default function useResource() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  // this conditional use of hooks is ok as long as the structure of the arguments don't change
  if (Array.isArray(args[0])) {
    // TODO: provide type guard function to detect this
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return useManyResources.apply(void 0, _toConsumableArray(args));
  }

  args = args; // TODO: make return types match up with the branching logic we put in here.
  // eslint-disable-next-line react-hooks/rules-of-hooks

  return useOneResource(args[0], args[1]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,