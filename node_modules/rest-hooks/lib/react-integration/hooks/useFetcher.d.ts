import { UpdateFunction } from "../../types";
import { FetchShape, DeleteShape, Schema, SchemaFromShape, ParamsFromShape, BodyFromShape } from "../../resource";
declare type OptimisticUpdateParams<SourceSchema extends Schema, DestShape extends FetchShape<any, any, any>> = [DestShape, ParamsFromShape<DestShape>, UpdateFunction<SourceSchema, SchemaFromShape<DestShape>>];
/** Build an imperative dispatcher to issue network requests. */
export default function useFetcher<Shape extends FetchShape<Schema, Readonly<object>, Readonly<object | string> | void>>(fetchShape: Shape, throttle?: boolean): Shape extends DeleteShape<any, any, any> ? (params: ParamsFromShape<Shape>, body: BodyFromShape<Shape>) => Promise<any> : <UpdateParams extends OptimisticUpdateParams<SchemaFromShape<Shape>, FetchShape<any, any, any>>[]>(params: ParamsFromShape<Shape>, body: BodyFromShape<Shape>, updateParams?: UpdateParams | undefined) => Promise<any>;
export {};
