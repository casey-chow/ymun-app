'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var reactHooks = require('@testing-library/react-hooks');
var __ = require('..');
require('react');

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

var MockNetworkManager =
/*#__PURE__*/
function (_NetworkManager) {
  _inherits(MockNetworkManager, _NetworkManager);

  function MockNetworkManager() {
    _classCallCheck(this, MockNetworkManager);

    return _possibleConstructorReturn(this, _getPrototypeOf(MockNetworkManager).apply(this, arguments));
  }

  _createClass(MockNetworkManager, [{
    key: "handleFetch",
    value: function handleFetch(action, dispatch) {
      var mockDispatch = function mockDispatch(v) {
        reactHooks.act(function () {
          dispatch(v);
        });
        return Promise.resolve();
      };

      return _get(_getPrototypeOf(MockNetworkManager.prototype), "handleFetch", this).call(this, action, mockDispatch);
    }
  }, {
    key: "handleReceive",
    value: function handleReceive(action) {
      var _this = this;

      reactHooks.act(function () {
        _get(_getPrototypeOf(MockNetworkManager.prototype), "handleReceive", _this).call(_this, action);
      });
    }
  }]);

  return MockNetworkManager;
}(__.NetworkManager);

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

var REACT_ELEMENT_TYPE;
function _createRawReactElement(type, props, key, children) {
  if (!REACT_ELEMENT_TYPE) {
    REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol["for"] && Symbol["for"]("react.element") || 0xeac7;
  }

  var defaultProps = type && type.defaultProps;
  var childrenLength = arguments.length - 3;

  if (!props && childrenLength !== 0) {
    props = {
      children: void 0
    };
  }

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = new Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 3];
    }

    props.children = childArray;
  }

  if (props && defaultProps) {
    for (var propName in defaultProps) {
      if (props[propName] === void 0) {
        props[propName] = defaultProps[propName];
      }
    }
  } else if (!props) {
    props = defaultProps || {};
  }

  return {
    $$typeof: REACT_ELEMENT_TYPE,
    type: type,
    key: key === undefined ? null : '' + key,
    ref: null,
    props: props,
    _owner: null
  };
}

var initialState = __.__INTERNAL__.initialState;
function mockInitialState(results) {
  var now = Date.now();
  var mockState = results.reduce(function (acc, _ref) {
    var request = _ref.request,
        params = _ref.params,
        result = _ref.result;
    var schema = request.schema,
        getFetchKey = request.getFetchKey;
    var url = getFetchKey(params);
    return __.reducer(acc, {
      type: 'rest-hooks/receive',
      payload: result,
      meta: {
        schema: schema,
        url: url,
        date: now,
        expiresAt: now * 2
      }
    });
  }, initialState);
  return mockState;
}

function makeRenderRestHook(makeProvider) {
  var manager = new MockNetworkManager();
  var subManager = new __.SubscriptionManager(__.PollingSubscription);

  function renderRestHook(callback, options) {
    var initialState = options && options.results && mockInitialState(options.results);
    var Provider = makeProvider([manager, subManager], initialState);
    var Wrapper = options && options.wrapper;
    var wrapper = Wrapper ? function ProviderWrapped(_ref) {
      var children = _ref.children;
      return _createRawReactElement(Provider, {}, void 0, _createRawReactElement(Wrapper, {}, void 0, children));
    } : Provider;
    return reactHooks.renderHook(callback, _objectSpread2({}, options, {
      wrapper: wrapper
    }));
  }

  renderRestHook.cleanup = function () {
    manager.cleanup();
    subManager.cleanup();
  };

  return renderRestHook;
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

try {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  var _require = require('redux'),
      createStore = _require.createStore,
      applyMiddleware = _require.applyMiddleware;

  exports.makeExternalCacheProvider = function makeExternalCacheProvider(managers, initialState) {
    var store = createStore(__.reducer, initialState, applyMiddleware.apply(void 0, _toConsumableArray(managers.map(function (manager) {
      return manager.getMiddleware();
    })).concat([__.PromiseifyMiddleware])));
    return function ConfiguredExternalCacheProvider(_ref) {
      var children = _ref.children;
      return _createRawReactElement(__.ExternalCacheProvider, {
        store: store,
        selector: function selector(s) {
          return s;
        }
      }, void 0, children);
    };
  };
} catch (e) {
  exports.makeExternalCacheProvider = function makeExternalCacheProvider(managers, initialState) {
    throw new Error('Using makeExternalCacheProvider() requires redux to be installed as a peerDependency to rest-hooks');
  };
}

var makeCacheProvider = function makeCacheProvider(managers, initialState) {
  return function ConfiguredCacheProvider(_ref2) {
    var children = _ref2.children;
    return _createRawReactElement(__.CacheProvider, {
      managers: managers,
      initialState: initialState
    }, void 0, children);
  };
};

var StateContext = __.__INTERNAL__.StateContext;
function MockProvider(_ref) {
  var children = _ref.children,
      results = _ref.results;
  var state = mockInitialState(results);
  return _createRawReactElement(StateContext.Provider, {
    value: state
  }, void 0, children);
}

exports.MockNetworkManager = MockNetworkManager;
exports.MockProvider = MockProvider;
exports.makeCacheProvider = makeCacheProvider;
exports.makeRenderRestHook = makeRenderRestHook;
