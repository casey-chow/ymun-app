{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { schemas } from \"../../resource\";\nimport { isEntity } from \"../../resource/types\";\n/**\n * Build the result parameter to denormalize from schema alone.\n * Tries to compute the entity ids from params.\n */\n\nexport default function buildInferredResults(schema, params) {\n  if (isEntity(schema)) {\n    if (!params) return undefined;\n    var id = schema.getId(params, undefined, ''); // Was unable to infer the entity's primary key from params\n\n    if (id === undefined || id === '') return undefined;\n    return id;\n  }\n\n  if (schema instanceof schemas.Union) {\n    var discriminatedSchema = schema.inferSchema(params, undefined, ''); // Was unable to infer the entity's schema from params\n\n    if (discriminatedSchema === undefined) return undefined;\n    return {\n      id: buildInferredResults(discriminatedSchema, params),\n      schema: schema.getSchemaAttribute(params, parent, '')\n    };\n  }\n\n  if (schema instanceof schemas.Array || Array.isArray(schema)) {\n    return undefined;\n  }\n\n  if (schema instanceof schemas.Values) {\n    return {};\n  }\n\n  var o = schema instanceof schemas.Object ? schema.schema : schema;\n  var resultObject = {};\n\n  for (var k in o) {\n    if (!isSchema(o[k])) {\n      resultObject[k] = o[k];\n    } else {\n      resultObject[k] = buildInferredResults(o[k], params);\n    }\n  }\n\n  return resultObject;\n}\n\nfunction isSchema(candidate) {\n  // TODO: improve detection\n  return _typeof(candidate) === 'object' && candidate !== null && candidate !== undefined;\n}","map":{"version":3,"sources":["../../../src/state/selectors/buildInferredResults.ts"],"names":["isEntity","id","schema","schemas","discriminatedSchema","buildInferredResults","Array","o","resultObject","isSchema","candidate"],"mappings":";AAAA,SAAA,OAAA,QAAA,gBAAA;AACA,SAAA,QAAA,QAAA,sBAAA;AAEA;;;;;AAIA,eAAe,SAAA,oBAAA,CAAA,MAAA,EAAA,MAAA,EAG2C;AACxD,MAAIA,QAAQ,CAAZ,MAAY,CAAZ,EAAsB;AACpB,QAAI,CAAJ,MAAA,EAAa,OAAA,SAAA;AACb,QAAMC,EAAE,GAAGC,MAAM,CAANA,KAAAA,CAAAA,MAAAA,EAAAA,SAAAA,EAFS,EAETA,CAAX,CAFoB,CAGpB;;AACA,QAAID,EAAE,KAAFA,SAAAA,IAAoBA,EAAE,KAA1B,EAAA,EAAmC,OAAA,SAAA;AACnC,WAAA,EAAA;AACD;;AACD,MAAIC,MAAM,YAAYC,OAAO,CAA7B,KAAA,EAAqC;AACnC,QAAMC,mBAAmB,GAAGF,MAAM,CAANA,WAAAA,CAAAA,MAAAA,EAAAA,SAAAA,EADO,EACPA,CAA5B,CADmC,CAEnC;;AACA,QAAIE,mBAAmB,KAAvB,SAAA,EAAuC,OAAA,SAAA;AACvC,WAAO;AACLH,MAAAA,EAAE,EAAEI,oBAAoB,CAAA,mBAAA,EADnB,MACmB,CADnB;AAELH,MAAAA,MAAM,EAAEA,MAAM,CAANA,kBAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAFH,KAAP;AAID;;AACD,MAAIA,MAAM,YAAYC,OAAO,CAAzBD,KAAAA,IAAmCI,KAAK,CAALA,OAAAA,CAAvC,MAAuCA,CAAvC,EAA8D;AAC5D,WAAA,SAAA;AACD;;AACD,MAAIJ,MAAM,YAAYC,OAAO,CAA7B,MAAA,EAAsC;AACpC,WAAA,EAAA;AACD;;AACD,MAAMI,CAAC,GAAGL,MAAM,YAAYC,OAAO,CAAzBD,MAAAA,GAAoCA,MAAD,CAAnCA,MAAAA,GAAV,MAAA;AACA,MAAMM,YAAY,GAAlB,EAAA;;AACA,OAAK,IAAL,CAAA,IAAA,CAAA,EAAmB;AACjB,QAAI,CAACC,QAAQ,CAACF,CAAC,CAAf,CAAe,CAAF,CAAb,EAAqB;AACnBC,MAAAA,YAAY,CAAZA,CAAY,CAAZA,GAAkBD,CAAC,CAAnBC,CAAmB,CAAnBA;AADF,KAAA,MAEO;AACLA,MAAAA,YAAY,CAAZA,CAAY,CAAZA,GAAkBH,oBAAoB,CAACE,CAAC,CAAF,CAAE,CAAF,EAAtCC,MAAsC,CAAtCA;AACD;AACF;;AACD,SAAA,YAAA;AACD;;AAED,SAAA,QAAA,CAAA,SAAA,EAAkC;AAChC;AACA,SACE,OAAA,CAAA,SAAA,CAAA,KAAA,QAAA,IACAE,SAAS,KADT,IAAA,IAEAA,SAAS,KAHX,SAAA;AAKD","sourcesContent":["import { Schema, schemas, NormalizeNullable } from '~/resource';\nimport { isEntity } from '~/resource/types';\n\n/**\n * Build the result parameter to denormalize from schema alone.\n * Tries to compute the entity ids from params.\n */\nexport default function buildInferredResults<\n  Params extends Readonly<object>,\n  S extends Schema\n>(schema: S, params: Params | null): NormalizeNullable<S> {\n  if (isEntity(schema)) {\n    if (!params) return undefined as any;\n    const id = schema.getId(params, undefined, '');\n    // Was unable to infer the entity's primary key from params\n    if (id === undefined || id === '') return undefined as any;\n    return id as any;\n  }\n  if (schema instanceof schemas.Union) {\n    const discriminatedSchema = schema.inferSchema(params, undefined, '');\n    // Was unable to infer the entity's schema from params\n    if (discriminatedSchema === undefined) return undefined as any;\n    return {\n      id: buildInferredResults(discriminatedSchema, params),\n      schema: schema.getSchemaAttribute(params, parent, ''),\n    } as any;\n  }\n  if (schema instanceof schemas.Array || Array.isArray(schema)) {\n    return undefined as any;\n  }\n  if (schema instanceof schemas.Values) {\n    return {} as any;\n  }\n  const o = schema instanceof schemas.Object ? (schema as any).schema : schema;\n  const resultObject = {} as any;\n  for (const k in o) {\n    if (!isSchema(o[k])) {\n      resultObject[k] = o[k];\n    } else {\n      resultObject[k] = buildInferredResults(o[k], params);\n    }\n  }\n  return resultObject;\n}\n\nfunction isSchema(candidate: any) {\n  // TODO: improve detection\n  return (\n    typeof candidate === 'object' &&\n    candidate !== null &&\n    candidate !== undefined\n  );\n}\n"]},"metadata":{},"sourceType":"module"}