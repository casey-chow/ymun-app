{"ast":null,"code":"import useMeta from './useMeta';\n/** Access a resource or error if failed to get it */\n\nexport default function useError(fetchShape, params, cacheReady) {\n  var meta = useMeta(fetchShape, params);\n  if (!params) return;\n\n  if (!cacheReady) {\n    if (!meta) return;\n\n    if (!meta.error) {\n      // this means we probably deleted the entity found in this result\n      var err = new Error(\"Resource not found in cache \".concat(params ? fetchShape.getFetchKey(params) : ''));\n      err.status = 404;\n      return err;\n    } else {\n      return meta.error;\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/react-integration/hooks/useError.ts"],"names":["meta","useMeta","err","params","fetchShape"],"mappings":"AACA,OAAA,OAAA,MAAA,WAAA;AAIA;;AACA,eAAe,SAAA,QAAA,CAAA,UAAA,EAAA,MAAA,EAAA,UAAA,EAOkB;AAC/B,MAAMA,IAAI,GAAGC,OAAO,CAAA,UAAA,EAApB,MAAoB,CAApB;AACA,MAAI,CAAJ,MAAA,EAAa;;AACb,MAAI,CAAJ,UAAA,EAAiB;AACf,QAAI,CAAJ,IAAA,EAAW;;AACX,QAAI,CAACD,IAAI,CAAT,KAAA,EAAiB;AACf;AACA,UAAME,GAAQ,GAAG,IAAA,KAAA,CAAA,+BAAA,MAAA,CAEbC,MAAM,GAAGC,UAAU,CAAVA,WAAAA,CAAH,MAAGA,CAAH,GAFV,EAAiB,CAAA,CAAjB;AAKAF,MAAAA,GAAG,CAAHA,MAAAA,GAAAA,GAAAA;AACA,aAAA,GAAA;AARF,KAAA,MASO;AACL,aAAOF,IAAI,CAAX,KAAA;AACD;AACF;AACF","sourcesContent":["import { ReadShape, Schema } from '~/resource';\nimport useMeta from './useMeta';\n\ntype UseErrorReturn<P> = P extends null ? undefined : Error;\n\n/** Access a resource or error if failed to get it */\nexport default function useError<\n  Params extends Readonly<object>,\n  S extends Schema\n>(\n  fetchShape: ReadShape<S, Params>,\n  params: Params | null,\n  cacheReady: boolean,\n): UseErrorReturn<typeof params> {\n  const meta = useMeta(fetchShape, params);\n  if (!params) return;\n  if (!cacheReady) {\n    if (!meta) return;\n    if (!meta.error) {\n      // this means we probably deleted the entity found in this result\n      const err: any = new Error(\n        `Resource not found in cache ${\n          params ? fetchShape.getFetchKey(params) : ''\n        }`,\n      );\n      err.status = 404;\n      return err;\n    } else {\n      return meta.error as any;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}