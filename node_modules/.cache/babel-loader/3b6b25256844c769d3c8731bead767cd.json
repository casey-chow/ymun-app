{"ast":null,"code":"import { useMemo } from 'react';\nimport useFetcher from './useFetcher';\nimport useMeta from './useMeta';\n/** Returns whether the data at this url is fresh or stale */\n\nfunction useExpiresAt(fetchShape, params) {\n  var meta = useMeta(fetchShape, params);\n\n  if (!meta) {\n    return 0;\n  }\n\n  return meta.expiresAt;\n}\n/** Request a resource if it is not in cache. */\n\n\nexport default function useRetrieve(fetchShape, params) {\n  var fetch = useFetcher(fetchShape, true);\n  var expiresAt = useExpiresAt(fetchShape, params);\n  return useMemo(function () {\n    if (Date.now() <= expiresAt) return; // null params mean don't do anything\n\n    if (!params) return;\n    return fetch(params); // we need to check against serialized params, since params can change frequently\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [expiresAt, fetch, params && fetchShape.getFetchKey(params)]);\n}","map":{"version":3,"sources":["../../../src/react-integration/hooks/useRetrieve.ts"],"names":["meta","useMeta","fetch","useFetcher","expiresAt","useExpiresAt","useMemo","Date","params","fetchShape"],"mappings":"AAAA,SAAA,OAAA,QAAA,OAAA;AAGA,OAAA,UAAA,MAAA,cAAA;AACA,OAAA,OAAA,MAAA,WAAA;AAEA;;AACA,SAAA,YAAA,CAAA,UAAA,EAAA,MAAA,EAGU;AACR,MAAMA,IAAI,GAAGC,OAAO,CAAA,UAAA,EAApB,MAAoB,CAApB;;AACA,MAAI,CAAJ,IAAA,EAAW;AACT,WAAA,CAAA;AACD;;AACD,SAAOD,IAAI,CAAX,SAAA;AACD;AAED;;;AACA,eAAe,SAAA,WAAA,CAAA,UAAA,EAAA,MAAA,EAG4C;AACzD,MAAME,KAAK,GAAGC,UAAU,CAAA,UAAA,EAAxB,IAAwB,CAAxB;AACA,MAAMC,SAAS,GAAGC,YAAY,CAAA,UAAA,EAA9B,MAA8B,CAA9B;AAEA,SAAOC,OAAO,CAAC,YAAM;AACnB,QAAIC,IAAI,CAAJA,GAAAA,MAAJ,SAAA,EADmB,OAAA,CAEnB;;AACA,QAAI,CAAJ,MAAA,EAAa;AACb,WAAOL,KAAK,CAJO,MAIP,CAAZ,CAJmB,CAKnB;AACA;AANY,GAAA,EAOX,CAAA,SAAA,EAAA,KAAA,EAAmBM,MAAM,IAAIC,UAAU,CAAVA,WAAAA,CAPhC,MAOgCA,CAA7B,CAPW,CAAd;AAQD","sourcesContent":["import { useMemo } from 'react';\n\nimport { ReadShape, Schema } from '~/resource';\nimport useFetcher from './useFetcher';\nimport useMeta from './useMeta';\n\n/** Returns whether the data at this url is fresh or stale */\nfunction useExpiresAt<Params extends Readonly<object>, S extends Schema>(\n  fetchShape: ReadShape<S, Params>,\n  params: Params | null,\n): number {\n  const meta = useMeta(fetchShape, params);\n  if (!meta) {\n    return 0;\n  }\n  return meta.expiresAt;\n}\n\n/** Request a resource if it is not in cache. */\nexport default function useRetrieve<\n  Params extends Readonly<object>,\n  S extends Schema\n>(fetchShape: ReadShape<S, Params>, params: Params | null) {\n  const fetch = useFetcher(fetchShape, true);\n  const expiresAt = useExpiresAt(fetchShape, params);\n\n  return useMemo(() => {\n    if (Date.now() <= expiresAt) return;\n    // null params mean don't do anything\n    if (!params) return;\n    return fetch(params);\n    // we need to check against serialized params, since params can change frequently\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [expiresAt, fetch, params && fetchShape.getFetchKey(params)]);\n}\n"]},"metadata":{},"sourceType":"module"}