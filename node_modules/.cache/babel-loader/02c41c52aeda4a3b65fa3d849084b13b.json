{"ast":null,"code":"import { useContext, useCallback, useRef } from 'react';\nimport { DispatchContext } from \"../context\";\n/** Invalidate a certain item within the cache */\n\nexport default function useInvalidator(fetchShape) {\n  var dispatch = useContext(DispatchContext);\n  var getFetchKeyRef = useRef(fetchShape.getFetchKey);\n  getFetchKeyRef.current = fetchShape.getFetchKey;\n  var invalidateDispatcher = useCallback(function (params) {\n    if (!params) return;\n    dispatch({\n      type: 'rest-hooks/invalidate',\n      meta: {\n        url: getFetchKeyRef.current(params)\n      }\n    });\n  }, [dispatch]);\n  return invalidateDispatcher;\n}","map":{"version":3,"sources":["../../../src/react-integration/hooks/useInvalidator.ts"],"names":["dispatch","useContext","getFetchKeyRef","useRef","fetchShape","invalidateDispatcher","useCallback","type","meta","url"],"mappings":"AAAA,SAAA,UAAA,EAAA,WAAA,EAAA,MAAA,QAAA,OAAA;AAGA,SAAA,eAAA,QAAA,YAAA;AAEA;;AACA,eAAe,SAAA,cAAA,CAAA,UAAA,EAGsD;AACnE,MAAMA,QAAQ,GAAGC,UAAU,CAA3B,eAA2B,CAA3B;AACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,UAAU,CAAxC,WAA6B,CAA7B;AACAF,EAAAA,cAAc,CAAdA,OAAAA,GAAyBE,UAAU,CAAnCF,WAAAA;AAEA,MAAMG,oBAAoB,GAAGC,WAAW,CACtC,UAAA,MAAA,EAA2B;AACzB,QAAI,CAAJ,MAAA,EAAa;AACbN,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EADG,uBAAA;AAEPC,MAAAA,IAAI,EAAE;AACJC,QAAAA,GAAG,EAAEP,cAAc,CAAdA,OAAAA,CAAAA,MAAAA;AADD;AAFC,KAAD,CAARF;AAHoC,GAAA,EAUtC,CAVF,QAUE,CAVsC,CAAxC;AAaA,SAAA,oBAAA;AACD","sourcesContent":["import { useContext, useCallback, useRef } from 'react';\n\nimport { ReadShape, Schema } from '~/resource';\nimport { DispatchContext } from '~/react-integration/context';\n\n/** Invalidate a certain item within the cache */\nexport default function useInvalidator<\n  Params extends Readonly<object>,\n  S extends Schema\n>(fetchShape: ReadShape<S, Params>): (params: Params | null) => void {\n  const dispatch = useContext(DispatchContext);\n  const getFetchKeyRef = useRef(fetchShape.getFetchKey);\n  getFetchKeyRef.current = fetchShape.getFetchKey;\n\n  const invalidateDispatcher = useCallback(\n    (params: Params | null) => {\n      if (!params) return;\n      dispatch({\n        type: 'rest-hooks/invalidate',\n        meta: {\n          url: getFetchKeyRef.current(params),\n        },\n      });\n    },\n    [dispatch],\n  );\n\n  return invalidateDispatcher;\n}\n"]},"metadata":{},"sourceType":"module"}