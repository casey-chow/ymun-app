{"ast":null,"code":"import { useContext } from 'react';\nimport { StateContext } from \"../context\";\nimport { useSchemaSelect } from \"../../state/selectors\";\n/** Access a resource if it is available. */\n\nexport default function useCacheLegacy(fetchShape, params) {\n  var state = useContext(StateContext);\n  return useSchemaSelect(fetchShape, params, state);\n}","map":{"version":3,"sources":["../../../src/react-integration/hooks/useCacheLegacy.ts"],"names":["state","useContext","useSchemaSelect"],"mappings":"AAAA,SAAA,UAAA,QAAA,OAAA;AAEA,SAAA,YAAA,QAAA,YAAA;AAEA,SAAA,eAAA,QAAA,uBAAA;AAEA;;AACA,eAAe,SAAA,cAAA,CAAA,UAAA,EAAA,MAAA,EAMb;AACA,MAAMA,KAAK,GAAGC,UAAU,CAAxB,YAAwB,CAAxB;AACA,SAAOC,eAAe,CAAA,UAAA,EAAA,MAAA,EAAtB,KAAsB,CAAtB;AACD","sourcesContent":["import { useContext } from 'react';\n\nimport { StateContext } from '~/react-integration/context';\nimport { ReadShape, Schema } from '~/resource';\nimport { useSchemaSelect } from '~/state/selectors';\n\n/** Access a resource if it is available. */\nexport default function useCacheLegacy<\n  Params extends Readonly<object>,\n  S extends Schema\n>(\n  fetchShape: Pick<ReadShape<S, Params>, 'schema' | 'getFetchKey'>,\n  params: Params | null,\n) {\n  const state = useContext(StateContext);\n  return useSchemaSelect(fetchShape, params, state);\n}\n"]},"metadata":{},"sourceType":"module"}