{"ast":null,"code":"import _jsx from \"@babel/runtime/helpers/esm/jsx\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, { useEffect } from 'react';\nimport { StateContext, DispatchContext } from \"../context\";\nimport masterReducer, { initialState as defaultState } from \"../../state/reducer\";\nimport NetworkManager from \"../../state/NetworkManager\";\nimport SubscriptionManager from \"../../state/SubscriptionManager\";\nimport PollingSubscription from \"../../state/PollingSubscription\";\nimport createEnhancedReducerHook from './middleware';\n/** Controller managing state of the REST cache and coordinating network requests. */\n\nexport default function CacheProvider(_ref) {\n  var children = _ref.children,\n      managers = _ref.managers,\n      initialState = _ref.initialState;\n  var useEnhancedReducer = createEnhancedReducerHook.apply(void 0, _toConsumableArray(managers.map(function (manager) {\n    return manager.getMiddleware();\n  })));\n\n  var _useEnhancedReducer = useEnhancedReducer(masterReducer, initialState),\n      _useEnhancedReducer2 = _slicedToArray(_useEnhancedReducer, 2),\n      state = _useEnhancedReducer2[0],\n      dispatch = _useEnhancedReducer2[1]; // if we change out the manager we need to make sure it has no hanging async\n\n\n  useEffect(function () {\n    return function () {\n      for (var i = 0; i < managers.length; ++i) {\n        managers[i].cleanup();\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, managers);\n  return _jsx(DispatchContext.Provider, {\n    value: dispatch\n  }, void 0, _jsx(StateContext.Provider, {\n    value: state\n  }, void 0, children));\n}\nCacheProvider.defaultProps = {\n  managers: [new NetworkManager(), new SubscriptionManager(PollingSubscription)],\n  initialState: defaultState\n};","map":{"version":3,"sources":["../../../src/react-integration/provider/CacheProvider.tsx"],"names":["initialState","children","managers","useEnhancedReducer","manager","state","dispatch","useEffect","i","CacheProvider","defaultState"],"mappings":";;;AAAA,OAAA,KAAA,IAAA,SAAA,QAAA,OAAA;AACA,SAAA,YAAA,EAAA,eAAA,QAAA,YAAA;AACA,OAAA,aAAA,IAAwBA,YAAY,IAApC,YAAA,QAAA,qBAAA;AACA,OAAA,cAAA,MAAA,4BAAA;AACA,OAAA,mBAAA,MAAA,iCAAA;AACA,OAAA,mBAAA,MAAA,iCAAA;AAEA,OAAA,yBAAA,MAAA,cAAA;AAQA;;AACA,eAAe,SAAA,aAAA,CAAA,IAAA,EAIG;AAAA,MAHhBC,QAGgB,GAAA,IAAA,CAHhBA,QAGgB;AAAA,MAFhBC,QAEgB,GAAA,IAAA,CAFhBA,QAEgB;AAAA,MADhBF,YACgB,GAAA,IAAA,CADhBA,YACgB;AAChB,MAAMG,kBAAkB,GAAG,yBAAyB,CAAzB,KAAA,CAAA,KAAA,CAAA,EAAA,kBAAA,CACtB,QAAQ,CAAR,GAAA,CAAa,UAAA,OAAA,EAAO;AAAA,WAAIC,OAAO,CAAX,aAAIA,EAAJ;AADzB,GACK,CADsB,CAAA,CAA3B;;AADgB,MAAA,mBAAA,GAIUD,kBAAkB,CAAA,aAAA,EAJ5B,YAI4B,CAJ5B;AAAA,MAAA,oBAAA,GAAA,cAAA,CAAA,mBAAA,EAAA,CAAA,CAAA;AAAA,MAITE,KAJS,GAAA,oBAAA,CAAA,CAAA,CAAA;AAAA,MAIFC,QAJE,GAAA,oBAAA,CAAA,CAAA,CAAA,CAAA,CAMhB;;;AACAC,EAAAA,SAAS,CAAC,YAAM;AACd,WAAO,YAAM;AACX,WAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGN,QAAQ,CAA5B,MAAA,EAAqC,EAArC,CAAA,EAA0C;AACxCA,QAAAA,QAAQ,CAARA,CAAQ,CAARA,CAAAA,OAAAA;AACD;AAJW,KACd,CADc,CAMd;AANO,GAAA,EAATK,QAAS,CAATA;AASA,SACE,IAAA,CAAC,eAAD,CAAA,QAAA,EAAA;AAA0B,IAAA,KAAK,EAAED;AAAjC,GAAA,EAAA,KAAA,CAAA,EACE,IAAA,CAAC,YAAD,CAAA,QAAA,EAAA;AAAuB,IAAA,KAAK,EAAED;AAA9B,GAAA,EAAA,KAAA,CAAA,EAFJ,QAEI,CADF,CADF;AAKD;AACDI,aAAa,CAAbA,YAAAA,GAA6B;AAC3BP,EAAAA,QAAQ,EAAE,CACR,IADQ,cACR,EADQ,EAER,IAAA,mBAAA,CAHyB,mBAGzB,CAFQ,CADiB;AAK3BF,EAAAA,YAAY,EAAEU;AALa,CAA7BD","sourcesContent":["import React, { ReactNode, useEffect } from 'react';\nimport { StateContext, DispatchContext } from '~/react-integration/context';\nimport masterReducer, { initialState as defaultState } from '~/state/reducer';\nimport NetworkManager from '~/state/NetworkManager';\nimport SubscriptionManager from '~/state/SubscriptionManager';\nimport PollingSubscription from '~/state/PollingSubscription';\nimport { State, Manager } from '~/types';\nimport createEnhancedReducerHook from './middleware';\n\ninterface ProviderProps {\n  children: ReactNode;\n  managers: Manager[];\n  initialState: State<unknown>;\n}\n\n/** Controller managing state of the REST cache and coordinating network requests. */\nexport default function CacheProvider({\n  children,\n  managers,\n  initialState,\n}: ProviderProps) {\n  const useEnhancedReducer = createEnhancedReducerHook(\n    ...managers.map(manager => manager.getMiddleware()),\n  );\n  const [state, dispatch] = useEnhancedReducer(masterReducer, initialState);\n\n  // if we change out the manager we need to make sure it has no hanging async\n  useEffect(() => {\n    return () => {\n      for (let i = 0; i < managers.length; ++i) {\n        managers[i].cleanup();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, managers);\n\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>{children}</StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n}\nCacheProvider.defaultProps = {\n  managers: [\n    new NetworkManager(),\n    new SubscriptionManager(PollingSubscription),\n  ],\n  initialState: defaultState,\n};\n"]},"metadata":{},"sourceType":"module"}