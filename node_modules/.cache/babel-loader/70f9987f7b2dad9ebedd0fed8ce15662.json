{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport request from 'superagent';\nimport SimpleResource from './SimpleResource';\nvar ResourceError = \"JSON expected but not returned from API\";\n/**\n * Represents an entity to be retrieved from a server.\n * Typically 1:1 with a url endpoint.\n */\n\nvar Resource =\n/*#__PURE__*/\nfunction (_SimpleResource) {\n  _inherits(Resource, _SimpleResource);\n\n  function Resource() {\n    _classCallCheck(this, Resource);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Resource).apply(this, arguments));\n  }\n\n  _createClass(Resource, null, [{\n    key: \"fetch\",\n\n    /** A function to mutate all requests for fetch */\n\n    /** Perform network request and resolve with json body */\n    value: function fetch(method, url, body) {\n      var req = request[method](url).on('error', function () {});\n      if (this.fetchPlugin) req = req.use(this.fetchPlugin);\n      if (body) req = req.send(body);\n      return req.then(function (res) {\n        if (isInvalidResponse(res)) {\n          throw new Error(ResourceError);\n        }\n\n        return res.body;\n      });\n    }\n  }]);\n\n  return Resource;\n}(SimpleResource);\n\n_defineProperty(Resource, \"fetchPlugin\", void 0);\n\nexport { Resource as default };\nexport var isInvalidResponse = function isInvalidResponse(res) {\n  // Empty is only valid when no response is expect (204)\n  var resEmptyIsExpected = res.text === '' && res.status === 204;\n  var resBodyEmpty = Object.keys(res.body).length === 0;\n  return !(res.type.includes('json') || resEmptyIsExpected) && resBodyEmpty;\n};","map":{"version":3,"sources":["../../src/resource/Resource.ts"],"names":["ResourceError","Resource","SimpleResource","method","url","body","req","request","isInvalidResponse","res","resEmptyIsExpected","resBodyEmpty","Object"],"mappings":";;;;;;AAAA,OAAA,OAAA,MAAA,YAAA;AAGA,OAAA,cAAA,MAAA,kBAAA;AAEA,IAAMA,aAAa,GAAnB,yCAAA;AAEA;;;;;IAI8BC,Q;;;;;;;;;;;;;;AAC5B;;AAGA;0BAGEE,M,EACAC,G,EACAC,I,EACA;AACA,UAAIC,GAAG,GAAGC,OAAO,CAAPA,MAAO,CAAPA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,OAAAA,EAAiC,YAAM,CAAjD,CAAUA,CAAV;AACA,UAAI,KAAJ,WAAA,EAAsBD,GAAG,GAAGA,GAAG,CAAHA,GAAAA,CAAQ,KAAdA,WAAMA,CAANA;AACtB,UAAA,IAAA,EAAUA,GAAG,GAAGA,GAAG,CAAHA,IAAAA,CAANA,IAAMA,CAANA;AACV,aAAO,GAAG,CAAH,IAAA,CAAS,UAAA,GAAA,EAAO;AACrB,YAAIE,iBAAiB,CAArB,GAAqB,CAArB,EAA4B;AAC1B,gBAAM,IAAA,KAAA,CAAN,aAAM,CAAN;AACD;;AACD,eAAOC,GAAG,CAAV,IAAA;AAJF,OAAO,CAAP;AAMD;;;;EApB4CP,c;;gBAAjBD,Q;;SAAAA,Q;AAuB9B,OAAO,IAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,GAAA,EAAoC;AACnE;AACA,MAAME,kBAAkB,GAAGD,GAAG,CAAHA,IAAAA,KAAAA,EAAAA,IAAmBA,GAAG,CAAHA,MAAAA,KAA9C,GAAA;AACA,MAAME,YAAY,GAAGC,MAAM,CAANA,IAAAA,CAAYH,GAAG,CAAfG,IAAAA,EAAAA,MAAAA,KAArB,CAAA;AACA,SAAO,EAAEH,GAAG,CAAHA,IAAAA,CAAAA,QAAAA,CAAAA,MAAAA,KAAF,kBAAA,KAAP,YAAA;AAJK,CAAA","sourcesContent":["import request from 'superagent';\nimport { Method } from '~/types';\n\nimport SimpleResource from './SimpleResource';\n\nconst ResourceError = `JSON expected but not returned from API`;\n\n/**\n * Represents an entity to be retrieved from a server.\n * Typically 1:1 with a url endpoint.\n */\nexport default abstract class Resource extends SimpleResource {\n  /** A function to mutate all requests for fetch */\n  static fetchPlugin?: request.Plugin;\n\n  /** Perform network request and resolve with json body */\n  static fetch<T extends typeof Resource>(\n    this: T,\n    method: Method,\n    url: string,\n    body?: Readonly<object | string>,\n  ) {\n    let req = request[method](url).on('error', () => {});\n    if (this.fetchPlugin) req = req.use(this.fetchPlugin);\n    if (body) req = req.send(body);\n    return req.then(res => {\n      if (isInvalidResponse(res)) {\n        throw new Error(ResourceError);\n      }\n      return res.body;\n    });\n  }\n}\n\nexport const isInvalidResponse = (res: request.Response): boolean => {\n  // Empty is only valid when no response is expect (204)\n  const resEmptyIsExpected = res.text === '' && res.status === 204;\n  const resBodyEmpty = Object.keys(res.body).length === 0;\n  return !(res.type.includes('json') || resEmptyIsExpected) && resBodyEmpty;\n};\n"]},"metadata":{},"sourceType":"module"}