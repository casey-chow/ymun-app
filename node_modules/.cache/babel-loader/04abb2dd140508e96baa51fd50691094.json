{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useReducer, useMemo, useRef, useEffect } from 'react';\nimport usePromisifiedDispatch from './usePromisifiedDispatch'; // TODO: release as own library?\n\n/** Redux-middleware compatible integration for useReducer() */\n\nexport default function createEnhancedReducerHook() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  var useEnhancedReducer = function useEnhancedReducer(reducer, startingState) {\n    var stateRef = useRef(startingState);\n\n    var _useReducer = useReducer(reducer, startingState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        realDispatch = _useReducer2[1];\n\n    useEffect(function () {\n      stateRef.current = state;\n    }, [state]);\n    var dispatchWithPromise = usePromisifiedDispatch(realDispatch, state);\n    var outerDispatch = useMemo(function () {\n      var _dispatch = function dispatch() {\n        throw new Error(\"Dispatching while constructing your middleware is not allowed. \" + \"Other middleware would not be applied to this dispatch.\");\n      }; // closure here around dispatch allows us to change it after middleware is constructed\n\n\n      var middlewareAPI = {\n        getState: function getState() {\n          return stateRef.current;\n        },\n        dispatch: function dispatch(action) {\n          return _dispatch(action);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose(chain)(dispatchWithPromise);\n      return _dispatch;\n    }, [dispatchWithPromise]);\n    return [state, outerDispatch];\n  };\n\n  return useEnhancedReducer;\n}\n\nvar compose = function compose(fns) {\n  return function (initial) {\n    return fns.reduceRight(function (v, f) {\n      return f(v);\n    }, initial);\n  };\n};","map":{"version":3,"sources":["../../../src/react-integration/provider/middleware.ts"],"names":["middlewares","useEnhancedReducer","stateRef","useRef","state","realDispatch","useReducer","useEffect","dispatchWithPromise","usePromisifiedDispatch","outerDispatch","useMemo","dispatch","middlewareAPI","getState","chain","middleware","compose","f"],"mappings":";AAAA,SAAA,UAAA,EAAA,OAAA,EAAA,MAAA,EAAA,SAAA,QAAA,OAAA;AAGA,OAAA,sBAAA,MAAA,0BAAA,C,CAEA;;AACA;;AACA,eAAe,SAAA,yBAAA,GAEb;AAAA,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EADGA,WACH,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AADGA,IAAAA,WACH,CAAA,IAAA,CADGA,GACH,SAAA,CAAA,IAAA,CADGA;AACH;;AACA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,OAAA,EAAA,aAAA,EAMtB;AACH,QAAMC,QAAQ,GAAGC,MAAM,CAAvB,aAAuB,CAAvB;;AADG,QAAA,WAAA,GAE2BG,UAAU,CAAA,OAAA,EAFrC,aAEqC,CAFrC;AAAA,QAAA,YAAA,GAAA,cAAA,CAAA,WAAA,EAAA,CAAA,CAAA;AAAA,QAEIF,KAFJ,GAAA,YAAA,CAAA,CAAA,CAAA;AAAA,QAEWC,YAFX,GAAA,YAAA,CAAA,CAAA,CAAA;;AAIHE,IAAAA,SAAS,CAAC,YAAM;AACdL,MAAAA,QAAQ,CAARA,OAAAA,GAAAA,KAAAA;AADO,KAAA,EAEN,CAFHK,KAEG,CAFM,CAATA;AAIA,QAAMC,mBAAmB,GAAGC,sBAAsB,CAAA,YAAA,EAAlD,KAAkD,CAAlD;AAEA,QAAMC,aAAa,GAAGC,OAAO,CAAC,YAAM;AAClC,UAAIC,SAAqB,GAAG,SAAA,QAAA,GAAM;AAChC,cAAM,IAAA,KAAA,CACJ,oEADF,yDAAM,CAAN;AAFgC,OAClC,CADkC,CAOlC;;;AACA,UAAMC,aAAa,GAAG;AACpBC,QAAAA,QAAQ,EAAE,SAAA,QAAA,GAAA;AAAA,iBAAMZ,QAAQ,CAAd,OAAA;AADU,SAAA;AAEpBU,QAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,MAAA,EAAA;AAAA,iBAAoCA,SAAQ,CAA5C,MAA4C,CAA5C;AAAA;AAFU,OAAtB;AAIA,UAAMG,KAAK,GAAG,WAAW,CAAX,GAAA,CAAgB,UAAA,UAAA,EAAU;AAAA,eAAIC,UAAU,CAAd,aAAc,CAAd;AAAxC,OAAc,CAAd;AACAJ,MAAAA,SAAQ,GAAGK,OAAO,CAAPA,KAAO,CAAPA,CAAXL,mBAAWK,CAAXL;AACA,aAAA,SAAA;AAd2B,KAAA,EAe1B,CAfH,mBAeG,CAf0B,CAA7B;AAgBA,WAAO,CAAA,KAAA,EAAP,aAAO,CAAP;AAhCF,GAAA;;AAkCA,SAAA,kBAAA;AACD;;AAED,IAAMK,OAAO,GAAG,SAAVA,OAAU,CAAA,GAAA,EAAA;AAAA,SAAqB,UAAA,OAAA,EAAA;AAAA,WACnC,GAAG,CAAH,WAAA,CAAgB,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,aAAUC,CAAC,CAAX,CAAW,CAAX;AAAhB,KAAA,EADmC,OACnC,CADmC;AAArB,GAAA;AAAhB,CAAA","sourcesContent":["import { useReducer, useMemo, useRef, useCallback, useEffect } from 'react';\nimport { Middleware, Dispatch } from '~/types';\n\nimport usePromisifiedDispatch from './usePromisifiedDispatch';\n\n// TODO: release as own library?\n/** Redux-middleware compatible integration for useReducer() */\nexport default function createEnhancedReducerHook(\n  ...middlewares: Middleware[]\n) {\n  const useEnhancedReducer = <R extends React.Reducer<any, any>>(\n    reducer: R,\n    startingState: React.ReducerState<R>,\n  ): [\n    React.ReducerState<R>,\n    (value: React.ReducerAction<R>) => Promise<any>,\n  ] => {\n    const stateRef = useRef(startingState);\n    const [state, realDispatch] = useReducer(reducer, startingState);\n\n    useEffect(() => {\n      stateRef.current = state;\n    }, [state]);\n\n    const dispatchWithPromise = usePromisifiedDispatch(realDispatch, state);\n\n    const outerDispatch = useMemo(() => {\n      let dispatch: Dispatch<R> = () => {\n        throw new Error(\n          `Dispatching while constructing your middleware is not allowed. ` +\n            `Other middleware would not be applied to this dispatch.`,\n        );\n      };\n      // closure here around dispatch allows us to change it after middleware is constructed\n      const middlewareAPI = {\n        getState: () => stateRef.current,\n        dispatch: (action: React.ReducerAction<R>) => dispatch(action),\n      };\n      const chain = middlewares.map(middleware => middleware(middlewareAPI));\n      dispatch = compose(chain)(dispatchWithPromise);\n      return dispatch;\n    }, [dispatchWithPromise]);\n    return [state, outerDispatch];\n  };\n  return useEnhancedReducer;\n}\n\nconst compose = (fns: Function[]) => (initial: any) =>\n  fns.reduceRight((v, f) => f(v), initial);\n"]},"metadata":{},"sourceType":"module"}