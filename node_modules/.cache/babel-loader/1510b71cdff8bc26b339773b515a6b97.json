{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { useMemo } from 'react';\nimport { isEntity } from \"../../resource/types\";\nimport { denormalize } from \"../../resource\";\nimport buildInferredResults from './buildInferredResults';\n/**\n * Selects the denormalized form from `state` cache.\n *\n * If `result` is not found, will attempt to generate it naturally\n * using params and schema. This increases cache hit rate for many\n * detail shapes.\n *\n * @returns [denormalizedValue, allEntitiesFound]\n */\n\nexport default function useDenormalized(_ref, params, state) {\n  var schema = _ref.schema,\n      getFetchKey = _ref.getFetchKey; // Select from state\n\n  var entities = state.entities;\n  var cacheResults = params && state.results[getFetchKey(params)]; // We can grab entities without actual results if the params compute a primary key\n\n  var results = useMemo(function () {\n    if (cacheResults) return cacheResults; // in case we don't even have entities for a model yet, denormalize() will throw\n    // entities[entitySchema.key] === undefined\n\n    return buildInferredResults(schema, params); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cacheResults, params && getFetchKey(params)]); // The final denormalize block\n\n  return useMemo(function () {\n    // Warn users with bad configurations\n    if (process.env.NODE_ENV !== 'production' && isEntity(schema)) {\n      var paramEncoding = params ? getFetchKey(params) : '';\n\n      if (Array.isArray(results)) {\n        throw new Error(\"url \".concat(paramEncoding, \" has list results when single result is expected\"));\n      }\n\n      if (_typeof(results) === 'object') {\n        throw new Error(\"url \".concat(paramEncoding, \" has object results when single result is expected\"));\n      }\n    } // second argument is false if any entities are missing\n\n\n    var _denormalize = denormalize(results, schema, entities),\n        _denormalize2 = _slicedToArray(_denormalize, 2),\n        denormalized = _denormalize2[0],\n        entitiesFound = _denormalize2[1];\n\n    return [denormalized, entitiesFound]; // TODO: would be nice to make this only recompute on the entity types that are in schema\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [entities, params && getFetchKey(params), results]);\n}","map":{"version":3,"sources":["../../../src/state/selectors/useDenormalized.ts"],"names":["schema","getFetchKey","entities","state","cacheResults","params","results","useMemo","buildInferredResults","process","isEntity","paramEncoding","Array","denormalized","entitiesFound","denormalize"],"mappings":";;AAAA,SAAA,OAAA,QAAA,OAAA;AAEA,SAAA,QAAA,QAAA,sBAAA;AACA,SAAA,WAAA,QAAA,gBAAA;AACA,OAAA,oBAAA,MAAA,wBAAA;AAEA;;;;;;;;;;AASA,eAAe,SAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,EAUb;AAAA,MANEA,MAMF,GAAA,IAAA,CANEA,MAMF;AAAA,MANUC,WAMV,GAAA,IAAA,CANUA,WAMV,CAAA,CACA;;AACA,MAAMC,QAAQ,GAAGC,KAAK,CAAtB,QAAA;AACA,MAAMC,YAAY,GAAGC,MAAM,IAAIF,KAAK,CAALA,OAAAA,CAAcF,WAAW,CAHxD,MAGwD,CAAzBE,CAA/B,CAHA,CAKA;;AACA,MAAMG,OAAO,GAAGC,OAAO,CAAC,YAAM;AAC5B,QAAA,YAAA,EAAkB,OADU,YACV,CADU,CAG5B;AACA;;AACA,WAAOC,oBAAoB,CAAA,MAAA,EALC,MAKD,CAA3B,CAL4B,CAM5B;AANqB,GAAA,EAOpB,CAAA,YAAA,EAAeH,MAAM,IAAIJ,WAAW,CAbvC,MAauC,CAApC,CAPoB,CAAvB,CANA,CAeA;;AACA,SAAOM,OAAO,CAAC,YAAM;AACnB;AACA,QAAIE,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAAA,YAAAA,IAAyCC,QAAQ,CAArD,MAAqD,CAArD,EAA+D;AAC7D,UAAMC,aAAa,GAAGN,MAAM,GAAGJ,WAAW,CAAd,MAAc,CAAd,GAA5B,EAAA;;AACA,UAAIW,KAAK,CAALA,OAAAA,CAAJ,OAAIA,CAAJ,EAA4B;AAC1B,cAAM,IAAA,KAAA,CAAA,OAAA,MAAA,CAAA,aAAA,EAAN,kDAAM,CAAA,CAAN;AAGD;;AACD,UAAI,OAAA,CAAA,OAAA,CAAA,KAAJ,QAAA,EAAiC;AAC/B,cAAM,IAAA,KAAA,CAAA,OAAA,MAAA,CAAA,aAAA,EAAN,oDAAM,CAAA,CAAN;AAGD;AAbgB,KAAA,CAgBnB;;;AAhBmB,QAAA,YAAA,GAiBmCG,WAAW,CAAA,OAAA,EAAA,MAAA,EAjB9C,QAiB8C,CAjB9C;AAAA,QAAA,aAAA,GAAA,cAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,QAiBZF,YAjBY,GAAA,aAAA,CAAA,CAAA,CAAA;AAAA,QAiBEC,aAjBF,GAAA,aAAA,CAAA,CAAA,CAAA;;AAsBnB,WAAO,CAAA,YAAA,EAtBY,aAsBZ,CAAP,CAtBmB,CAuBnB;AACA;AAxBY,GAAA,EAyBX,CAAA,QAAA,EAAWT,MAAM,IAAIJ,WAAW,CAAhC,MAAgC,CAAhC,EAzBH,OAyBG,CAzBW,CAAd;AA0BD","sourcesContent":["import { useMemo } from 'react';\nimport { State } from '~/types';\nimport { isEntity, ReadShape } from '~/resource/types';\nimport { Schema, denormalize, DenormalizeNullable } from '~/resource';\nimport buildInferredResults from './buildInferredResults';\n\n/**\n * Selects the denormalized form from `state` cache.\n *\n * If `result` is not found, will attempt to generate it naturally\n * using params and schema. This increases cache hit rate for many\n * detail shapes.\n *\n * @returns [denormalizedValue, allEntitiesFound]\n */\nexport default function useDenormalized<\n  Params extends Readonly<object>,\n  S extends Schema\n>(\n  { schema, getFetchKey }: Pick<ReadShape<S, Params>, 'schema' | 'getFetchKey'>,\n  params: Params | null,\n  state: State<any>,\n): [\n  DenormalizeNullable<typeof schema>,\n  typeof params extends null ? false : boolean,\n] {\n  // Select from state\n  const entities = state.entities;\n  const cacheResults = params && state.results[getFetchKey(params)];\n\n  // We can grab entities without actual results if the params compute a primary key\n  const results = useMemo(() => {\n    if (cacheResults) return cacheResults;\n\n    // in case we don't even have entities for a model yet, denormalize() will throw\n    // entities[entitySchema.key] === undefined\n    return buildInferredResults(schema, params);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cacheResults, params && getFetchKey(params)]);\n\n  // The final denormalize block\n  return useMemo(() => {\n    // Warn users with bad configurations\n    if (process.env.NODE_ENV !== 'production' && isEntity(schema)) {\n      const paramEncoding = params ? getFetchKey(params) : '';\n      if (Array.isArray(results)) {\n        throw new Error(\n          `url ${paramEncoding} has list results when single result is expected`,\n        );\n      }\n      if (typeof results === 'object') {\n        throw new Error(\n          `url ${paramEncoding} has object results when single result is expected`,\n        );\n      }\n    }\n\n    // second argument is false if any entities are missing\n    const [denormalized, entitiesFound]: [any, boolean] = denormalize(\n      results,\n      schema,\n      entities,\n    );\n    return [denormalized, entitiesFound] as any;\n    // TODO: would be nice to make this only recompute on the entity types that are in schema\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [entities, params && getFetchKey(params), results]);\n}\n"]},"metadata":{},"sourceType":"module"}