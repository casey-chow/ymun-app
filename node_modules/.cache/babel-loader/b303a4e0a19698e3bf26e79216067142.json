{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { normalize } from \"../resource\";\nimport mergeDeepCopy from './merge/mergeDeepCopy';\nimport applyUpdatersToResults from './applyUpdatersToResults';\nexport var initialState = {\n  entities: {},\n  results: {},\n  meta: {}\n};\nexport default function reducer(state, action) {\n  if (!state) state = initialState;\n\n  switch (action.type) {\n    case 'rest-hooks/receive':\n      {\n        if (action.error) {\n          return _objectSpread({}, state, {\n            meta: _objectSpread({}, state.meta, _defineProperty({}, action.meta.url, {\n              date: action.meta.date,\n              error: action.payload,\n              expiresAt: action.meta.expiresAt\n            }))\n          });\n        }\n\n        var _normalize = normalize(action.payload, action.meta.schema),\n            result = _normalize.result,\n            entities = _normalize.entities;\n\n        var results = _objectSpread({}, state.results, _defineProperty({}, action.meta.url, result));\n\n        results = applyUpdatersToResults(results, result, action.meta.updaters);\n        return {\n          entities: mergeDeepCopy(state.entities, entities),\n          results: results,\n          meta: _objectSpread({}, state.meta, _defineProperty({}, action.meta.url, {\n            date: action.meta.date,\n            expiresAt: action.meta.expiresAt\n          }))\n        };\n      }\n\n    case 'rest-hooks/rpc':\n      {\n        if (action.error) return state;\n\n        var _normalize2 = normalize(action.payload, action.meta.schema),\n            _entities = _normalize2.entities,\n            _result = _normalize2.result;\n\n        var _results = applyUpdatersToResults(state.results, _result, action.meta.updaters);\n\n        return _objectSpread({}, state, {\n          entities: mergeDeepCopy(state.entities, _entities),\n          results: _results\n        });\n      }\n\n    case 'rest-hooks/purge':\n      {\n        if (action.error) return state;\n        var key = action.meta.schema.key;\n        var pk = action.meta.url;\n\n        var _entities2 = purgeEntity(state.entities, key, pk);\n\n        return _objectSpread({}, state, {\n          entities: _entities2\n        });\n      }\n\n    case 'rest-hooks/invalidate':\n      return _objectSpread({}, state, {\n        meta: _objectSpread({}, state.meta, _defineProperty({}, action.meta.url, _objectSpread({}, state.meta[action.meta.url], {\n          expiresAt: 0\n        })))\n      });\n\n    case 'rest-hooks/reset':\n      return initialState;\n\n    default:\n      // If 'fetch' action reaches the reducer there are no middlewares installed to handle it\n      if (process.env.NODE_ENV !== 'production' && action.type === 'rest-hooks/fetch') {\n        console.warn('Reducer recieved fetch action - you are likely missing the NetworkManager middleware');\n        console.warn('See https://resthooks.io/docs/guides/redux#indextsx for hooking up redux');\n      } // A reducer must always return a valid state.\n      // Alternatively you can throw an error if an invalid action is dispatched.\n\n\n      return state;\n  }\n} // equivalent to entities.deleteIn(key, pk)\n\nfunction purgeEntity(entities, key, pk) {\n  var copy = _objectSpread({}, entities);\n\n  copy[key] = _objectSpread({}, copy[key]);\n  delete copy[key][pk];\n  return copy;\n}","map":{"version":3,"sources":["../../src/state/reducer.ts"],"names":["initialState","entities","results","meta","state","action","date","error","expiresAt","result","normalize","applyUpdatersToResults","mergeDeepCopy","key","pk","purgeEntity","process","console","copy"],"mappings":";;AAAA,SAAA,SAAA,QAAA,aAAA;AAGA,OAAA,aAAA,MAAA,uBAAA;AACA,OAAA,sBAAA,MAAA,0BAAA;AAEA,OAAO,IAAMA,YAA4B,GAAG;AAC1CC,EAAAA,QAAQ,EADkC,EAAA;AAE1CC,EAAAA,OAAO,EAFmC,EAAA;AAG1CC,EAAAA,IAAI,EAAE;AAHoC,CAArC;AAMP,eAAe,SAAA,OAAA,CAAA,KAAA,EAAA,MAAA,EAGG;AAChB,MAAI,CAAJ,KAAA,EAAYC,KAAK,GAALA,YAAAA;;AACZ,UAAQC,MAAM,CAAd,IAAA;AACE,SAAA,oBAAA;AAA2B;AACzB,YAAIA,MAAM,CAAV,KAAA,EAAkB;AAChB,iBAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEF,YAAAA,IAAI,EAAA,aAAA,CAAA,EAAA,EACCC,KAAK,CADN,IAAA,EAAA,eAAA,CAAA,EAAA,EAEDC,MAAM,CAANA,IAAAA,CAFC,GAAA,EAEiB;AACjBC,cAAAA,IAAI,EAAED,MAAM,CAANA,IAAAA,CADW,IAAA;AAEjBE,cAAAA,KAAK,EAAEF,MAAM,CAFI,OAAA;AAGjBG,cAAAA,SAAS,EAAEH,MAAM,CAANA,IAAAA,CAAYG;AAHN,aAFjB,CAAA;AAFN,WAAA,CAAA;AAWD;;AAbwB,YAAA,UAAA,GAcIE,SAAS,CACpCL,MAAM,CAD8B,OAAA,EAEpCA,MAAM,CAANA,IAAAA,CAhBuB,MAca,CAdb;AAAA,YAcjBI,MAdiB,GAAA,UAAA,CAAA,MAAA;AAAA,YAcTR,QAdS,GAAA,UAAA,CAAA,QAAA;;AAkBzB,YAAIC,OAAO,GAAA,aAAA,CAAA,EAAA,EACNE,KAAK,CADC,OAAA,EAAA,eAAA,CAAA,EAAA,EAERC,MAAM,CAANA,IAAAA,CAFQ,GAAA,EAAX,MAAW,CAAA,CAAX;;AAIAH,QAAAA,OAAO,GAAGS,sBAAsB,CAAA,OAAA,EAAA,MAAA,EAAkBN,MAAM,CAANA,IAAAA,CAAlDH,QAAgC,CAAhCA;AACA,eAAO;AACLD,UAAAA,QAAQ,EAAEW,aAAa,CAACR,KAAK,CAAN,QAAA,EADlB,QACkB,CADlB;AAELF,UAAAA,OAAO,EAFF,OAAA;AAGLC,UAAAA,IAAI,EAAA,aAAA,CAAA,EAAA,EACCC,KAAK,CADN,IAAA,EAAA,eAAA,CAAA,EAAA,EAEDC,MAAM,CAANA,IAAAA,CAFC,GAAA,EAEiB;AACjBC,YAAAA,IAAI,EAAED,MAAM,CAANA,IAAAA,CADW,IAAA;AAEjBG,YAAAA,SAAS,EAAEH,MAAM,CAANA,IAAAA,CAAYG;AAFN,WAFjB,CAAA;AAHC,SAAP;AAWD;;AACD,SAAA,gBAAA;AAAuB;AACrB,YAAIH,MAAM,CAAV,KAAA,EAAkB,OAAA,KAAA;;AADG,YAAA,WAAA,GAEQK,SAAS,CACpCL,MAAM,CAD8B,OAAA,EAEpCA,MAAM,CAANA,IAAAA,CAJmB,MAEiB,CAFjB;AAAA,YAEbJ,SAFa,GAAA,WAAA,CAAA,QAAA;AAAA,YAEHQ,OAFG,GAAA,WAAA,CAAA,MAAA;;AAMrB,YAAMP,QAAO,GAAGS,sBAAsB,CACpCP,KAAK,CAD+B,OAAA,EAAA,OAAA,EAGpCC,MAAM,CAANA,IAAAA,CAHF,QAAsC,CAAtC;;AAKA,eAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEJ,UAAAA,QAAQ,EAAEW,aAAa,CAACR,KAAK,CAAN,QAAA,EAFzB,SAEyB,CAFzB;AAGEF,UAAAA,OAAO,EAAPA;AAHF,SAAA,CAAA;AAKD;;AACD,SAAA,kBAAA;AAAyB;AACvB,YAAIG,MAAM,CAAV,KAAA,EAAkB,OAAA,KAAA;AAClB,YAAMQ,GAAG,GAAGR,MAAM,CAANA,IAAAA,CAAAA,MAAAA,CAAZ,GAAA;AACA,YAAMS,EAAE,GAAGT,MAAM,CAANA,IAAAA,CAAX,GAAA;;AACA,YAAMJ,UAAQ,GAAGc,WAAW,CAACX,KAAK,CAAN,QAAA,EAAA,GAAA,EAA5B,EAA4B,CAA5B;;AACA,eAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEH,UAAAA,QAAQ,EAARA;AAFF,SAAA,CAAA;AAID;;AACD,SAAA,uBAAA;AACE,aAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEE,QAAAA,IAAI,EAAA,aAAA,CAAA,EAAA,EACCC,KAAK,CADN,IAAA,EAAA,eAAA,CAAA,EAAA,EAEDC,MAAM,CAANA,IAAAA,CAFC,GAAA,EAAA,aAAA,CAAA,EAAA,EAGGD,KAAK,CAALA,IAAAA,CAAWC,MAAM,CAANA,IAAAA,CAHd,GAGGD,CAHH,EAAA;AAIAI,UAAAA,SAAS,EAAE;AAJX,SAAA,CAAA,CAAA;AAFN,OAAA,CAAA;;AAUF,SAAA,kBAAA;AACE,aAAA,YAAA;;AAEF;AACE;AACA,UACEQ,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAAA,YAAAA,IACAX,MAAM,CAANA,IAAAA,KAFF,kBAAA,EAGE;AACAY,QAAAA,OAAO,CAAPA,IAAAA,CAAAA,sFAAAA;AAGAA,QAAAA,OAAO,CAAPA,IAAAA,CAAAA,0EAAAA;AATJ,OAAA,CAaE;AACA;;;AACA,aAAA,KAAA;AA5FJ;AA8FD,C,CAID;;AACA,SAAA,WAAA,CAAA,QAAA,EAAA,GAAA,EAAA,EAAA,EAIE;AACA,MAAMC,IAA+B,GAAA,aAAA,CAAA,EAAA,EAArC,QAAqC,CAArC;;AACAA,EAAAA,IAAI,CAAJA,GAAI,CAAJA,GAAAA,aAAAA,CAAAA,EAAAA,EAAiBA,IAAI,CAArBA,GAAqB,CAArBA,CAAAA;AACA,SAAOA,IAAI,CAAJA,GAAI,CAAJA,CAAP,EAAOA,CAAP;AACA,SAAA,IAAA;AACD","sourcesContent":["import { normalize } from '~/resource';\nimport { ActionTypes, State } from '~/types';\n\nimport mergeDeepCopy from './merge/mergeDeepCopy';\nimport applyUpdatersToResults from './applyUpdatersToResults';\n\nexport const initialState: State<unknown> = {\n  entities: {},\n  results: {},\n  meta: {},\n};\n\nexport default function reducer(\n  state: State<unknown> | undefined,\n  action: ActionTypes,\n): State<unknown> {\n  if (!state) state = initialState;\n  switch (action.type) {\n    case 'rest-hooks/receive': {\n      if (action.error) {\n        return {\n          ...state,\n          meta: {\n            ...state.meta,\n            [action.meta.url]: {\n              date: action.meta.date,\n              error: action.payload,\n              expiresAt: action.meta.expiresAt,\n            },\n          },\n        };\n      }\n      const { result, entities } = normalize(\n        action.payload,\n        action.meta.schema,\n      );\n      let results = {\n        ...state.results,\n        [action.meta.url]: result,\n      };\n      results = applyUpdatersToResults(results, result, action.meta.updaters);\n      return {\n        entities: mergeDeepCopy(state.entities, entities),\n        results,\n        meta: {\n          ...state.meta,\n          [action.meta.url]: {\n            date: action.meta.date,\n            expiresAt: action.meta.expiresAt,\n          },\n        },\n      };\n    }\n    case 'rest-hooks/rpc': {\n      if (action.error) return state;\n      const { entities, result } = normalize(\n        action.payload,\n        action.meta.schema,\n      );\n      const results = applyUpdatersToResults(\n        state.results,\n        result,\n        action.meta.updaters,\n      );\n      return {\n        ...state,\n        entities: mergeDeepCopy(state.entities, entities),\n        results,\n      };\n    }\n    case 'rest-hooks/purge': {\n      if (action.error) return state;\n      const key = action.meta.schema.key;\n      const pk = action.meta.url;\n      const entities = purgeEntity(state.entities, key, pk);\n      return {\n        ...state,\n        entities,\n      };\n    }\n    case 'rest-hooks/invalidate':\n      return {\n        ...state,\n        meta: {\n          ...state.meta,\n          [action.meta.url]: {\n            ...state.meta[action.meta.url],\n            expiresAt: 0,\n          },\n        },\n      };\n    case 'rest-hooks/reset':\n      return initialState;\n\n    default:\n      // If 'fetch' action reaches the reducer there are no middlewares installed to handle it\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        action.type === 'rest-hooks/fetch'\n      ) {\n        console.warn(\n          'Reducer recieved fetch action - you are likely missing the NetworkManager middleware',\n        );\n        console.warn(\n          'See https://resthooks.io/docs/guides/redux#indextsx for hooking up redux',\n        );\n      }\n      // A reducer must always return a valid state.\n      // Alternatively you can throw an error if an invalid action is dispatched.\n      return state;\n  }\n}\n\ntype Writable<T> = { [P in keyof T]: NonNullable<T[P]> };\n\n// equivalent to entities.deleteIn(key, pk)\nfunction purgeEntity(\n  entities: State<unknown>['entities'],\n  key: string,\n  pk: string,\n) {\n  const copy: Writable<typeof entities> = { ...entities } as any;\n  copy[key] = { ...copy[key] };\n  delete copy[key][pk];\n  return copy;\n}\n"]},"metadata":{},"sourceType":"module"}