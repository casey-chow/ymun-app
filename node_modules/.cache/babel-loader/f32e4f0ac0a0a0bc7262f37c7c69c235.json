{"ast":null,"code":"import { useContext, useEffect, useRef } from 'react';\nimport { DispatchContext } from \"../context\";\n/** Keeps a resource fresh by subscribing to updates. */\n\nexport default function useSubscription(fetchShape, params) {\n  var dispatch = useContext(DispatchContext);\n  /*\n  we just want the current values when we dispatch, so\n  box the shape in a ref to make react-hooks/exhaustive-deps happy\n   \"Although useEffect is deferred until after the browser has painted, it’s guaranteed to fire before any new renders.\n  React will always flush a previous render’s effects before starting a new update.\" - https://reactjs.org/docs/hooks-reference.html#useeffect\n  */\n\n  var shapeRef = useRef(fetchShape);\n  shapeRef.current = fetchShape;\n  useEffect(function () {\n    if (!params) return;\n    var _shapeRef$current = shapeRef.current,\n        _fetch = _shapeRef$current.fetch,\n        schema = _shapeRef$current.schema,\n        getFetchKey = _shapeRef$current.getFetchKey,\n        options = _shapeRef$current.options;\n    var url = getFetchKey(params);\n    dispatch({\n      type: 'rest-hooks/subscribe',\n      meta: {\n        schema: schema,\n        fetch: function fetch() {\n          return _fetch(params);\n        },\n        url: url,\n        frequency: options && options.pollFrequency\n      }\n    });\n    return function () {\n      dispatch({\n        type: 'rest-hooks/unsubscribe',\n        meta: {\n          url: url,\n          frequency: options && options.pollFrequency\n        }\n      });\n    }; // serialize params\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, params && fetchShape.getFetchKey(params)]);\n}","map":{"version":3,"sources":["../../../src/react-integration/hooks/useSubscription.ts"],"names":["dispatch","useContext","shapeRef","useRef","useEffect","fetch","schema","getFetchKey","options","url","type","meta","frequency","pollFrequency","params","fetchShape"],"mappings":"AAAA,SAAA,UAAA,EAAA,SAAA,EAAA,MAAA,QAAA,OAAA;AAEA,SAAA,eAAA,QAAA,YAAA;AAGA;;AACA,eAAe,SAAA,eAAA,CAAA,UAAA,EAAA,MAAA,EAG4C;AACzD,MAAMA,QAAQ,GAAGC,UAAU,CAA3B,eAA2B,CAA3B;AACA;;;;;;;AAOA,MAAMC,QAAQ,GAAGC,MAAM,CAAvB,UAAuB,CAAvB;AACAD,EAAAA,QAAQ,CAARA,OAAAA,GAAAA,UAAAA;AAEAE,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAAJ,MAAA,EAAa;AADC,QAAA,iBAAA,GAEkCF,QAAQ,CAF1C,OAAA;AAAA,QAENG,MAFM,GAAA,iBAAA,CAAA,KAAA;AAAA,QAECC,MAFD,GAAA,iBAAA,CAAA,MAAA;AAAA,QAESC,WAFT,GAAA,iBAAA,CAAA,WAAA;AAAA,QAEsBC,OAFtB,GAAA,iBAAA,CAAA,OAAA;AAGd,QAAMC,GAAG,GAAGF,WAAW,CAAvB,MAAuB,CAAvB;AAEAP,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EADG,sBAAA;AAEPC,MAAAA,IAAI,EAAE;AACJL,QAAAA,MAAM,EADF,MAAA;AAEJD,QAAAA,KAAK,EAAE,SAAA,KAAA,GAAA;AAAA,iBAAMA,MAAK,CAAX,MAAW,CAAX;AAFH,SAAA;AAGJI,QAAAA,GAAG,EAHC,GAAA;AAIJG,QAAAA,SAAS,EAAEJ,OAAO,IAAIA,OAAO,CAACK;AAJ1B;AAFC,KAAD,CAARb;AASA,WAAO,YAAM;AACXA,MAAAA,QAAQ,CAAC;AACPU,QAAAA,IAAI,EADG,wBAAA;AAEPC,QAAAA,IAAI,EAAE;AACJF,UAAAA,GAAG,EADC,GAAA;AAEJG,UAAAA,SAAS,EAAEJ,OAAO,IAAIA,OAAO,CAACK;AAF1B;AAFC,OAAD,CAARb;AAfY,KAcd,CAdc,CAuBd;AACA;AAxBO,GAAA,EAyBN,CAAA,QAAA,EAAWc,MAAM,IAAIC,UAAU,CAAVA,WAAAA,CAzBxBX,MAyBwBW,CAArB,CAzBM,CAATX;AA0BD","sourcesContent":["import { useContext, useEffect, useRef } from 'react';\n\nimport { DispatchContext } from '~/react-integration/context';\nimport { ReadShape, Schema } from '~/resource';\n\n/** Keeps a resource fresh by subscribing to updates. */\nexport default function useSubscription<\n  Params extends Readonly<object>,\n  S extends Schema\n>(fetchShape: ReadShape<S, Params>, params: Params | null) {\n  const dispatch = useContext(DispatchContext);\n  /*\n  we just want the current values when we dispatch, so\n  box the shape in a ref to make react-hooks/exhaustive-deps happy\n\n  \"Although useEffect is deferred until after the browser has painted, it’s guaranteed to fire before any new renders.\n  React will always flush a previous render’s effects before starting a new update.\" - https://reactjs.org/docs/hooks-reference.html#useeffect\n  */\n  const shapeRef = useRef(fetchShape);\n  shapeRef.current = fetchShape;\n\n  useEffect(() => {\n    if (!params) return;\n    const { fetch, schema, getFetchKey, options } = shapeRef.current;\n    const url = getFetchKey(params);\n\n    dispatch({\n      type: 'rest-hooks/subscribe',\n      meta: {\n        schema,\n        fetch: () => fetch(params),\n        url,\n        frequency: options && options.pollFrequency,\n      },\n    });\n    return () => {\n      dispatch({\n        type: 'rest-hooks/unsubscribe',\n        meta: {\n          url,\n          frequency: options && options.pollFrequency,\n        },\n      });\n    };\n    // serialize params\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, params && fetchShape.getFetchKey(params)]);\n}\n"]},"metadata":{},"sourceType":"module"}